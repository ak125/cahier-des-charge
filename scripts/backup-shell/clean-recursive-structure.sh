#!/bin/bash

# Script pour nettoyer la structure r√©cursive du projet
# 
# Ce script :
# 1. √âlimine les structures r√©cursives (dossiers contenant des sous-dossiers de m√™me nom)
# 2. Aplatit la hi√©rarchie lorsque c'est possible pour r√©duire la profondeur
# 3. Normalise la casse des dossiers en kebab-case
# 4. Assure l'unicit√© des noms de packages

echo "=== Nettoyage de la structure du projet ==="

# D√©finir les chemins et variables
BASE_DIR="packages/mcp-agents"
BACKUP_DIR="structure-backups/$(date +%Y-%m-%d-%H-%M-%S)"

# Cr√©er un r√©pertoire de sauvegarde
mkdir -p "${BACKUP_DIR}"
echo "üìÅ Backup cr√©√© dans ${BACKUP_DIR}"

# Fonction pour convertir PascalCase en kebab-case
to_kebab_case() {
  echo "$1" | sed -E 's/([a-z0-9])([A-Z])/\1-\2/g' | tr '[:upper:]' '[:lower:]'
}

# 1. Traitement des structures r√©cursives connues
echo -e "\n1. √âlimination des structures r√©cursives connues..."

# Liste des motifs r√©cursifs connus √† traiter
RECURSIVE_PATTERNS=(
  "packages/mcp-agents/analyzers/QaAnalyzer/qa-analyzer/QaAnalyzer"
  "packages/mcp-agents/generators/CaddyfileGenerator/caddyfile-generator/CaddyfileGenerator"
)

for pattern in "${RECURSIVE_PATTERNS[@]}"; do
  if [ -d "$pattern" ]; then
    echo "  üîÑ Structure r√©cursive d√©tect√©e : $pattern"
    # Cr√©er un backup
    cp -r "$pattern" "${BACKUP_DIR}/$(basename "$pattern")_backup"
    
    # Voir si le contenu peut √™tre fusionn√© avec le parent
    parent_dir=$(dirname "$pattern")
    echo "  ‚¨ÜÔ∏è Fusion du contenu avec $parent_dir"
    
    # D√©placer les fichiers (mais pas les dossiers) vers le parent
    find "$pattern" -maxdepth 1 -type f | while read file; do
      cp "$file" "$parent_dir/"
      echo "    üìÑ D√©plac√© : $(basename "$file")"
    done
    
    # Supprimer la structure r√©cursive
    rm -rf "$pattern"
    echo "  ‚úÖ Structure r√©cursive supprim√©e"
  fi
done

# 2. Normalisation de la casse des dossiers (PascalCase -> kebab-case)
echo -e "\n2. Normalisation de la casse des dossiers..."

# Trouver tous les dossiers en PascalCase
find "$BASE_DIR" -type d | grep -E '[A-Z]' | sort -r | while read dir; do
  base_name=$(basename "$dir")
  
  # Si le nom est en PascalCase
  if [[ "$base_name" =~ [A-Z] ]]; then
    kebab_name=$(to_kebab_case "$base_name")
    parent_dir=$(dirname "$dir")
    new_dir="${parent_dir}/${kebab_name}"
    
    # V√©rifier si un dossier en kebab-case √©quivalent existe d√©j√†
    if [ -d "$new_dir" ] && [ "$dir" != "$new_dir" ]; then
      echo "  üîÑ Fusion de '$dir' avec '$new_dir'"
      
      # Backup avant fusion
      cp -r "$dir" "${BACKUP_DIR}/$(echo "$dir" | tr '/' '_')_backup"
      
      # D√©placer tout le contenu vers le dossier kebab-case
      find "$dir" -maxdepth 1 -mindepth 1 | while read item; do
        target="${new_dir}/$(basename "$item")"
        
        # Si la cible existe d√©j√†, cr√©er un suffixe unique
        if [ -e "$target" ]; then
          if [ -d "$item" ]; then
            # Pour les dossiers, fusionner r√©cursivement
            cp -r "$item"/* "$target"/ 2>/dev/null || true
          else
            # Pour les fichiers, ajouter un suffixe
            cp "$item" "${target}.from-pascal" 2>/dev/null || true
          fi
        else
          # Si la cible n'existe pas, d√©placer simplement
          cp -r "$item" "$target" 2>/dev/null || true
        fi
      done
      
      # Supprimer le dossier original
      rm -rf "$dir"
      echo "    ‚úÖ Fusion termin√©e et dossier PascalCase supprim√©"
    elif [ "$dir" != "$new_dir" ]; then
      echo "  üîÑ Renommage : $dir -> $new_dir"
      
      # Backup avant renommage
      cp -r "$dir" "${BACKUP_DIR}/$(echo "$dir" | tr '/' '_')_backup"
      
      # Cr√©er le nouveau dossier et copier le contenu
      mkdir -p "$new_dir"
      cp -r "$dir"/* "$new_dir"/ 2>/dev/null || true
      
      # Supprimer l'ancien dossier
      rm -rf "$dir"
      echo "    ‚úÖ Renommage termin√©"
    fi
  fi
done

# 3. Suppression des dossiers vides pour aplatir la hi√©rarchie
echo -e "\n3. Suppression des dossiers vides..."
find "$BASE_DIR" -type d -empty -delete -print | while read dir; do
  echo "  üóëÔ∏è Dossier vide supprim√© : $dir"
done

# 4. Mise √† jour des r√©f√©rences dans les package.json
echo -e "\n4. Mise √† jour des r√©f√©rences dans les package.json..."
find "$BASE_DIR" -name "package.json" | while read pkg_file; do
  # Extraire le nom actuel du package
  current_name=$(grep -o '"name": *"[^"]*"' "$pkg_file" | cut -d'"' -f4)
  
  # D√©terminer un nom de package bas√© sur le chemin
  rel_path=$(echo "$pkg_file" | sed "s|$BASE_DIR/||" | sed 's|/package.json$||')
  dir_name=$(basename "$(dirname "$pkg_file")")
  parent_dir=$(basename "$(dirname "$(dirname "$pkg_file")")")
  
  if [[ "$parent_dir" =~ analyzers|generators|validators|orchestrators ]]; then
    type_prefix="${parent_dir%s}"  # Enlever le 's' final
    suggested_name="@mcp/${dir_name}-${type_prefix}"
  else
    suggested_name="@mcp/${dir_name}"
  fi
  
  # Ne pas modifier si le nom est d√©j√† correct
  if [ "$current_name" != "$suggested_name" ]; then
    echo "  üì¶ Mise √† jour du package.json dans $pkg_file"
    echo "    $current_name -> $suggested_name"
    
    # Backup avant modification
    cp "$pkg_file" "${BACKUP_DIR}/$(echo "$pkg_file" | tr '/' '_')_backup"
    
    # Mettre √† jour le nom du package
    sed -i "s|\"name\": *\"$current_name\"|\"name\": \"$suggested_name\"|" "$pkg_file"
  fi
done

echo -e "\n=== Nettoyage termin√© ==="
echo "üìù Un backup complet a √©t√© cr√©√© dans ${BACKUP_DIR}"
echo "‚ö†Ô∏è  N'oubliez pas d'ex√©cuter 'node fix-package-name-collisions.js' ensuite pour finaliser la r√©solution des collisions de noms"
