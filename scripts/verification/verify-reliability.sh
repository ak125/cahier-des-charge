#!/bin/bash

echo "üõ°Ô∏è V√©rification approfondie de la fiabilit√© du cahier des charges..."

CDC_DIR="cahier-des-charges"
REPORTS_DIR="$CDC_DIR/reliability-reports"
CONFIG_DIR="config"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Cr√©ation des r√©pertoires n√©cessaires
mkdir -p "$REPORTS_DIR" "$CONFIG_DIR"

# Fichier de configuration par d√©faut si non existant
if [ ! -f "$CONFIG_DIR/reliability-checks.json" ]; then
  cat > "$CONFIG_DIR/reliability-checks.json" << EOL
{
  "min_section_words": 200,
  "min_subsections": 2,
  "required_sections": ["introduction", "exigences", "specifications", "architecture", "plan-migration", "suivi"],
  "interdependency_check": true,
  "decision_traceability": true,
  "technical_foundation_check": true,
  "critical_modules": ["authentification", "paiement", "donn√©es-utilisateur"]
}
EOL
  echo "‚úÖ Configuration par d√©faut cr√©√©e: $CONFIG_DIR/reliability-checks.json"
fi

# Rapport de v√©rification
REPORT_FILE="$REPORTS_DIR/reliability-report-$TIMESTAMP.md"

echo "# Rapport de fiabilit√© du cahier des charges" > "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "Date: $(date +'%Y-%m-%d %H:%M')" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 1. V√©rification approfondie des sections
echo "## 1. V√©rification approfondie des sections" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Obtention des param√®tres de configuration
MIN_WORDS=$(grep -o '"min_section_words": [0-9]*' "$CONFIG_DIR/reliability-checks.json" | cut -d ':' -f2 | tr -d ' ,')
MIN_SUBSECTIONS=$(grep -o '"min_subsections": [0-9]*' "$CONFIG_DIR/reliability-checks.json" | cut -d ':' -f2 | tr -d ' ,')

echo "Crit√®res de v√©rification:" >> "$REPORT_FILE"
echo "- Minimum $MIN_WORDS mots par section" >> "$REPORT_FILE"
echo "- Minimum $MIN_SUBSECTIONS sous-sections" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Tableau des r√©sultats
echo "| Section | Mots | Sous-sections | Statut |" >> "$REPORT_FILE"
echo "|---------|------|---------------|--------|" >> "$REPORT_FILE"

insufficient_sections=0

for md_file in "$CDC_DIR"/*.md; do
  # Ignorer certains fichiers sp√©ciaux
  if [[ "$(basename "$md_file")" == "00-sommaire.md" || "$(basename "$md_file")" == "changelog.md" ]]; then
    continue
  fi
  
  filename=$(basename "$md_file")
  word_count=$(wc -w < "$md_file")
  subsection_count=$(grep -c "^## " "$md_file")
  
  if [ "$word_count" -lt "$MIN_WORDS" ] || [ "$subsection_count" -lt "$MIN_SUBSECTIONS" ]; then
    status="‚ö†Ô∏è Insuffisant"
    insufficient_sections=$((insufficient_sections + 1))
  else
    status="‚úÖ Complet"
  fi
  
  echo "| $filename | $word_count | $subsection_count | $status |" >> "$REPORT_FILE"
done

echo "" >> "$REPORT_FILE"
echo "R√©sultat: $insufficient_sections section(s) n√©cessitent une am√©lioration." >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# 2. V√©rification des interd√©pendances
echo "## 2. V√©rification des interd√©pendances" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "Analyse des r√©f√©rences crois√©es entre sections:" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Matrice des interd√©pendances
echo "| Section source | R√©f√©rences vers | R√©f√©rences depuis |" >> "$REPORT_FILE"
echo "|---------------|----------------|-------------------|" >> "$REPORT_FILE"

for source_file in "$CDC_DIR"/*.md; do
  # Ignorer fichiers sp√©ciaux
  if [[ "$(basename "$source_file")" == "00-sommaire.md" || "$(basename "$source_file")" == "changelog.md" ]]; then
    continue
  fi
  
  source_name=$(basename "$source_file")
  
  # R√©f√©rences sortantes
  outgoing_refs=$(grep -o "\[.*\](\.\/[^)]*)" "$source_file" | grep -o "\.\/[^)]*" | sort | uniq | wc -l)
  
  # R√©f√©rences entrantes
  incoming_refs=0
  for ref_file in "$CDC_DIR"/*.md; do
    if [ "$ref_file" != "$source_file" ]; then
      if grep -q "$source_name" "$ref_file"; then
        incoming_refs=$((incoming_refs + 1))
      fi
    fi
  done
  
  echo "| $source_name | $outgoing_refs | $incoming_refs |" >> "$REPORT_FILE"
done

echo "" >> "$REPORT_FILE"
echo "Analyse des modules isol√©s (sans r√©f√©rences):" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

for source_file in "$CDC_DIR"/*.md; do
  # Ignorer fichiers sp√©ciaux
  if [[ "$(basename "$source_file")" == "00-sommaire.md" || "$(basename "$source_file")" == "changelog.md" ]]; then
    continue
  fi
  
  source_name=$(basename "$source_file")
  
  # V√©rifier si le fichier n'a ni r√©f√©rences sortantes ni entrantes
  outgoing_refs=$(grep -o "\[.*\](\.\/[^)]*)" "$source_file" | grep -o "\.\/[^)]*" | sort | uniq | wc -l)
  
  incoming_refs=0
  for ref_file in "$CDC_DIR"/*.md; do
    if [ "$ref_file" != "$source_file" ]; then
      if grep -q "$source_name" "$ref_file"; then
        incoming_refs=$((incoming_refs + 1))
      fi
    fi
  done
  
  if [ "$outgoing_refs" -eq 0 ] && [ "$incoming_refs" -eq 0 ]; then
    echo "- ‚ö†Ô∏è **Module isol√©**: $source_name n'a aucune r√©f√©rence entrante ou sortante" >> "$REPORT_FILE"
  fi
done

echo "" >> "$REPORT_FILE"

# 3. V√©rification de la coh√©rence d'ensemble
echo "## 3. Coh√©rence d'ensemble" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# V√©rifier la terminologie coh√©rente
echo "### Analyse de coh√©rence terminologique" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Liste des termes techniques importants √† v√©rifier
tech_terms=("NestJS" "Remix" "PostgreSQL" "Prisma" "monorepo" "migration" "API" "TypeScript")

for term in "${tech_terms[@]}"; do
  occurrences=0
  variants=0
  
  # Recherche du terme exact
  occurrences=$(grep -r -o -i "$term" "$CDC_DIR" | wc -l)
  
  # Recherche des variantes (exemple: nest-js, nest js)
  variant1=$(echo "$term" | sed 's/\([A-Z]\)/-\1/g' | tr '[:upper:]' '[:lower:]')
  variant2=$(echo "$term" | sed 's/\([A-Z]\)/ \1/g' | tr '[:upper:]' '[:lower:]')
  
  variant1_count=$(grep -r -o -i "$variant1" "$CDC_DIR" | wc -l)
  variant2_count=$(grep -r -o -i "$variant2" "$CDC_DIR" | wc -l)
  
  variants=$((variant1_count + variant2_count))
  
  if [ "$variants" -gt 0 ]; then
    echo "- ‚ö†Ô∏è **Incoh√©rence terminologique**: '$term' appara√Æt sous $variants formes diff√©rentes" >> "$REPORT_FILE"
  fi
done

echo "" >> "$REPORT_FILE"

# 4. Fondations techniques auditables
echo "## 4. Fondations techniques auditables" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### D√©cisions techniques document√©es" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Chercher les d√©cisions techniques document√©es (ADR)
decision_markers=("d√©cision:" "decision:" "choix technique:" "ADR:")
decision_count=0

for md_file in "$CDC_DIR"/*.md; do
  for marker in "${decision_markers[@]}"; do
    file_decisions=$(grep -c -i "$marker" "$md_file")
    decision_count=$((decision_count + file_decisions))
  done
done

echo "Nombre total de d√©cisions techniques document√©es: $decision_count" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

if [ "$decision_count" -lt 5 ]; then
  echo "‚ö†Ô∏è **Risque de fondations insuffisantes**: Le nombre de d√©cisions techniques document√©es est faible" >> "$REPORT_FILE"
  echo "Recommandation: Documenter explicitement les choix architecturaux et technologiques majeurs avec leur justification" >> "$REPORT_FILE"
fi

echo "" >> "$REPORT_FILE"

# V√©rification des sections critiques
echo "### Couverture des modules critiques" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Extraction des modules critiques de la configuration
CRITICAL_MODULES=$(grep -o '"critical_modules":\s*\[\s*"[^"]*"' "$CONFIG_DIR/reliability-checks.json" | sed 's/"critical_modules":\s*\[\s*"//g' | tr '", ' '\n' | grep -v '^$')

echo "Modules identifi√©s comme critiques:" >> "$REPORT_FILE"
for module in $CRITICAL_MODULES; do
  echo "- $module" >> "$REPORT_FILE"
  
  # V√©rifier si le module est document√© en profondeur
  module_docs=$(grep -r -l -i "$module" "$CDC_DIR")
  
  if [ -z "$module_docs" ]; then
    echo "  - ‚ö†Ô∏è **Documentation insuffisante**: Module critique non document√©" >> "$REPORT_FILE"
  else
    detail_level=0
    for doc in $module_docs; do
      # Compter les occurrences du terme et des sections qui le contiennent
      term_count=$(grep -c -i "$module" "$doc")
      section_count=$(grep -A1 -i "##.*$module" "$doc" | wc -l)
      detail_level=$((detail_level + term_count + section_count))
    done
    
    if [ "$detail_level" -lt 10 ]; then
      echo "  - ‚ö†Ô∏è **Profondeur insuffisante**: Module critique peu d√©taill√©" >> "$REPORT_FILE"
    else
      echo "  - ‚úÖ Documentation satisfaisante" >> "$REPORT_FILE"
    fi
  fi
done

echo "" >> "$REPORT_FILE"

# R√©sum√© et recommandations
echo "## R√©sum√© et recommandations" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

echo "### √âvaluation globale de fiabilit√©" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Calcul du score de fiabilit√© (exemple simplifi√©)
reliability_score=100

if [ "$insufficient_sections" -gt 0 ]; then
  penalty=$((insufficient_sections * 5))
  reliability_score=$((reliability_score - penalty))
  echo "- P√©nalit√© pour sections insuffisantes: -$penalty points" >> "$REPORT_FILE"
fi

isolated_modules=$(grep -c "Module isol√©" "$REPORT_FILE")
if [ "$isolated_modules" -gt 0 ]; then
  penalty=$((isolated_modules * 3))
  reliability_score=$((reliability_score - penalty))
  echo "- P√©nalit√© pour modules isol√©s: -$penalty points" >> "$REPORT_FILE"
fi

term_inconsistencies=$(grep -c "Incoh√©rence terminologique" "$REPORT_FILE")
if [ "$term_inconsistencies" -gt 0 ]; then
  penalty=$((term_inconsistencies * 2))
  reliability_score=$((reliability_score - penalty))
  echo "- P√©nalit√© pour incoh√©rences terminologiques: -$penalty points" >> "$REPORT_FILE"
fi

if [ "$decision_count" -lt 5 ]; then
  penalty=$((5 - decision_count) * 4)
  reliability_score=$((reliability_score - penalty))
  echo "- P√©nalit√© pour manque de d√©cisions document√©es: -$penalty points" >> "$REPORT_FILE"
fi

echo "" >> "$REPORT_FILE"
echo "**Score de fiabilit√©**: $reliability_score / 100" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

# Classification du niveau de fiabilit√©
if [ "$reliability_score" -ge 90 ]; then
  reliability_level="üü¢ Excellent"
elif [ "$reliability_score" -ge 75 ]; then
  reliability_level="üü° Satisfaisant"
elif [ "$reliability_score" -ge 60 ]; then
  reliability_level="üü† N√©cessite des am√©liorations"
else
  reliability_level="üî¥ Risqu√© - Action requise"
fi

echo "**Niveau de fiabilit√©**: $reliability_level" >> "$REPORT_FILE"

echo "" >> "$REPORT_FILE"
echo "### Actions recommand√©es" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

if [ "$insufficient_sections" -gt 0 ]; then
  echo "1. **Enrichir les sections insuffisantes** identifi√©es dans la premi√®re partie" >> "$REPORT_FILE"
fi

if [ "$isolated_modules" -gt 0 ]; then
  echo "2. **√âtablir des liens entre les modules isol√©s** et le reste de la documentation" >> "$REPORT_FILE"
fi

if [ "$term_inconsistencies" -gt 0 ]; then
  echo "3. **Standardiser la terminologie** √† travers tout le cahier des charges" >> "$REPORT_FILE"
fi

if [ "$decision_count" -lt 5 ]; then
  echo "4. **Documenter explicitement les d√©cisions techniques** avec leur justification" >> "$REPORT_FILE"
fi

# Mise √† jour du changelog
CHANGELOG_FILE="$CDC_DIR/changelog.md"

echo -e "\n## $(date +'%Y-%m-%d') - V√©rification de fiabilit√©" >> "$CHANGELOG_FILE"
echo "- Ex√©cution d'une v√©rification approfondie de la fiabilit√©" >> "$CHANGELOG_FILE"
echo "- Score de fiabilit√©: $reliability_score/100 - Niveau: $reliability_level" >> "$CHANGELOG_FILE"
echo "- Rapport d√©taill√© g√©n√©r√©: reliability-report-$TIMESTAMP.md" >> "$CHANGELOG_FILE"

echo "‚úÖ V√©rification de fiabilit√© termin√©e"
echo "üìä Rapport g√©n√©r√©: $REPORT_FILE"
echo "üìù Changelog mis √† jour"

chmod +x "$0"
