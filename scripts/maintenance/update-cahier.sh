#!/bin/bash

echo "üîÑ Mise √† jour automatique du Cahier des Charges..."

CDC_DIR="cahier-des-charges"
SOMMAIRE_FILE="$CDC_DIR/00-sommaire.md"
CHANGELOG_FILE="$CDC_DIR/changelog.md"
BACKUP_DIR="$CDC_DIR/backups"

# Cr√©ation du r√©pertoire de backup s'il n'existe pas
mkdir -p "$BACKUP_DIR"

# Sauvegarde des fichiers avant modification (nouvelle fonctionnalit√©)
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
echo "üì¶ Sauvegarde des fichiers avant modification..."
tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" "$CDC_DIR"/*.md

# V√©rification du dossier
if [ ! -d "$CDC_DIR" ]; then
  echo "‚ùå Dossier '$CDC_DIR' introuvable. Lancez d'abord ./setup-cahier.sh."
  exit 1
fi

# D√©tection des fichiers Markdown
echo "üìÅ Recherche de fichiers dans '$CDC_DIR'..."
md_files=$(find "$CDC_DIR" -type f -name "*.md" ! -name "00-sommaire.md" ! -name "changelog.md" ! -name "interdependances.md" | sort)

# Mise √† jour de la table des mati√®res
echo "üß© Mise √† jour de la table des mati√®res..."
echo "# Cahier des Charges - Sommaire" > "$SOMMAIRE_FILE"
echo "" >> "$SOMMAIRE_FILE"
echo "## Sections principales" >> "$SOMMAIRE_FILE"
echo "" >> "$SOMMAIRE_FILE"

for f in $md_files; do
  # Extraction du titre principal du fichier
  title=$(grep -m 1 "^# " "$f" | sed 's/# //')
  rel_path=$(basename "$f")
  
  # Format avec √©mojis selon le type de fichier
  if [[ "$rel_path" == *"exigences"* ]]; then
    echo "- üìã [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"specifications"* ]]; then
    echo "- üîß [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"architecture"* ]]; then
    echo "- ü§ñ [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"migration"* ]]; then
    echo "- üîÑ [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"seo"* ]]; then
    echo "- üîç [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"suivi"* ]]; then
    echo "- üìä [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"module"* ]]; then
    echo "- üì¶ [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"agent"* ]]; then
    echo "- ü§ñ [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"interdependance"* ]]; then
    echo "- üîÑ [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  elif [[ "$rel_path" == *"decision"* ]]; then
    echo "- üìù [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  else
    echo "- [$title](./$rel_path)" >> "$SOMMAIRE_FILE"
  fi
done

# Ajout du changelog et des documents sp√©ciaux
echo "" >> "$SOMMAIRE_FILE"
echo "## Documents transverses" >> "$SOMMAIRE_FILE"
echo "" >> "$SOMMAIRE_FILE"
echo "- üîÑ [Matrice des interd√©pendances](./interdependances.md)" >> "$SOMMAIRE_FILE"
echo "- üìù [Historique des modifications](./changelog.md)" >> "$SOMMAIRE_FILE"

echo "‚úÖ Table des mati√®res mise √† jour : $SOMMAIRE_FILE"

# Mise √† jour automatique du changelog si Git actif
if [ -d .git ]; then
  echo "üìù Ajout d'une entr√©e dans le changelog..."
  DATE=$(date +'%Y-%m-%d %H:%M')
  AUTHOR=$(git config user.name || echo "Anonyme")
  echo -e "\n## $DATE ‚Äì Mise √† jour automatique" >> "$CHANGELOG_FILE"
  echo "- Auteur : $AUTHOR" >> "$CHANGELOG_FILE"
  echo "- Fichiers modifi√©s :" >> "$CHANGELOG_FILE"
  git -C "$CDC_DIR" diff --name-only | sed 's/^/  - /' >> "$CHANGELOG_FILE"
  
  # Ajout des nouveaux fichiers au changelog
  NEW_FILES=$(git -C "$CDC_DIR" ls-files --others --exclude-standard)
  if [ ! -z "$NEW_FILES" ]; then
    echo "- Nouveaux fichiers :" >> "$CHANGELOG_FILE"
    echo "$NEW_FILES" | sed 's/^/  - /' >> "$CHANGELOG_FILE"
  fi
  
  # D√©tection des renommages/d√©placements de fichiers (nouvelle fonctionnalit√©)
  echo "üîç D√©tection des renommages ou d√©placements de fichiers..."
  RENAMED_FILES=$(git diff --name-status | grep "^R" | awk '{print $2 " -> " $3}')
  if [ -n "$RENAMED_FILES" ]; then
    echo "‚ÑπÔ∏è Fichiers renomm√©s d√©tect√©s:"
    echo "$RENAMED_FILES"
    echo "- Fichiers renomm√©s:" >> "$CHANGELOG_FILE"
    echo "$RENAMED_FILES" | sed 's/^/  - /' >> "$CHANGELOG_FILE"
  fi

  echo "‚úÖ Entr√©e changelog ajout√©e."
else
  echo "‚ö†Ô∏è Git non initialis√©, changelog non enrichi automatiquement."
fi

# V√©rification des num√©ros de section et r√©organisation si n√©cessaire (am√©lioration)
echo "üî¢ V√©rification de la s√©quence des num√©ros de section..."
FILES=$(find "$CDC_DIR" -name "[0-9][0-9]*-*.md" | sort)
EXPECTED_NUM=1

for file in $FILES; do
  if [[ "$(basename "$file")" == "00-sommaire.md" ]]; then
    continue
  fi
  
  filename=$(basename "$file")
  if [[ $filename =~ ^([0-9][0-9]*)- ]]; then
    current_num=${BASH_REMATCH[1]}
    padded_expected=$(printf "%02d" $EXPECTED_NUM)
    
    if [ "$current_num" != "$padded_expected" ]; then
      echo "‚ö†Ô∏è Num√©ro de section incorrect: $filename (attendu: ${padded_expected}-*)"
      new_filename="${padded_expected}${filename:${#current_num}}"
      echo "üîÑ Renommage: $filename ‚Üí $new_filename"
      
      if [ -f "$CDC_DIR/$new_filename" ]; then
        echo "‚ùå Impossible de renommer: $new_filename existe d√©j√†!"
      else
        mv "$file" "$CDC_DIR/$new_filename"
        echo "- Fichier renomm√©: $filename ‚Üí $new_filename" >> "$CHANGELOG_FILE"
      fi
    fi
    
    EXPECTED_NUM=$((EXPECTED_NUM + 1))
  fi
done

# V√©rification des r√©f√©rences d'image et ressources (nouvelle fonctionnalit√©)
echo "üñºÔ∏è Optimisation des r√©f√©rences aux ressources..."
for md_file in "$CDC_DIR"/*.md; do
  # Recherche et correction des chemins relatifs incorrects
  sed -i 's|\.\./images/|./images/|g' "$md_file"
  
  # Extraction des liens d'images sans texte alternatif et ajout d'un alt
  sed -i 's|!\[\](|![Image](|g' "$md_file"
done

# G√©n√©ration d'un fichier de m√©tadonn√©es (nouvelle fonctionnalit√©)
echo "üìä G√©n√©ration des m√©tadonn√©es du cahier des charges..."
METADATA_FILE="$CDC_DIR/metadata.json"

# Compter les fichiers, sections, etc.
TOTAL_FILES=$(find "$CDC_DIR" -name "*.md" | wc -l)
TOTAL_SECTIONS=$(grep -r "^## " "$CDC_DIR" | wc -l)
TOTAL_SUBSECTIONS=$(grep -r "^### " "$CDC_DIR" | wc -l)
LAST_UPDATED=$(date +"%Y-%m-%d %H:%M:%S")
WORD_COUNT=$(find "$CDC_DIR" -name "*.md" -exec cat {} \; | wc -w)

# G√©n√©rer le JSON
cat > "$METADATA_FILE" << EOL
{
  "title": "Cahier des Charges - Migration IA",
  "lastUpdated": "$LAST_UPDATED",
  "stats": {
    "files": $TOTAL_FILES,
    "sections": $TOTAL_SECTIONS,
    "subsections": $TOTAL_SUBSECTIONS,
    "words": $WORD_COUNT
  },
  "contributors": [
    $(git log --format="%an" | sort | uniq | sed 's/^/    "/;s/$/"/' | tr '\n' ',' | sed 's/,$//')
  ],
  "version": "$(cat version.txt 2>/dev/null || echo "1.0.0")"
}
EOL

echo "‚úÖ M√©tadonn√©es g√©n√©r√©es: $METADATA_FILE"

# V√©rification des technologies obsol√®tes
echo -e "${BLUE}üîç V√©rification des technologies obsol√®tes...${NC}"
if [ -f "scripts/check-tech-obsolescence.js" ]; then
  node scripts/check-tech-obsolescence.js
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ V√©rification des technologies termin√©e${NC}"
  else
    echo -e "${YELLOW}‚ö†Ô∏è Des technologies obsol√®tes ont √©t√© d√©tect√©es${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è Script de v√©rification des technologies non disponible${NC}"
fi

# V√©rification des incoh√©rences
echo -e "${BLUE}üîç V√©rification des incoh√©rences documentation-code...${NC}"
if [ -f "scripts/check-mismatches.js" ]; then
  node scripts/check-mismatches.js
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ V√©rification des incoh√©rences termin√©e${NC}"
  else
    echo -e "${YELLOW}‚ö†Ô∏è Des incoh√©rences ont √©t√© d√©tect√©es${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è Script de v√©rification des incoh√©rences non disponible${NC}"
fi

# V√©rification des alertes de d√©synchronisation
echo -e "${BLUE}üîç V√©rification des alertes de d√©synchronisation...${NC}"
if [ -f "scripts/check-desync-alerts.js" ]; then
  node scripts/check-desync-alerts.js
  ALERTS_STATUS=$?
  
  if [ $ALERTS_STATUS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Aucune alerte critique de d√©synchronisation${NC}"
  else
    echo -e "${YELLOW}‚ö†Ô∏è Des alertes de d√©synchronisation critiques ont √©t√© d√©tect√©es${NC}"
    echo -e "${YELLOW}   Consultez le tableau de bord pour plus de d√©tails${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è Script de v√©rification des alertes non disponible${NC}"
fi

# V√©rification de l'int√©grit√©
echo "üîç Ex√©cution de la v√©rification d'int√©grit√©..."
./verify-integrity.sh

# G√©n√©ration de la documentation HTML
if [ -f "generate_cahier_html.py" ]; then
  echo "üìÑ G√©n√©ration de la documentation HTML..."
  python3 generate_cahier_html.py
fi

# V√©rification de l'int√©grit√© apr√®s toutes les modifications
echo "üîç Ex√©cution de la v√©rification d'int√©grit√© finale..."
./verify-integrity.sh

echo "‚úÖ Mise √† jour du cahier des charges termin√©e."
