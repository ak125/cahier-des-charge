import { readFileSync, existsSync, readdirSync } from 'fs';
import { join, resolve, basename } from 'path';
import chalk from 'chalk';
import * as glob from 'glob';
import { ConsistencyVerifier } from './verifiers/consistency-verifier';
import { StructureVerifier } from './verifiers/structure-verifier';
import { SyntaxVerifier } from './verifiers/syntax-verifier';
import { LogicVerifier } from './verifiers/logic-verifier';
import { generateVerificationReport } from '../utils/report-generator';
import * as fs from 'fs/promises';
import * as path from 'path';

interface Config {
  paths: {
    cahier: string;
    scripts: string;
    logs: string;
    htmlOutput: string;
  };
  rules: {
    maxDuplicateThreshold: number;
    minStructureScore: number;
    allowInlineJS: boolean;
    requireAuditMd: boolean;
  };
  github: {
    owner: string;
    repo: string;
    branch: string;
    autoPR: boolean;
  };
}

interface VerificationResult {
  fileType: string;
  file: string;
  status: 'success' | 'warning' | 'error';
  message: string;
  details?: string[];
}

async function verifyCahier(): Promise<void> {
  console.log(chalk.blue('üîç D√©marrage de la v√©rification du cahier des charges...'));
  
  // Charger la configuration
  const configPath = resolve('./cahier_check.config.json');
  if (!existsSync(configPath)) {
    console.error(chalk.red('‚ùå Fichier de configuration non trouv√©: cahier_check.config.json'));
    process.exit(1);
  }
  
  const config: Config = JSON.parse(readFileSync(configPath, 'utf-8'));
  const cahierPath = resolve(config.paths.cahier);
  
  // V√©rifier si le r√©pertoire du cahier existe
  if (!existsSync(cahierPath)) {
    console.error(chalk.red(`‚ùå R√©pertoire du cahier des charges non trouv√©: ${cahierPath}`));
    process.exit(1);
  }
  
  console.log(chalk.green(`‚úÖ Configuration charg√©e, v√©rification du r√©pertoire: ${cahierPath}`));
  
  // Collecter tous les fichiers √† analyser
  const mdFiles = glob.sync(join(cahierPath, '**/*.md'));
  const jsonFiles = glob.sync(join(cahierPath, '**/*.json'));
  const tsFiles = glob.sync(join(cahierPath, '**/*.ts'));
  
  console.log(chalk.blue(`üìÅ Fichiers trouv√©s: ${mdFiles.length} MD, ${jsonFiles.length} JSON, ${tsFiles.length} TS`));
  
  // Initialiser les v√©rificateurs
  const consistencyVerifier = new ConsistencyVerifier(config);
  const structureVerifier = new StructureVerifier(config);
  const syntaxVerifier = new SyntaxVerifier(config);
  const logicVerifier = new LogicVerifier(config);
  
  // V√©rifier la coh√©rence globale
  console.log(chalk.blue('üß© V√©rification de la coh√©rence globale...'));
  const consistencyResults = await consistencyVerifier.verify(mdFiles, jsonFiles, tsFiles);
  
  // V√©rifier la structure
  console.log(chalk.blue('üèóÔ∏è V√©rification de la structure...'));
  const structureResults = await structureVerifier.verify(mdFiles, jsonFiles, tsFiles);
  
  // V√©rifier la syntaxe
  console.log(chalk.blue('üìù V√©rification de la syntaxe...'));
  const syntaxResults = await syntaxVerifier.verify(mdFiles, jsonFiles, tsFiles);
  
  // V√©rifier la logique m√©tier
  console.log(chalk.blue('üß† V√©rification de la logique m√©tier...'));
  const logicResults = await logicVerifier.verify(mdFiles, jsonFiles, tsFiles);
  
  // V√©rifier la structure des fichiers .audit.md
  const auditResults = checkAuditStructure(mdFiles);

  // Agr√©ger les r√©sultats
  const allResults: VerificationResult[] = [
    ...consistencyResults,
    ...structureResults,
    ...syntaxResults,
    ...logicResults,
    ...auditResults
  ];
  
  // G√©n√©ration du rapport
  console.log(chalk.blue('üìä G√©n√©ration du rapport de v√©rification...'));
  const reportPath = await generateVerificationReport(allResults, config);
  
  // Afficher le r√©sum√©
  const successCount = allResults.filter(r => r.status === 'success').length;
  const warningCount = allResults.filter(r => r.status === 'warning').length;
  const errorCount = allResults.filter(r => r.status === 'error').length;
  
  console.log(chalk.green(`\n‚úÖ V√©rification termin√©e!`));
  console.log(chalk.white(`üìä R√©sum√©: ${allResults.length} v√©rifications effectu√©es`));
  console.log(chalk.green(`‚úì ${successCount} succ√®s`));
  console.log(chalk.yellow(`‚ö† ${warningCount} avertissements`));
  console.log(chalk.red(`‚úó ${errorCount} erreurs`));
  console.log(chalk.blue(`üìÑ Rapport complet disponible: ${reportPath}`));
  
  // Sortir avec un code d'erreur si n√©cessaire
  if (errorCount > 0) {
    process.exit(1);
  }
}

function checkAuditStructure(mdFiles: string[]): VerificationResult[] {
  const results: VerificationResult[] = [];
  const auditFiles = mdFiles.filter(file => path.basename(file).includes('.audit.md'));
  
  if (auditFiles.length === 0) {
    console.log('Aucun fichier .audit.md trouv√©. V√©rification ignor√©e.');
    return results;
  }
  
  for (const auditFile of auditFiles) {
    try {
      const content = readFileSync(auditFile, 'utf-8');
      
      // V√©rifier la pr√©sence des sections obligatoires
      const requiredSections = [
        /#+\s+.*[Rr]√¥le.*m√©tier/,
        /#+\s+.*[Ss]tructure/,
        /#+\s+.*[Zz]one.*fonctionnelle/,
        /#+\s+.*[Cc]omplexit√©/,
        /#+\s+.*[Mm]igration/
      ];
      
      const missingSections = requiredSections.filter(regex => !regex.test(content));
      
      if (missingSections.length > 0) {
        results.push({
          fileType: 'md',
          file: auditFile,
          status: 'warning',
          message: 'Sections obligatoires manquantes',
          details: missingSections.map(regex => regex.toString())
        });
      } else {
        results.push({
          fileType: 'md',
          file: auditFile,
          status: 'success',
          message: 'Toutes les sections obligatoires sont pr√©sentes'
        });
      }
    } catch (error) {
      console.error(`Erreur lors de la lecture de ${auditFile}: ${error.message}`);
      results.push({
        fileType: 'md',
        file: auditFile,
        status: 'error',
        message: `Impossible de lire le fichier: ${error.message}`
      });
    }
  }
  
  return results;
}

export default verifyCahier;

// Ex√©cuter si appel√© directement
if (require.main === module) {
  verifyCahier().catch(error => {
    console.error(`Erreur lors de la v√©rification: ${error.message}`);
    process.exit(1);
  });
}
