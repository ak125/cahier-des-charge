version: '3.8'

services:
  # Services d'application
  api:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/migrationdb
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages
      - ./node_modules:/app/node_modules
    networks:
      - app-network
      - monitoring-network

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - api
    environment:
      - API_URL=http://api:3000
      - NODE_ENV=development
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - ./packages:/app/packages
      - ./node_modules:/app/node_modules
    networks:
      - app-network

  # Service d'orchestration MCP
  mcp-orchestrator:
    build:
      context: .
      dockerfile: apps/mcp-server/Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
      - bullboard
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/migrationdb
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NODE_ENV=development
    volumes:
      - ./agents:/app/agents
      - ./packages:/app/packages
      - ./manifests:/app/manifests
      - ./tmp:/tmp
      - ./node_modules:/app/node_modules
    networks:
      - app-network
      - monitoring-network

  # Services de base de donn√©es et cache
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=migrationdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d migrationdb" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Services de file d'attente et orchestration
  bullboard:
    build:
      context: .
      dockerfile: apps/bull-board/Dockerfile
    ports:
      - "3003:3003"
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379
    networks:
      - app-network
      - monitoring-network

  temporal:
    image: temporalio/auto-setup:1.18
    ports:
      - "7233:7233"
    environment:
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    volumes:
      - ./config/temporal:/etc/temporal/config/dynamicconfig
    networks:
      - app-network
      - monitoring-network

  # Services de monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:10.2.3
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=mcppassword
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring-network
    depends_on:
      - prometheus

  alertmanager:
    image: prom/alertmanager:v0.27.0
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - monitoring-network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # UI
      - "14250:14250" # tRPC
      - "14268:14268" # HTTP
      - "6831:6831/udp" # Thrift over UDP
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring-network

  # Service OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "55679:55679" # zpages
      - "8888:8888" # metrics
    networks:
      - monitoring-network

  # Service n8n pour l'automatisation et supervision
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_PROTOCOL=http
      - N8N_PORT=5678
      - N8N_HOST=n8n
      - NODE_ENV=production
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-changeme}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=user
      - DB_POSTGRESDB_PASSWORD=password
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network
    depends_on:
      - postgres

  # Dashboard pour le projet
  project-dashboard:
    build:
      context: .
      dockerfile: apps/dashboard/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - API_URL=http://api:3000
      - MCP_URL=http://mcp-orchestrator:3002
    networks:
      - app-network
      - monitoring-network
    depends_on:
      - api
      - mcp-orchestrator

  # Service pour test de redirections
  redirect-tester:
    build:
      context: .
      dockerfile: apps/redirect-tester/Dockerfile
    volumes:
      - ./legacy-urls.txt:/app/legacy-urls.txt
      - ./legacy-url-analysis.json:/app/output/legacy-url-analysis.json
    environment:
      - BASE_URL=http://frontend:3001
      - OUTPUT_FILE=/app/output/legacy-url-analysis.json
    networks:
      - app-network
    depends_on:
      - frontend

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  n8n_data:
