#!/usr/bin/env node

/**
 * Script pour consolider les fichiers d'agents dupliqu√©s
 * 
 * Ce script identifie et consolide les agents qui existent avec plusieurs suffixes hexad√©cimaux
 * et garde une seule version de chaque agent.
 * 
 * Usage: 
 *   node consolidate-agent-files.js [--dry-run] [--verbose]
 * 
 * Options:
 *   --dry-run  Ex√©cuter sans effectuer de modifications
 *   --verbose  Afficher des informations d√©taill√©es pendant l'ex√©cution
 */

const fs = require('fs');
const path = require('path');

// Configuration
const AGENTS_DIR_PATH = path.resolve(__dirname, '../packages/business/business/agents/agent');
const REPORT_PATH = path.resolve(__dirname, '../cleanup-report/agent-files-consolidation-report.md');

// Options
const options = {
    dryRun: process.argv.includes('--dry-run'),
    verbose: process.argv.includes('--verbose')
};

// Fonction pour extraire le nom de base de l'agent (sans les suffixes hexad√©cimaux)
function getBaseAgentName(filename) {
    // Correspond aux motifs comme "agent-name-xxxxx-yyyyy.ts" ou "agent-name-xxxxx.ts"
    const match = filename.match(/^([\w-]+?)(?:-[0-9a-f]{8}(?:-[0-9a-f]{8})?)?\.ts$/);
    return match ? match[1] : filename.replace(/\.ts$/, '');
}

// Fonction pour d√©terminer si un fichier est un fichier d'agent "canonique" (sans suffixes)
function isCanonicalAgentFile(filename) {
    return !filename.match(/-[0-9a-f]{8}(?:-[0-9a-f]{8})?\.ts$/);
}

// Fonction pour compter les lignes de code dans un fichier
function countLines(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf-8');
        return content.split('\n').length;
    } catch (error) {
        console.error(`Erreur lors de la lecture du fichier ${filePath}:`, error);
        return 0;
    }
}

// Fonction pour identifier le fichier principal √† garder parmi les variantes
function selectMainFile(files) {
    // V√©rifier s'il y a un fichier avec le nom canonique (sans suffixe hexad√©cimal)
    const canonicalFile = files.find(file => isCanonicalAgentFile(file));
    if (canonicalFile) {
        return canonicalFile;
    }

    // Sinon, choisir le fichier le plus volumineux (plus de lignes = probablement plus complet)
    let mainFile = files[0];
    let maxLines = countLines(path.join(AGENTS_DIR_PATH, mainFile));

    for (let i = 1; i < files.length; i++) {
        const filePath = path.join(AGENTS_DIR_PATH, files[i]);
        const lines = countLines(filePath);
        if (lines > maxLines) {
            maxLines = lines;
            mainFile = files[i];
        }
    }

    return mainFile;
}

// Fonction pour cr√©er un fichier de rapport
function generateReport(results) {
    const reportContent = `# Rapport de Consolidation des Fichiers d'Agents
Date: ${new Date().toLocaleDateString('fr-FR')}
Mode: ${options.dryRun ? 'Simulation (dry-run)' : 'Ex√©cution r√©elle'}

## R√©sum√©
- Total des groupes d'agents consolid√©s: ${Object.keys(results).length}
- Nombre total de fichiers doublons supprim√©s: ${Object.values(results).reduce((acc, group) => acc + group.deleted.length, 0)}
- Nombre total de fichiers conserv√©s: ${Object.values(results).length}

## D√©tails de la consolidation

${Object.entries(results).map(([baseAgentName, { kept, deleted }]) => {
        return `### ${baseAgentName}
- Fichier conserv√©: \`${kept}\`
- Fichiers supprim√©s (${deleted.length}): ${deleted.map(file => `\`${file}\``).join(', ')}`;
    }).join('\n\n')}

## Recommandations

1. Mettre √† jour les imports qui pourraient r√©f√©rencer les fichiers supprim√©s
2. Mettre en place des conventions de nommage pour √©viter de futures duplications
3. Envisager l'utilisation d'un registre centralis√© d'agents au lieu de fichiers multiples

## Statut

${options.dryRun ? 'Ce rapport est g√©n√©r√© en mode simulation. Aucune modification n\'a √©t√© effectu√©e.' : 'La consolidation a √©t√© effectu√©e avec succ√®s. Les fichiers doublons ont √©t√© supprim√©s.'}
`;

    if (!options.dryRun) {
        const reportDir = path.dirname(REPORT_PATH);
        if (!fs.existsSync(reportDir)) {
            fs.mkdirSync(reportDir, { recursive: true });
        }
        fs.writeFileSync(REPORT_PATH, reportContent, 'utf-8');
        console.log(`üìÑ Rapport g√©n√©r√©: ${REPORT_PATH}`);
    }

    return reportContent;
}

// Fonction pour cr√©er un fichier d'index qui exporte tous les agents principaux
function createIndexFile(agentGroups) {
    const indexContent = `/**
 * Index des agents consolid√©s
 * Ce fichier est g√©n√©r√© automatiquement par le script de consolidation des agents
 * Date: ${new Date().toISOString()}
 */

${Object.entries(agentGroups).map(([baseName, { kept }]) => {
        const importName = baseName.replace(/-/g, '');
        return `import * as ${importName} from './${kept.replace(/\.ts$/, '')}';`;
    }).join('\n')}

export {
${Object.entries(agentGroups).map(([baseName]) => {
        const importName = baseName.replace(/-/g, '');
        return `  ${importName},`;
    }).join('\n')}
};

// Exportation par d√©faut de tous les agents
export default {
${Object.entries(agentGroups).map(([baseName]) => {
        const importName = baseName.replace(/-/g, '');
        return `  ${importName},`;
    }).join('\n')}
};
`;

    const indexPath = path.join(AGENTS_DIR_PATH, 'index.ts');

    if (!options.dryRun) {
        fs.writeFileSync(indexPath, indexContent, 'utf-8');
        console.log(`‚úÖ Fichier d'index cr√©√©: ${indexPath}`);
    }

    return indexPath;
}

// Fonction principale
async function main() {
    console.log('üîç Identification des fichiers d\'agents dupliqu√©s...');

    try {
        // Lister tous les fichiers dans le r√©pertoire des agents
        const agentFiles = fs.readdirSync(AGENTS_DIR_PATH)
            .filter(file => file.endsWith('.ts'));

        // Regrouper les fichiers par nom de base d'agent
        const agentGroups = {};
        agentFiles.forEach(file => {
            const baseAgentName = getBaseAgentName(file);
            if (!agentGroups[baseAgentName]) {
                agentGroups[baseAgentName] = [];
            }
            agentGroups[baseAgentName].push(file);
        });

        // Filtrer pour ne garder que les groupes avec plus d'un fichier (doublons)
        const duplicateGroups = Object.entries(agentGroups)
            .filter(([_, files]) => files.length > 1)
            .reduce((acc, [name, files]) => {
                acc[name] = files;
                return acc;
            }, {});

        console.log(`üìã ${Object.keys(duplicateGroups).length} groupes d'agents avec doublons identifi√©s.`);

        if (options.verbose) {
            Object.entries(duplicateGroups).forEach(([name, files]) => {
                console.log(`  - ${name} (${files.length} fichiers): ${files.join(', ')}`);
            });
        }

        // Consolider chaque groupe d'agents
        const results = {};

        console.log(`\n${options.dryRun ? 'üõ†Ô∏è Simulation de la consolidation...' : 'üõ†Ô∏è D√©marrage de la consolidation...'}`);

        for (const [baseAgentName, files] of Object.entries(duplicateGroups)) {
            const mainFile = selectMainFile(files);
            const filesToDelete = files.filter(file => file !== mainFile);

            console.log(`Consolidation de ${baseAgentName}`);
            console.log(`  - Fichier conserv√©: ${mainFile}`);
            console.log(`  - Fichiers √† supprimer: ${filesToDelete.length}`);

            if (options.verbose) {
                filesToDelete.forEach(file => {
                    console.log(`    - ${file}`);
                });
            }

            // Supprimer les fichiers doublons
            if (!options.dryRun) {
                filesToDelete.forEach(file => {
                    const filePath = path.join(AGENTS_DIR_PATH, file);
                    fs.unlinkSync(filePath);
                });
            }

            results[baseAgentName] = {
                kept: mainFile,
                deleted: filesToDelete
            };
        }

        // Cr√©er un fichier d'index qui exporte tous les agents principaux
        createIndexFile(results);

        // G√©n√©rer le rapport
        generateReport(results);

        console.log(`\n‚úÖ Processus termin√© avec succ√®s. ${options.dryRun ? 'Aucune modification effectu√©e (mode dry-run).' : ''}`);

        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors de la consolidation des fichiers d\'agents:', error);
        return false;
    }
}

// Ex√©cution du script
main().catch(error => {
    console.error('‚ùå Erreur lors de l\'ex√©cution du script:', error);
    process.exit(1);
});