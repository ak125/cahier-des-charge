#!/bin/bash
# Script CI/CD pour les agents MCP
# √Ä utiliser dans les pipelines d'int√©gration continue
# Date: 19 avril 2025

echo "üöÄ Pipeline CI/CD pour les agents MCP"
echo "===================================="

# Variables
WORKSPACE_ROOT="/workspaces/cahier-des-charge"
REPORT_DIR="${WORKSPACE_ROOT}/reports/ci-agents-$(date +%Y%m%d-%H%M%S)"

# Cr√©ation du r√©pertoire de rapport
mkdir -p "$REPORT_DIR"
CI_LOG="${REPORT_DIR}/ci.log"

# Fonction de journalisation
log() {
  local message="$1"
  echo "$message"
  echo "$(date +"%Y-%m-%d %H:%M:%S") - $message" >> "$CI_LOG"
}

# √âtape 1: V√©rifier la pr√©sence des scripts essentiels
log "üîç V√©rification des scripts essentiels..."

# Liste adapt√©e des scripts disponibles dans notre environnement
REQUIRED_SCRIPTS=(
  "${WORKSPACE_ROOT}/clean-agents-duplicates.sh"
  "${WORKSPACE_ROOT}/sync-mcp-agents.sh"
  "${WORKSPACE_ROOT}/integrate-orphan-agents.sh"
)

MISSING_SCRIPTS=0
for script in "${REQUIRED_SCRIPTS[@]}"; do
  if [ ! -f "$script" ]; then
    log "‚ùå Script non trouv√©: $script"
    MISSING_SCRIPTS=$((MISSING_SCRIPTS + 1))
  elif [ ! -x "$script" ]; then
    log "‚ö†Ô∏è  Script non ex√©cutable, ajout des permissions: $script"
    chmod +x "$script"
  else
    log "‚úì Script disponible: $(basename "$script")"
  fi
done

if [ $MISSING_SCRIPTS -gt 0 ]; then
  log "‚ùå $MISSING_SCRIPTS scripts requis sont manquants"
  exit 1
fi

log "‚úÖ Tous les scripts essentiels sont disponibles"

# √âtape 2: Synchroniser les doublons d'agents si le script existe
log "üîÑ Synchronisation des agents..."
if [ -x "${WORKSPACE_ROOT}/sync-mcp-agents.sh" ]; then
  "${WORKSPACE_ROOT}/sync-mcp-agents.sh" > "${REPORT_DIR}/sync.log" 2>&1
  SYNC_STATUS=$?

  if [ $SYNC_STATUS -ne 0 ]; then
    log "‚ö†Ô∏è Avertissement: La synchronisation a rencontr√© des probl√®mes, voir ${REPORT_DIR}/sync.log"
  else
    log "‚úÖ Synchronisation r√©ussie"
  fi
else
  log "‚ö†Ô∏è Script de synchronisation non ex√©cutable, √©tape ignor√©e"
fi

# √âtape 3: Cr√©er un tsconfig temporaire sp√©cifique pour les tests
log "üìù Cr√©ation d'une configuration TypeScript temporaire..."

TEMP_TSCONFIG="${REPORT_DIR}/tsconfig.test.json"
cat > "$TEMP_TSCONFIG" << EOL
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "${REPORT_DIR}/dist",
    "resolveJsonModule": true
  },
  "include": [
    "${REPORT_DIR}/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
EOL

log "‚úÖ Configuration TypeScript temporaire cr√©√©e: $TEMP_TSCONFIG"

# √âtape 4: Utiliser notre script de test JavaScript simple qui fonctionne d√©j√†
log "üß™ Test de l'agent htaccess-router-analyzer..."

# Cr√©er une copie du script de test JavaScript dans le r√©pertoire de rapport
AGENT_TEST_SCRIPT="${REPORT_DIR}/test-agent.js"

cat > "$AGENT_TEST_SCRIPT" << EOL
/**
 * Test pour l'agent HtaccessRouterAnalyzer
 * Ce script teste si l'agent est correctement impl√©ment√© et fonctionnel
 */

const path = require('path');
const fs = require('fs');

// Chemins absolus pour √©viter les erreurs de chemin relatif
const basePath = '${WORKSPACE_ROOT}';
const possiblePaths = [
  'packages/mcp-agents/business/analyzers/htaccess-router-analyzer/index.ts',
  'packages/mcp-agents/business/analyzers/htaccess-router-analyzer/htaccess-router-analyzer.ts',
  'packages/mcp-agents/business/analyzers/htaccess-router-analyzer.ts',
  'packages/mcp-agents/analyzers/htaccess-router-analyzer/index.ts'
];

console.log('V√©rification des chemins possibles pour l\\'agent:');

let agentPath = '';
for (const relativePath of possiblePaths) {
  const fullPath = path.join(basePath, relativePath);
  const exists = fs.existsSync(fullPath);
  console.log(\`- \${relativePath}: \${exists ? 'Existe ‚úì' : 'N\\'existe pas ‚úó'}\`);
  
  if (exists && !agentPath) {
    agentPath = fullPath;
  }
}

if (!agentPath) {
  console.error('‚ùå Aucun fichier d\\'agent trouv√©');
  process.exit(1);
}

console.log(\`‚úÖ Agent trouv√© √†: \${agentPath}\`);

// Examiner le contenu du fichier agent pour v√©rifier qu'il respecte l'interface
if (agentPath && fs.existsSync(agentPath)) {
  console.log('\\nAnalyse du fichier agent:');
  const content = fs.readFileSync(agentPath, 'utf8');
  
  // V√©rifier si le fichier contient certaines signatures importantes
  const hasExport = content.includes('export ');
  const hasClass = content.includes('class ');
  const hasMetadata = content.includes('metadata');
  const hasEvents = content.includes('events');
  const hasInitialize = content.includes('initialize');
  const hasExecute = content.includes('execute');
  const hasValidate = content.includes('validate');
  const hasStop = content.includes('stop');
  
  console.log(\`- Export pr√©sent: \${hasExport ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  console.log(\`- Classe pr√©sente: \${hasClass ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  console.log(\`- Metadata pr√©sent: \${hasMetadata ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  console.log(\`- Events pr√©sent: \${hasEvents ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  console.log(\`- M√©thode initialize: \${hasInitialize ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  console.log(\`- M√©thode execute: \${hasExecute ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  console.log(\`- M√©thode validate: \${hasValidate ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  console.log(\`- M√©thode stop: \${hasStop ? 'Oui ‚úì' : 'Non ‚úó'}\`);
  
  // V√©rifier si le fichier semble impl√©menter l'interface McpAgent
  const seemsValid = hasExport && hasClass && hasMetadata && hasEvents && 
                    hasInitialize && hasExecute;
  
  if (seemsValid) {
    console.log('\\n‚úÖ Le fichier semble contenir un agent valide impl√©mentant l\\'interface McpAgent');
    process.exit(0);
  } else {
    console.log('\\n‚ùå Le fichier ne semble pas impl√©menter correctement l\\'interface McpAgent');
    process.exit(1);
  }
} else {
  console.error('‚ùå Impossible de lire le fichier agent');
  process.exit(1);
}
EOL

# Ex√©cuter le test JavaScript (qui ne d√©pend pas de TypeScript)
log "Ex√©cution du test JavaScript pour l'agent htaccess-router-analyzer..."
node "$AGENT_TEST_SCRIPT" > "${REPORT_DIR}/htaccess-test.log" 2>&1
TEST_STATUS=$?

if [ $TEST_STATUS -ne 0 ]; then
  log "‚ùå √âchec du test htaccess-router-analyzer, voir ${REPORT_DIR}/htaccess-test.log"
  # Afficher les premi√®res lignes du log pour diagnostiquer
  cat "${REPORT_DIR}/htaccess-test.log" >> "$CI_LOG" 
else
  log "‚úÖ Test htaccess-router-analyzer r√©ussi"
fi

# √âtape 5: V√©rifier la compilation TypeScript avec skipLibCheck
log "üî® V√©rification de la compilation TypeScript..."

# Cr√©er un fichier tsconfig temporaire sp√©cifique pour CI
TEMP_TSCONFIG_COMPILE="${REPORT_DIR}/tsconfig.ci.json"

cat > "$TEMP_TSCONFIG_COMPILE" << EOL
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "${REPORT_DIR}/dist",
    "resolveJsonModule": true
  },
  "include": [
    "${WORKSPACE_ROOT}/packages/mcp-agents/business/analyzers/htaccess-router-analyzer/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
EOL

# V√©rifier si des fichiers correspondants existent pour le pattern d'inclusion
MATCHING_FILES=$(find "${WORKSPACE_ROOT}/packages/mcp-agents/business/analyzers/htaccess-router-analyzer" -name "*.ts" 2>/dev/null)

if [ -z "$MATCHING_FILES" ]; then
  log "‚ö†Ô∏è Aucun fichier TypeScript trouv√© pour la compilation dans le chemin sp√©cifi√©"
  echo "Recherche d'un autre emplacement pour l'agent..."
  
  # Rechercher l'agent dans d'autres emplacements possibles
  AGENT_PATH=$(find "${WORKSPACE_ROOT}/packages/mcp-agents" -name "htaccess-router-analyzer.ts" -o -name "index.ts" | grep -i "htaccess" | head -1)
  
  if [ -n "$AGENT_PATH" ]; then
    # Mettre √† jour la configuration pour inclure le fichier trouv√©
    AGENT_DIR=$(dirname "$AGENT_PATH")
    log "Agent trouv√© √†: $AGENT_PATH"
    
    # Cr√©er une nouvelle configuration avec le chemin correct
    cat > "$TEMP_TSCONFIG_COMPILE" << EOL
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "CommonJS",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "${REPORT_DIR}/dist",
    "resolveJsonModule": true
  },
  "include": [
    "${AGENT_PATH}"
  ],
  "exclude": [
    "node_modules"
  ]
}
EOL
  else
    log "‚ùå Impossible de trouver l'agent htaccess-router-analyzer"
    TSC_STATUS=1
  fi
fi

if [ -z "$TSC_STATUS" ]; then
  # V√©rifions le fichier trouv√©
  npx tsc -p "$TEMP_TSCONFIG_COMPILE" --noEmit > "${REPORT_DIR}/tsc.log" 2>&1
  TSC_STATUS=$?
fi

if [ $TSC_STATUS -ne 0 ]; then
  log "‚ùå √âchec de la compilation TypeScript, voir ${REPORT_DIR}/tsc.log"
  # Extrait des erreurs pour le log
  grep "error TS" "${REPORT_DIR}/tsc.log" | head -10 >> "$CI_LOG"
else
  log "‚úÖ Compilation TypeScript r√©ussie pour htaccess-router-analyzer"
fi

# √âtape 6: V√©rifier la structure du projet
log "üìä V√©rification de la structure du projet..."

# Compter le nombre d'agents dans les diff√©rentes cat√©gories
ANALYZERS_COUNT=$(find "$WORKSPACE_ROOT/packages/mcp-agents/business/analyzers" -type f -name "*.ts" 2>/dev/null | wc -l)
GENERATORS_COUNT=$(find "$WORKSPACE_ROOT/packages/mcp-agents/business/generators" -type f -name "*.ts" 2>/dev/null | wc -l)
VALIDATORS_COUNT=$(find "$WORKSPACE_ROOT/packages/mcp-agents/business/validators" -type f -name "*.ts" 2>/dev/null | wc -l)
MISC_COUNT=$(find "$WORKSPACE_ROOT/packages/mcp-agents/business/misc" -type f -name "*.ts" 2>/dev/null | wc -l)

log "Structure des agents:"
log "- Analyzers: $ANALYZERS_COUNT"
log "- Generators: $GENERATORS_COUNT" 
log "- Validators: $VALIDATORS_COUNT"
log "- Misc: $MISC_COUNT"

# √âtape 7: G√©n√©rer un rapport de r√©ussite ou d'√©chec
if [ $TEST_STATUS -ne 0 ] || [ $TSC_STATUS -ne 0 ]; then
  log "‚ùå Le pipeline CI a rencontr√© des probl√®mes. Veuillez consulter les logs pour plus de d√©tails."
  
  # G√©n√©rer un rapport d'√©chec
  FAILURE_REPORT="${REPORT_DIR}/failure-report.md"
  
  cat > "$FAILURE_REPORT" << EOL
# Rapport CI/CD des agents MCP - Probl√®mes d√©tect√©s
Date: $(date +'%Y-%m-%d %H:%M:%S')

## R√©sum√©
- Test htaccess-router-analyzer: $([ $TEST_STATUS -eq 0 ] && echo "‚úÖ R√©ussi" || echo "‚ùå √âchou√©")
- Compilation TypeScript: $([ $TSC_STATUS -eq 0 ] && echo "‚úÖ R√©ussie" || echo "‚ùå √âchou√©e")

## Structure du projet
- Analyzers: $ANALYZERS_COUNT
- Generators: $GENERATORS_COUNT
- Validators: $VALIDATORS_COUNT
- Misc: $MISC_COUNT

## Actions recommand√©es
1. Consultez les logs d√©taill√©s dans \`${REPORT_DIR}\`
2. Corrigez les probl√®mes signal√©s
3. Relancez les tests avec \`${WORKSPACE_ROOT}/ci/mcp-agents-ci.sh\`
EOL
  
  log "üìù Rapport d'√©chec cr√©√©: $FAILURE_REPORT"
  exit 1
else
  log "‚úÖ Tous les contr√¥les ont pass√© avec succ√®s!"
  
  # G√©n√©rer un rapport de r√©ussite
  SUCCESS_REPORT="${REPORT_DIR}/success-report.md"
  
  cat > "$SUCCESS_REPORT" << EOL
# Rapport CI/CD r√©ussi pour les agents MCP
Date: $(date +'%Y-%m-%d %H:%M:%S')

## Tests effectu√©s
- ‚úÖ V√©rification des scripts essentiels
- ‚úÖ Synchronisation des agents dupliqu√©s
- ‚úÖ Test de l'agent htaccess-router-analyzer
- ‚úÖ Compilation TypeScript

## Structure du projet
- Analyzers: $ANALYZERS_COUNT
- Generators: $GENERATORS_COUNT
- Validators: $VALIDATORS_COUNT
- Misc: $MISC_COUNT

## Prochaines √©tapes
1. V√©rifiez les rapports d√©taill√©s dans \`${REPORT_DIR}\`
2. Ex√©cutez \`./update-agent-imports.sh\` pour mettre √† jour les imports
3. Mettez √† jour la documentation si n√©cessaire
EOL
  
  log "üìù Rapport de r√©ussite cr√©√©: $SUCCESS_REPORT"
  exit 0
fi