#!/bin/bash

# Script de diagnostic rapide pour l'architecture en 3 couches
# Ce script v√©rifie l'√©tat actuel de l'architecture et diagnostique
# les probl√®mes potentiels dans le pipeline CI/CD.

echo "üîç Diagnostic de l'architecture en 3 couches"
echo "============================================"

# V√©rifier les structures de r√©pertoires
echo -e "\nüìÇ V√©rification des structures de r√©pertoires:"
for dir in "packages/business" "packages/coordination" "packages/orchestration"; do
  if [ -d "$dir" ]; then
    echo "‚úÖ $dir existe"
    
    # Compte des fichiers par couche
    file_count=$(find $dir -type f -name "*.ts" | wc -l)
    echo "   üìä $file_count fichiers TypeScript"
    
  else
    echo "‚ùå $dir n'existe pas"
  fi
done

# V√©rifier l'√©tat des workflows GitHub Actions
echo -e "\nüîÑ V√©rification des workflows GitHub Actions:"

workflows_ok=0
workflows_warning=0
workflows_error=0

for workflow in $(ls .github/workflows/*.yml); do
  if grep -q "packages/business" "$workflow" || grep -q "packages/coordination" "$workflow" || grep -q "packages/orchestration" "$workflow"; then
    # Le workflow contient des r√©f√©rences aux nouvelles couches
    if grep -q "packages/agents" "$workflow" || grep -q "packages/mcp-agents" "$workflow"; then
      # Mais contient aussi des r√©f√©rences aux anciens packages
      echo "‚ö†Ô∏è $workflow - Contient des r√©f√©rences mixtes (transition)"
      workflows_warning=$((workflows_warning + 1))
    else
      echo "‚úÖ $workflow - √Ä jour avec la nouvelle structure"
      workflows_ok=$((workflows_ok + 1))
    fi
  elif grep -q "agents/" "$workflow" || grep -q "packages/agents" "$workflow" || grep -q "packages/mcp-agents" "$workflow"; then
    # Le workflow ne contient que des r√©f√©rences aux anciens packages
    echo "‚ùå $workflow - Contient uniquement d'anciennes r√©f√©rences"
    workflows_error=$((workflows_error + 1))
  else
    echo "‚ÑπÔ∏è $workflow - Non pertinent pour l'architecture"
  fi
done

echo -e "\nüìä R√©sum√© des workflows:"
echo "   ‚úÖ √Ä jour: $workflows_ok"
echo "   ‚ö†Ô∏è En transition: $workflows_warning"
echo "   ‚ùå √Ä mettre √† jour: $workflows_error"

# V√©rifier le script de g√©n√©ration de matrice de tests
echo -e "\nüß™ V√©rification du script de g√©n√©ration de matrice de tests:"
if [ -f "tools/ci/generate-test-matrix.js" ]; then
  if grep -q "packages/business" "tools/ci/generate-test-matrix.js" || grep -q "packages/coordination" "tools/ci/generate-test-matrix.js" || grep -q "packages/orchestration" "tools/ci/generate-test-matrix.js"; then
    echo "‚úÖ Le script de g√©n√©ration de matrice de tests est √† jour"
  else
    echo "‚ö†Ô∏è Le script de g√©n√©ration de matrice de tests ne contient pas de r√©f√©rences √† la nouvelle architecture"
  fi
else
  echo "‚ùå Le script de g√©n√©ration de matrice de tests n'existe pas √† l'emplacement attendu"
fi

# V√©rifier la configuration Earthfile
echo -e "\nüîß V√©rification de la configuration Earthfile:"
if [ -f "Earthfile" ]; then
  if grep -q "validate-3layer" "Earthfile"; then
    echo "‚úÖ Earthfile contient la validation de la structure en 3 couches"
  else
    echo "‚ùå Earthfile ne contient pas de validation de la structure en 3 couches"
  fi
  
  if grep -q "validate-architecture" "Earthfile"; then
    echo "‚úÖ Earthfile contient la validation compl√®te de l'architecture"
  else
    echo "‚ùå Earthfile ne contient pas de validation compl√®te de l'architecture"
  fi
else
  echo "‚ùå Fichier Earthfile introuvable"
fi

# Recommandations
echo -e "\nüìã Recommandations:"
if [ $workflows_error -gt 0 ]; then
  echo "‚ö†Ô∏è Il reste $workflows_error workflow(s) √† mettre √† jour pour la nouvelle structure"
  echo "   Ex√©cutez: node tools/ci/deep-check-workflows.js pour identifier les workflows sp√©cifiques"
fi

if [ ! -f "tools/ci/validate-architecture.js" ]; then
  echo "‚ö†Ô∏è Il est recommand√© de cr√©er un script validate-architecture.js pour valider l'architecture compl√®te"
fi

echo -e "\n‚ú® Diagnostic termin√©! ‚ú®"
