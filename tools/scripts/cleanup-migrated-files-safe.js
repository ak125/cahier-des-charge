#!/usr/bin/env node

/**
 * Script de nettoyage des anciens fichiers migr√©s
 * 
 * Ce script identifie les fichiers migr√©s qui pourraient √™tre supprim√©s 
 * en toute s√©curit√© apr√®s la consolidation vers l'architecture √† trois couches.
 * Il proc√®de avec prudence et ne supprime aucun fichier sans confirmation explicite.
 * 
 * Usage:
 *   node cleanup-migrated-files.js [--list-only] [--dry-run] [--interactive] [--batch=<size>]
 * 
 * Options:
 *   --list-only    Liste uniquement les fichiers candidats sans les supprimer
 *   --dry-run      Simule la suppression sans l'effectuer r√©ellement
 *   --interactive  Demande confirmation pour chaque fichier
 *   --batch=<size> Nombre de fichiers √† traiter par lot (d√©faut: 10)
 */

import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '../../');

// Analyse des arguments de la ligne de commande
const args = process.argv.slice(2);
const listOnly = args.includes('--list-only');
const dryRun = args.includes('--dry-run') || listOnly;
const interactive = args.includes('--interactive');
let batchSize = 10;

for (const arg of args) {
    if (arg.startsWith('--batch=')) {
        const size = parseInt(arg.split('=')[1]);
        if (!isNaN(size) && size > 0) {
            batchSize = size;
        }
    }
}

// Configuration
const MIGRATED_AGENTS_DIR = path.join(projectRoot, 'packages/migrated-agents');
const REPORT_PATH = path.join(projectRoot, 'cleanup-report', 'safe-cleanup-candidates.md');
const BACKUP_DIR = path.join(projectRoot, 'backup', `migrated-files-backup-${new Date().toISOString().replace(/:/g, '').split('.')[0]}`);

// Dossiers qui contiennent des fichiers consolid√©s
const CONSOLIDATED_DIRS = [
    path.join(projectRoot, 'packages/orchestration'),
    path.join(projectRoot, 'packages/coordination'),
    path.join(projectRoot, 'packages/business'),
];

// Compteurs pour le rapport
const stats = {
    totalFiles: 0,
    safeToDelete: 0,
    potentiallyUnsafe: 0,
    keepFiles: 0,
    processedFiles: 0,
    deletedFiles: 0,
    errors: 0
};

/**
 * Cr√©e un lecteur interactif pour les entr√©es utilisateur
 */
function createReadlineInterface() {
    return readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
}

/**
 * V√©rifie si un fichier existe
 */
function fileExists(filePath) {
    try {
        return fs.existsSync(filePath);
    } catch (err) {
        return false;
    }
}

/**
 * Cr√©e un r√©pertoire s'il n'existe pas
 */
function ensureDirExists(dirPath) {
    if (!fileExists(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        return true;
    }
    return false;
}

/**
 * Cr√©e une sauvegarde des fichiers avant de les supprimer
 */
function backupFile(filePath) {
    try {
        const relativePath = path.relative(projectRoot, filePath);
        const backupPath = path.join(BACKUP_DIR, relativePath);

        // Cr√©er le r√©pertoire de sauvegarde
        ensureDirExists(path.dirname(backupPath));

        // Copier le fichier
        fs.copyFileSync(filePath, backupPath);
        return true;
    } catch (error) {
        console.error(`‚ö†Ô∏è Erreur lors de la sauvegarde de ${filePath}: ${error.message}`);
        return false;
    }
}

/**
 * Recherche des r√©f√©rences √† un fichier dans le reste du projet
 */
async function findReferences(filePath) {
    try {
        const fileName = path.basename(filePath);
        const fileNameWithoutExt = fileName.replace(/\.[^/.]+$/, '');

        // Recherche de r√©f√©rences dans le code (imports, requires)
        const grepCommand = `grep -r --include="*.ts" --include="*.js" -l "${fileNameWithoutExt}" ${projectRoot} | grep -v "node_modules" | grep -v "${filePath}" | grep -v "backup/" || true`;
        const result = execSync(grepCommand, { encoding: 'utf8' });

        return result.trim().split('\n').filter(Boolean);
    } catch (error) {
        console.error(`‚ö†Ô∏è Erreur lors de la recherche de r√©f√©rences pour ${filePath}: ${error.message}`);
        return [];
    }
}

/**
 * V√©rifie si un fichier migr√© a une version consolid√©e
 */
async function hasConsolidatedVersion(filePath) {
    const fileName = path.basename(filePath);
    const fileNameBase = fileName.replace(/(-[a-f0-9]{8}(-[a-f0-9]{8})?)?\.ts$/, '');

    // Chercher dans les dossiers consolid√©s
    for (const dir of CONSOLIDATED_DIRS) {
        // Recherche r√©cursive pour trouver des fichiers avec un nom similaire
        const command = `find ${dir} -type f -name "${fileNameBase}.ts" -o -name "${fileNameBase}-*.ts" | head -n 1 || true`;
        const result = execSync(command, { encoding: 'utf8' });

        if (result.trim()) {
            return result.trim();
        }
    }

    return null;
}

/**
 * Analyse un fichier migr√© pour d√©terminer s'il peut √™tre supprim√© en toute s√©curit√©
 */
async function analyzeMigratedFile(filePath) {
    stats.totalFiles++;

    // V√©rifier si le fichier a √©t√© consolid√©
    const consolidatedVersion = await hasConsolidatedVersion(filePath);

    // Chercher des r√©f√©rences √† ce fichier
    const references = await findReferences(filePath);

    return {
        path: filePath,
        relativePath: path.relative(projectRoot, filePath),
        consolidatedVersion: consolidatedVersion ? path.relative(projectRoot, consolidatedVersion) : null,
        hasConsolidatedVersion: !!consolidatedVersion,
        references,
        hasReferences: references.length > 0,
        isSafeToDelete: !!consolidatedVersion && references.length === 0
    };
}

/**
 * Supprimer un fichier migr√©
 */
async function deleteFile(filePath, interactive = false) {
    // Si en mode interactif, demander confirmation
    if (interactive) {
        const rl = createReadlineInterface();

        return new Promise((resolve) => {
            rl.question(`‚ùì Supprimer ${path.relative(projectRoot, filePath)} ? (O/n) `, (answer) => {
                rl.close();
                if (answer.toLowerCase() !== 'n') {
                    if (dryRun) {
                        console.log(`üîç [SIMULATION] Suppression de ${path.relative(projectRoot, filePath)}`);
                        resolve(true);
                    } else {
                        try {
                            // Sauvegarder avant de supprimer
                            backupFile(filePath);
                            fs.unlinkSync(filePath);
                            console.log(`‚úÖ Fichier supprim√©: ${path.relative(projectRoot, filePath)}`);
                            resolve(true);
                        } catch (error) {
                            console.error(`‚ö†Ô∏è Erreur lors de la suppression de ${filePath}: ${error.message}`);
                            resolve(false);
                        }
                    }
                } else {
                    console.log(`‚è≠Ô∏è Conservation du fichier: ${path.relative(projectRoot, filePath)}`);
                    stats.keepFiles++;
                    resolve(false);
                }
            });
        });
    } else {
        // Mode non interactif
        if (dryRun) {
            console.log(`üîç [SIMULATION] Suppression de ${path.relative(projectRoot, filePath)}`);
            return true;
        } else {
            try {
                // Sauvegarder avant de supprimer
                backupFile(filePath);
                fs.unlinkSync(filePath);
                console.log(`‚úÖ Fichier supprim√©: ${path.relative(projectRoot, filePath)}`);
                return true;
            } catch (error) {
                console.error(`‚ö†Ô∏è Erreur lors de la suppression de ${filePath}: ${error.message}`);
                stats.errors++;
                return false;
            }
        }
    }
}

/**
 * Trouve tous les fichiers dans le r√©pertoire des agents migr√©s
 */
function findAllMigratedFiles() {
    try {
        const command = `find ${MIGRATED_AGENTS_DIR} -type f -name "*.ts" | sort`;
        const result = execSync(command, { encoding: 'utf8' });
        return result.trim().split('\n').filter(Boolean);
    } catch (error) {
        console.error(`‚ö†Ô∏è Erreur lors de la recherche des fichiers migr√©s: ${error.message}`);
        return [];
    }
}

/**
 * G√©n√®re un rapport des fichiers analys√©s
 */
function generateReport(results) {
    const timestamp = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');

    let report = `<!-- filepath: ${REPORT_PATH} -->\n`;
    report += `# Rapport des candidats pour nettoyage s√©curis√©\n\n`;
    report += `*G√©n√©r√© le ${timestamp}*\n\n`;

    report += `## R√©sum√©\n\n`;
    report += `- **Total des fichiers migr√©s analys√©s**: ${stats.totalFiles}\n`;
    report += `- **S√ªrs √† supprimer**: ${stats.safeToDelete}\n`;
    report += `- **Potentiellement non s√ªrs**: ${stats.potentiallyUnsafe}\n`;

    if (stats.deletedFiles > 0) {
        report += `- **Fichiers supprim√©s**: ${stats.deletedFiles}\n`;
    }
    if (stats.keepFiles > 0) {
        report += `- **Fichiers conserv√©s**: ${stats.keepFiles}\n`;
    }
    if (stats.errors > 0) {
        report += `- **Erreurs rencontr√©es**: ${stats.errors}\n`;
    }

    report += `\n## Fichiers s√ªrs √† supprimer\n\n`;

    const safeFiles = results.filter(r => r.isSafeToDelete);

    if (safeFiles.length > 0) {
        report += `| Fichier | Version consolid√©e |\n`;
        report += `|---------|-------------------|\n`;

        for (const file of safeFiles) {
            report += `| \`${file.relativePath}\` | \`${file.consolidatedVersion}\` |\n`;
        }
    } else {
        report += `*Aucun fichier s√ªr √† supprimer trouv√©.*\n`;
    }

    report += `\n## Fichiers √† v√©rifier manuellement\n\n`;

    const unsafeFiles = results.filter(r => !r.isSafeToDelete);

    if (unsafeFiles.length > 0) {
        report += `| Fichier | Version consolid√©e | R√©f√©rences |\n`;
        report += `|---------|-------------------|------------|\n`;

        for (const file of unsafeFiles) {
            const consolidatedInfo = file.hasConsolidatedVersion
                ? `\`${file.consolidatedVersion}\``
                : "‚ùå Non trouv√©e";

            const referencesCount = file.references.length;
            const referencesInfo = referencesCount > 0
                ? `${referencesCount} r√©f√©rence(s)`
                : "Aucune r√©f√©rence";

            report += `| \`${file.relativePath}\` | ${consolidatedInfo} | ${referencesInfo} |\n`;
        }
    } else {
        report += `*Aucun fichier n√©cessitant une v√©rification manuelle.*\n`;
    }

    if (file.references.length > 0) {
        report += `\n### D√©tails des r√©f√©rences\n\n`;

        for (const file of unsafeFiles.filter(f => f.references.length > 0)) {
            report += `#### \`${file.relativePath}\`\n\n`;
            report += `R√©f√©rences trouv√©es dans:\n\n`;

            for (const reference of file.references) {
                report += `- \`${path.relative(projectRoot, reference)}\`\n`;
            }

            report += `\n`;
        }
    }

    report += `\n## Comment proc√©der\n\n`;

    if (safeFiles.length > 0) {
        report += `Pour supprimer les fichiers s√ªrs, ex√©cutez:\n\n`;
        report += `\`\`\`bash\n`;
        report += `node tools/scripts/cleanup-migrated-files.js --batch=${Math.min(10, safeFiles.length)}\n`;
        report += `\`\`\`\n\n`;
        report += `Pour une suppression interactive (recommand√©):\n\n`;
        report += `\`\`\`bash\n`;
        report += `node tools/scripts/cleanup-migrated-files.js --interactive\n`;
        report += `\`\`\`\n\n`;
    }

    report += `Pour simuler la suppression sans effectuer de modifications:\n\n`;
    report += `\`\`\`bash\n`;
    report += `node tools/scripts/cleanup-migrated-files.js --dry-run\n`;
    report += `\`\`\`\n\n`;

    report += `Les fichiers qui ont encore des r√©f√©rences n√©cessitent une analyse manuelle pour mettre √† jour ces r√©f√©rences vers les versions consolid√©es avant suppression.\n`;

    return report;
}

/**
 * Fonction principale
 */
async function main() {
    console.log(`\n=== Nettoyage prudent des fichiers migr√©s ===`);
    console.log(`Mode: ${dryRun ? 'Liste/Simulation' : 'Suppression r√©elle'}`);

    // V√©rifier si le r√©pertoire des agents migr√©s existe
    if (!fileExists(MIGRATED_AGENTS_DIR)) {
        console.error(`‚ö†Ô∏è Le r√©pertoire des agents migr√©s n'existe pas: ${MIGRATED_AGENTS_DIR}`);
        process.exit(1);
    }

    // Cr√©er le r√©pertoire de sauvegarde si nous allons supprimer des fichiers
    if (!dryRun) {
        console.log(`üì¶ Cr√©ation d'une sauvegarde dans ${BACKUP_DIR}...`);
        ensureDirExists(BACKUP_DIR);
    }

    // Trouver tous les fichiers migr√©s
    console.log(`üîç Recherche des fichiers migr√©s...`);
    const migratedFiles = findAllMigratedFiles();
    console.log(`üìä ${migratedFiles.length} fichiers migr√©s trouv√©s.`);

    if (migratedFiles.length === 0) {
        console.log(`‚ö†Ô∏è Aucun fichier migr√© √† analyser.`);
        return;
    }

    // Analyser chaque fichier migr√©
    console.log(`\nüîç Analyse des fichiers migr√©s...`);

    const results = [];
    for (let i = 0; i < migratedFiles.length; i++) {
        const filePath = migratedFiles[i];
        process.stdout.write(`\rüìä Analyse des fichiers... ${i + 1}/${migratedFiles.length}`);

        const analysis = await analyzeMigratedFile(filePath);
        results.push(analysis);

        if (analysis.isSafeToDelete) {
            stats.safeToDelete++;
        } else {
            stats.potentiallyUnsafe++;
        }
    }
    console.log(`\n‚úÖ Analyse termin√©e.`);

    // G√©n√©rer et sauvegarder le rapport
    const report = generateReport(results);
    ensureDirExists(path.dirname(REPORT_PATH));
    fs.writeFileSync(REPORT_PATH, report);
    console.log(`üìÑ Rapport g√©n√©r√©: ${REPORT_PATH}`);

    // Si mode liste uniquement, s'arr√™ter ici
    if (listOnly) {
        console.log(`\nüìã Liste des fichiers √©tablie. Ex√©cutez avec des options sp√©cifiques pour proc√©der √† la suppression.`);
        return;
    }

    // Supprimer les fichiers s√ªrs
    const safeFiles = results.filter(r => r.isSafeToDelete);

    if (safeFiles.length === 0) {
        console.log(`\n‚ö†Ô∏è Aucun fichier s√ªr √† supprimer n'a √©t√© identifi√©.`);
        return;
    }

    console.log(`\nüóëÔ∏è Suppression des fichiers s√ªrs...`);
    console.log(`üìä ${safeFiles.length} fichiers √† traiter`);

    if (interactive) {
        console.log(`\n‚ö†Ô∏è Mode interactif activ√©. Confirmation requise pour chaque fichier.`);

        for (const file of safeFiles) {
            stats.processedFiles++;
            const deleted = await deleteFile(file.path, true);
            if (deleted) stats.deletedFiles++;
        }
    } else {
        console.log(`\n‚ö†Ô∏è Mode par lot activ√©. Traitement par lots de ${batchSize} fichiers.`);

        // Traiter par lots
        for (let i = 0; i < safeFiles.length; i += batchSize) {
            const batch = safeFiles.slice(i, i + batchSize);
            console.log(`\n--- Traitement du lot ${Math.floor(i / batchSize) + 1}/${Math.ceil(safeFiles.length / batchSize)} ---`);

            for (const file of batch) {
                stats.processedFiles++;
                const deleted = await deleteFile(file.path, false);
                if (deleted) stats.deletedFiles++;
            }

            if (i + batchSize < safeFiles.length && !dryRun) {
                console.log(`\n‚è∏Ô∏è Pause pour v√©rification...`);
                const rl = createReadlineInterface();

                await new Promise((resolve) => {
                    rl.question(`Continuer avec le prochain lot ? (O/n) `, (answer) => {
                        rl.close();
                        if (answer.toLowerCase() === 'n') {
                            console.log(`\n‚èπÔ∏è Op√©ration interrompue par l'utilisateur.`);
                            process.exit(0);
                        }
                        resolve();
                    });
                });
            }
        }
    }

    console.log(`\n=== R√©sum√© du nettoyage ===`);
    console.log(`üìä Total des fichiers migr√©s: ${stats.totalFiles}`);
    console.log(`‚úÖ Fichiers s√ªrs identifi√©s: ${stats.safeToDelete}`);
    console.log(`‚ö†Ô∏è Fichiers potentiellement non s√ªrs: ${stats.potentiallyUnsafe}`);
    console.log(`üóëÔ∏è Fichiers supprim√©s: ${stats.deletedFiles}`);

    if (stats.keepFiles > 0) {
        console.log(`üìå Fichiers conserv√©s: ${stats.keepFiles}`);
    }

    if (stats.errors > 0) {
        console.log(`‚ùå Erreurs rencontr√©es: ${stats.errors}`);
    }

    if (dryRun) {
        console.log(`\nüìù Ex√©cution en mode simulation. Aucun fichier n'a √©t√© r√©ellement supprim√©.`);
        console.log(`   Pour supprimer r√©ellement les fichiers, ex√©cutez sans l'option --dry-run.`);
    } else {
        console.log(`\nüì¶ Une sauvegarde des fichiers supprim√©s a √©t√© cr√©√©e dans: ${BACKUP_DIR}`);
    }
}

// Ex√©cuter le script
main().catch(error => {
    console.error(`‚ùå Erreur lors de l'ex√©cution du script: ${error.message}`);
    process.exit(1);
});
