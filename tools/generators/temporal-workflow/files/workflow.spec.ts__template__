import { TestWorkflowEnvironment } from '@temporalio/testing';
import { Worker } from '@temporalio/worker';
import { <%= className %>, <%= className %>Input } from './workflow';
import * as activities from '../activities/<%= fileName %>';

jest.mock('../activities/<%= fileName %>', () => ({
  <%= fileName %>Activity: jest.fn(),
}));

describe('<%= className %> Workflow', () => {
  let testEnv: TestWorkflowEnvironment;
  
  beforeAll(async () => {
    testEnv = await TestWorkflowEnvironment.create();
  });
  
  afterAll(async () => {
    await testEnv?.teardown();
  });
  
  beforeEach(() => {
    jest.resetAllMocks();
  });
  
  it('devrait exécuter le workflow avec succès', async () => {
    // Configuration du mock pour l'activité
    const activityResult = {
      processedId: 'test-123',
      timestamp: '2024-05-01T12:00:00Z',
      status: 'completed',
    };
    (activities.<%= fileName %>Activity as jest.Mock).mockResolvedValue(activityResult);
    
    // Démarrage du Worker
    const worker = await Worker.create({
      connection: testEnv.nativeConnection,
      taskQueue: 'test-queue',
      workflowsPath: require.resolve('./workflow'),
      activities,
    });
    
    const runPromise = worker.run();
    
    // Exécution du workflow
    const input: <%= className %>Input = {
      id: 'test-123',
    };
    
    const result = await testEnv.client.workflow.<%= className %>(input, {
      taskQueue: 'test-queue',
      workflowId: 'test-workflow-id',
    });
    
    // Vérification des résultats
    expect(result.success).toBe(true);
    expect(result.message).toContain('avec succès');
    expect(result.data).toEqual(activityResult);
    
    // Vérification que l'activité a été appelée avec les bons paramètres
    expect(activities.<%= fileName %>Activity).toHaveBeenCalledWith(input);
    
    // Arrêt du Worker
    worker.shutdown();
    await runPromise;
  });
  
  it('devrait gérer les erreurs correctement', async () => {
    // Configuration du mock pour simuler une erreur
    const errorMessage = 'Erreur de test';
    (activities.<%= fileName %>Activity as jest.Mock).mockRejectedValue(new Error(errorMessage));
    
    // Démarrage du Worker
    const worker = await Worker.create({
      connection: testEnv.nativeConnection,
      taskQueue: 'test-queue',
      workflowsPath: require.resolve('./workflow'),
      activities,
    });
    
    const runPromise = worker.run();
    
    // Exécution du workflow
    const input: <%= className %>Input = {
      id: 'test-123',
    };
    
    const result = await testEnv.client.workflow.<%= className %>(input, {
      taskQueue: 'test-queue',
      workflowId: 'test-workflow-id',
    });
    
    // Vérification des résultats
    expect(result.success).toBe(false);
    expect(result.message).toContain(errorMessage);
    expect(result.data).toBeUndefined();
    
    // Arrêt du Worker
    worker.shutdown();
    await runPromise;
  });
});