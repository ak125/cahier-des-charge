#!/bin/bash
# n8n-setup.sh - Installation et configuration de n8n pour le pipeline de migration
# Date: 10 avril 2025

echo "üöÄ Installation et configuration de n8n pour le pipeline de migration..."

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
  echo "‚ùå Docker n'est pas install√©. Veuillez l'installer avant de continuer."
  exit 1
fi

# V√©rifier si docker-compose est install√©
if ! command -v docker-compose &> /dev/null; then
  echo "‚ùå docker-compose n'est pas install√©. Veuillez l'installer avant de continuer."
  exit 1
fi

# Cr√©er le dossier pour les donn√©es persistantes de n8n
mkdir -p .n8n/data

# Cr√©er le fichier docker-compose pour n8n s'il n'existe pas d√©j√†
if [ ! -f "docker-compose.n8n.yml" ]; then
  echo "üìù Cr√©ation du fichier docker-compose.n8n.yml..."
  cat > docker-compose.n8n.yml << 'EOF'
version: '3'

services:
  n8n:
    image: n8nio/n8n:latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=cahier-des-charges-migrator
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - NODE_ENV=production
      - WEBHOOK_URL=http://${N8N_HOST:-localhost}:${N8N_PORT:-5678}/
      - EXECUTIONS_PROCESS=main
      - DB_TYPE=sqlite
      - DB_SQLITE_PATH=/home/node/.n8n/database.sqlite
      - N8N_PUSH_BACKEND=websocket
    volumes:
      - ./.n8n/data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./config:/home/node/.n8n/config
      - ./assets:/home/node/.n8n/assets
      - ./reports:/home/node/.n8n/reports
EOF
  echo "‚úÖ Fichier docker-compose.n8n.yml cr√©√©"
fi

# Cr√©er le script pour importer les workflows dans n8n
echo "üìù Cr√©ation du script d'importation des workflows..."
cat > scripts/migration/import-n8n-workflows.js << 'EOF'
const fs = require('fs');
const path = require('path');
const axios = require('axios');

// Configuration
const N8N_HOST = process.env.N8N_HOST || 'localhost';
const N8N_PORT = process.env.N8N_PORT || '5678';
const N8N_PROTOCOL = process.env.N8N_PROTOCOL || 'http';
const N8N_USER = process.env.N8N_BASIC_AUTH_USER || 'admin';
const N8N_PASSWORD = process.env.N8N_BASIC_AUTH_PASSWORD || 'cahier-des-charges-migrator';

const n8nUrl = `${N8N_PROTOCOL}://${N8N_HOST}:${N8N_PORT}`;
const authString = Buffer.from(`${N8N_USER}:${N8N_PASSWORD}`).toString('base64');

// Lire le fichier principal des workflows
async function importWorkflows() {
  console.log('üì• Importation des workflows n8n...');
  
  try {
    // Lire le fichier principal des workflows
    const mainPipelinePath = path.resolve(__dirname, '../../n8n.pipeline.json');
    const configDir = path.resolve(__dirname, '../../config');
    
    if (fs.existsSync(mainPipelinePath)) {
      console.log(`Importation du pipeline principal: ${mainPipelinePath}`);
      const pipelineData = JSON.parse(fs.readFileSync(mainPipelinePath, 'utf8'));
      
      // Importer chaque workflow
      if (pipelineData.workflows && Array.isArray(pipelineData.workflows)) {
        for (const workflow of pipelineData.workflows) {
          await importWorkflow(workflow, 'pipeline principal');
        }
      }
    }
    
    // Lire les fichiers de workflow dans le dossier config
    const n8nConfigFiles = fs.readdirSync(configDir)
      .filter(file => file.includes('.n8n.') && file.endsWith('.json'));
    
    for (const configFile of n8nConfigFiles) {
      const filePath = path.join(configDir, configFile);
      console.log(`Importation du workflow de configuration: ${filePath}`);
      
      try {
        const workflowData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        await importWorkflow(workflowData, configFile);
      } catch (err) {
        console.error(`‚ùå Erreur lors de la lecture/importation du fichier ${configFile}:`, err.message);
      }
    }
    
    console.log('‚úÖ Importation des workflows termin√©e avec succ√®s!');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'importation des workflows:', error.message);
    process.exit(1);
  }
}

// Importer un workflow dans n8n
async function importWorkflow(workflow, source) {
  try {
    const workflowName = workflow.name || (workflow.id ? `Workflow ${workflow.id}` : 'Sans nom');
    console.log(`üîÑ Importation du workflow: ${workflowName} depuis ${source}`);
    
    // Pr√©parer les donn√©es pour l'API n8n
    const apiData = {
      name: workflowName,
      nodes: workflow.nodes || [],
      connections: workflow.connections || {},
      active: workflow.active || false,
      settings: workflow.settings || {},
      tags: workflow.tags || [],
    };
    
    // Envoyer √† l'API n8n
    const response = await axios.post(`${n8nUrl}/rest/workflows`, apiData, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Basic ${authString}`
      }
    });
    
    if (response.status === 200) {
      console.log(`‚úÖ Workflow "${workflowName}" import√© avec succ√®s!`);
    } else {
      console.warn(`‚ö†Ô∏è Importation du workflow "${workflowName}" a retourn√© un statut inattendu:`, response.status);
    }
  } catch (error) {
    if (error.response && error.response.status === 409) {
      console.warn(`‚ö†Ô∏è Le workflow "${workflow.name || 'sans nom'}" existe d√©j√† dans n8n.`);
    } else {
      console.error(`‚ùå Erreur lors de l'importation du workflow:`, error.message);
    }
  }
}

// Ex√©cuter l'importation
importWorkflows();
EOF

mkdir -p scripts/migration
chmod +x scripts/migration/import-n8n-workflows.js
echo "‚úÖ Script d'importation des workflows cr√©√© dans scripts/migration/import-n8n-workflows.js"

# Cr√©er le script pour lancer n8n
echo "üìù Cr√©ation du script de lancement n8n..."
cat > scripts/migration/start-n8n.sh << 'EOF'
#!/bin/bash
# start-n8n.sh - Lance l'instance n8n pour le pipeline de migration

echo "üöÄ D√©marrage de n8n pour le pipeline de migration..."

# V√©rifier si docker-compose.n8n.yml existe
if [ ! -f "docker-compose.n8n.yml" ]; then
  echo "‚ùå Fichier docker-compose.n8n.yml non trouv√©. Ex√©cutez d'abord n8n-setup.sh."
  exit 1
fi

# D√©marrer n8n avec docker-compose
docker-compose -f docker-compose.n8n.yml up -d

# Attendre que n8n soit pr√™t
echo "‚è≥ Attente du d√©marrage de n8n..."
attempts=0
max_attempts=30

while [ $attempts -lt $max_attempts ]; do
  if curl -s http://localhost:5678/rest/settings > /dev/null; then
    echo "‚úÖ n8n est pr√™t!"
    break
  fi
  
  attempts=$((attempts+1))
  echo "‚è≥ Attente de n8n... ($attempts/$max_attempts)"
  sleep 2
done

if [ $attempts -eq $max_attempts ]; then
  echo "‚ùå n8n n'a pas d√©marr√© dans le temps imparti."
  exit 1
fi

# Installer les d√©pendances n√©cessaires pour le script d'importation
if ! npm list axios > /dev/null 2>&1; then
  echo "üì¶ Installation de la d√©pendance axios..."
  npm install --no-save axios
fi

# Importer les workflows
echo "üì• Importation des workflows dans n8n..."
node scripts/migration/import-n8n-workflows.js

echo "üìä n8n est accessible √† l'adresse: http://localhost:5678"
echo "   Identifiants: admin / cahier-des-charges-migrator"
echo ""
echo "üìù Pour lancer une migration via le pipeline, utilisez: ./scripts/migration/run-migration.sh"
EOF

chmod +x scripts/migration/start-n8n.sh
echo "‚úÖ Script de lancement n8n cr√©√© dans scripts/migration/start-n8n.sh"

# Cr√©er le script pour lancer une migration
echo "üìù Cr√©ation du script d'ex√©cution de migration..."
cat > scripts/migration/run-migration.sh << 'EOF'
#!/bin/bash
# run-migration.sh - Lance une migration via le pipeline n8n

echo "üöÄ Lancement d'une migration via le pipeline n8n..."

# V√©rifier si n8n est en cours d'ex√©cution
if ! curl -s http://localhost:5678/rest/settings > /dev/null; then
  echo "‚ùå n8n n'est pas en cours d'ex√©cution. Lancez-le d'abord avec: ./scripts/migration/start-n8n.sh"
  exit 1
fi

# Param√®tres de la migration
WORKFLOW_ID=${1:-"php-analyzer"}  # ID du workflow √† ex√©cuter, php-analyzer par d√©faut
SOURCE_PATH=${2:-"./app"}         # Chemin source par d√©faut
TARGET_PATH=${3:-"./reports/analysis"} # Chemin cible par d√©faut

echo "üìã Param√®tres de la migration:"
echo "   - Workflow: $WORKFLOW_ID"
echo "   - Chemin source: $SOURCE_PATH"
echo "   - Chemin cible: $TARGET_PATH"

# Demander confirmation
echo -n "‚ùì Voulez-vous lancer cette migration? (o/n): "
read -r answer

if [[ ! "$answer" =~ ^[oO]$ ]]; then
  echo "‚ùå Migration annul√©e."
  exit 0
fi

# Cr√©er le dossier cible s'il n'existe pas
mkdir -p "$TARGET_PATH"

# Lancer l'ex√©cution du workflow
echo "üîÑ Lancement du workflow $WORKFLOW_ID..."

# Authentification pour l'API n8n
N8N_USER=${N8N_BASIC_AUTH_USER:-"admin"}
N8N_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-"cahier-des-charges-migrator"}
AUTH_STRING=$(echo -n "$N8N_USER:$N8N_PASSWORD" | base64)

# R√©cup√©rer l'ID interne du workflow
WORKFLOW_DATA=$(curl -s -H "Authorization: Basic $AUTH_STRING" http://localhost:5678/rest/workflows)
INTERNAL_ID=$(echo "$WORKFLOW_DATA" | grep -o "\"id\":\"[^\"]*\",\"name\":\"[^\"]*$WORKFLOW_ID" | head -1 | cut -d'"' -f4)

if [ -z "$INTERNAL_ID" ]; then
  echo "‚ùå Workflow '$WORKFLOW_ID' non trouv√© dans n8n."
  exit 1
fi

# Lancer l'ex√©cution
EXECUTION_DATA=$(curl -s -X POST \
  -H "Authorization: Basic $AUTH_STRING" \
  -H "Content-Type: application/json" \
  -d "{\"workflowData\": {\"id\": \"$INTERNAL_ID\"}, \"runData\": {\"sourcePath\": \"$SOURCE_PATH\", \"targetPath\": \"$TARGET_PATH\"}}" \
  http://localhost:5678/rest/workflows/$INTERNAL_ID/execute)

EXECUTION_ID=$(echo "$EXECUTION_DATA" | grep -o "\"id\":\"[^\"]*\"" | head -1 | cut -d'"' -f4)

if [ -z "$EXECUTION_ID" ]; then
  echo "‚ùå Erreur lors du lancement de l'ex√©cution."
  exit 1
fi

echo "‚úÖ Migration lanc√©e avec l'ID d'ex√©cution: $EXECUTION_ID"
echo "   Vous pouvez suivre l'avancement dans l'interface n8n: http://localhost:5678/execution/$EXECUTION_ID"
EOF

chmod +x scripts/migration/run-migration.sh
echo "‚úÖ Script d'ex√©cution de migration cr√©√© dans scripts/migration/run-migration.sh"

# Ajouter des scripts npm pour n8n
echo "üìù Mise √† jour du package.json avec les scripts n8n..."
# Sauvegarde du package.json
cp package.json package.json.n8n.bak

# Ajouter les scripts n8n au package.json
if [ -f "package.json" ]; then
  # Utiliser jq s'il est disponible, sinon utiliser sed
  if command -v jq &> /dev/null; then
    jq '.scripts += {
      "n8n:setup": "./n8n-setup.sh",
      "n8n:start": "./scripts/migration/start-n8n.sh",
      "n8n:stop": "docker-compose -f docker-compose.n8n.yml down",
      "n8n:migrate": "./scripts/migration/run-migration.sh",
      "n8n:logs": "docker-compose -f docker-compose.n8n.yml logs -f n8n"
    }' package.json > package.json.tmp && mv package.json.tmp package.json
  else
    # Utiliser sed si jq n'est pas disponible
    sed -i '/"scripts": {/a \
    "n8n:setup": "./n8n-setup.sh",\
    "n8n:start": "./scripts/migration/start-n8n.sh",\
    "n8n:stop": "docker-compose -f docker-compose.n8n.yml down",\
    "n8n:migrate": "./scripts/migration/run-migration.sh",\
    "n8n:logs": "docker-compose -f docker-compose.n8n.yml logs -f n8n",' package.json
  fi
  echo "‚úÖ Scripts n8n ajout√©s au package.json"
else
  echo "‚ö†Ô∏è Fichier package.json non trouv√©, les scripts npm n'ont pas √©t√© ajout√©s."
fi

# Cr√©er un fichier de documentation
echo "üìù Cr√©ation de la documentation pour n8n..."
mkdir -p docs/pipeline
cat > docs/pipeline/n8n-pipeline.md << 'EOF'
# Pipeline de Migration avec n8n

Ce document d√©crit comment utiliser n8n pour automatiser le processus de migration du code PHP vers NestJS/Remix.

## üìã Vue d'ensemble

n8n est une plateforme d'automatisation de flux de travail qui nous permet de cr√©er des pipelines de migration efficaces et visuels. Dans ce projet, n8n est utilis√© pour :

1. Analyser le code PHP existant
2. G√©n√©rer des rapports d'analyse
3. Orchestrer les √©tapes de migration
4. G√©n√©rer du code pour la nouvelle architecture
5. Valider les migrations

## üöÄ Installation et configuration

### Pr√©requis

- Docker et docker-compose install√©s
- Node.js (pour les scripts d'importation)

### Installation

```bash
# Installer et configurer n8n
npm run n8n:setup

# D√©marrer n8n
npm run n8n:start
```

L'interface de n8n sera accessible √† l'adresse : http://localhost:5678
- Identifiants: admin / cahier-des-charges-migrator

## üîÑ Pipelines disponibles

Le projet inclut plusieurs pipelines pr√©configur√©s :

1. **PHP Analyzer** (ID: `php-analyzer`)
   - Analyse les fichiers PHP existants
   - Extrait la structure, les d√©pendances et la logique m√©tier
   - G√©n√®re des rapports JSON d√©taill√©s

2. **Code Generator** (ID: `code-generator`)
   - G√©n√®re du code NestJS/Remix √† partir des rapports d'analyse
   - Cr√©e la structure de fichiers cible
   - Applique les transformations n√©cessaires

3. **Documentation Updater** (ID: `docs-updater`)
   - Met √† jour la documentation en fonction du code migr√©
   - G√©n√®re des rapports de migration

## üõ†Ô∏è Utilisation

### Lancer une migration

```bash
# Syntaxe : npm run n8n:migrate [WORKFLOW_ID] [SOURCE_PATH] [TARGET_PATH]

# Exemple avec le pipeline par d√©faut (php-analyzer)
npm run n8n:migrate

# Exemple avec un pipeline sp√©cifique et des chemins personnalis√©s
npm run n8n:migrate code-generator ./reports/analysis ./src/generated
```

### Arr√™ter n8n

```bash
npm run n8n:stop
```

### Voir les logs de n8n

```bash
npm run n8n:logs
```

## üìä Structure des workflows

Tous les workflows de pipeline sont d√©finis dans les fichiers suivants :

- `n8n.pipeline.json` : D√©finition principale des workflows
- `config/*.n8n.json` : Configurations sp√©cifiques √† certains workflows

## üîß Personnalisation

Pour cr√©er ou modifier un workflow :

1. Acc√©dez √† l'interface n8n √† http://localhost:5678
2. Cr√©ez ou modifiez le workflow selon vos besoins
3. Exportez-le et int√©grez-le dans `n8n.pipeline.json` ou cr√©ez un nouveau fichier dans `config/`

## üîÑ Int√©gration avec le cahier des charges

Les pipelines n8n sont con√ßus pour fonctionner en parall√®le du cahier des charges. Ils impl√©mentent les processus d√©crits dans le cahier des charges et s'assurent que la migration respecte les exigences sp√©cifi√©es.

Les √©tapes de migration d√©finies dans le cahier des charges sont automatis√©es via ces pipelines, ce qui permet :
- Une ex√©cution coh√©rente et r√©p√©table
- Un suivi pr√©cis de la progression
- La g√©n√©ration de rapports d√©taill√©s
- Une tra√ßabilit√© compl√®te du processus
EOF

echo "‚úÖ Documentation n8n cr√©√©e dans docs/pipeline/n8n-pipeline.md"

# Mise √† jour du .gitignore pour n8n
echo "üìù Mise √† jour du .gitignore pour n8n..."
if [ -f ".gitignore" ]; then
  echo -e "\n# n8n\n.n8n/\n" >> .gitignore
  echo "‚úÖ .gitignore mis √† jour pour n8n"
else
  echo "# n8n" > .gitignore
  echo ".n8n/" >> .gitignore
  echo "‚úÖ Fichier .gitignore cr√©√© pour n8n"
fi

echo ""
echo "‚úÖ Installation et configuration de n8n termin√©es!"
echo ""
echo "üöÄ Pour d√©marrer n8n, ex√©cutez: npm run n8n:start"
echo "üìä L'interface n8n sera accessible √†: http://localhost:5678"
echo "   Identifiants: admin / cahier-des-charges-migrator"
echo ""
echo "üìù Documentation: docs/pipeline/n8n-pipeline.md"