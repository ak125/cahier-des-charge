#!/bin/bash

# Script pour impl√©menter formellement les interfaces dans tous les agents
# Date: 21 avril 2025

echo "üõ†Ô∏è Impl√©mentation formelle des interfaces dans les agents"

# Cr√©ation d'un journal des modifications
REPORT_DIR="/workspaces/cahier-des-charge/reports"
mkdir -p "$REPORT_DIR"
INTERFACES_LOG="$REPORT_DIR/interfaces-implementation-$(date +"%Y%m%d-%H%M%S").log"

echo "Impl√©mentation des interfaces - $(date)" > "$INTERFACES_LOG"
echo "=======================================" >> "$INTERFACES_LOG"

# 1. V√©rifier et cr√©er les interfaces de base si n√©cessaires
echo "üîç V√©rification des interfaces de base..."

# Cr√©er les r√©pertoires d'interfaces s'ils n'existent pas
mkdir -p "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces"
mkdir -p "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/analyzer"
mkdir -p "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/generator"
mkdir -p "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/orchestrator"
mkdir -p "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/validator"

# Cr√©er l'interface de base McpAgent
cat > "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/mcp-agent.ts" << EOL
/**
 * Interface de base pour tous les agents MCP
 */
export interface McpAgent {
  /** Nom unique de l'agent */
  name: string;
  
  /** Version actuelle de l'agent */
  version: string;
  
  /** Description courte des fonctionnalit√©s */
  description?: string;
  
  /** Initialisation de l'agent avec configuration */
  initialize?(config: Record<string, any>): Promise<void>;
  
  /** M√©thode principale d'ex√©cution de l'agent */
  execute(params: Record<string, any>): Promise<Record<string, any>>;
  
  /** V√©rifie si l'agent est initialis√© et pr√™t */
  isReady?(): boolean;
  
  /** Lib√®re les ressources utilis√©es par l'agent */
  shutdown?(): Promise<void>;
  
  /** Retourne les m√©tadonn√©es de l'agent */
  getMetadata?(): Record<string, any>;
}
EOL

echo "‚úÖ Interface McpAgent cr√©√©e" | tee -a "$INTERFACES_LOG"

# Cr√©er l'interface BaseAgent qui √©tend McpAgent
cat > "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/base-agent.ts" << EOL
import { McpAgent } from './mcp-agent';

/**
 * Interface de base √©tendue avec fonctionnalit√©s additionnelles communes
 */
export interface BaseAgent extends McpAgent {
  /** Domaine fonctionnel de l'agent */
  domain: string;
  
  /** Liste des capacit√©s de l'agent */
  capabilities: string[];
  
  /** Retourne un r√©sum√© textuel des fonctionnalit√©s */
  getSummary(): string;
  
  /** V√©rifie la compatibilit√© avec un autre agent */
  checkCompatibility?(otherAgent: McpAgent): Promise<boolean>;
  
  /** Journalise un message avec niveau de log */
  log?(level: 'debug' | 'info' | 'warn' | 'error', message: string): void;
}
EOL

echo "‚úÖ Interface BaseAgent cr√©√©e" | tee -a "$INTERFACES_LOG"

# Cr√©er les interfaces sp√©cifiques √† chaque type d'agent
# 1. AnalyzerAgent
cat > "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/analyzer/analyzer-agent.ts" << EOL
import { BaseAgent } from '../base-agent';

/**
 * Interface pour les agents d'analyse de donn√©es ou de code
 */
export interface AnalyzerAgent extends BaseAgent {
  /** R√©alise une analyse sur les donn√©es d'entr√©e */
  analyze(input: Record<string, any>): Promise<Record<string, any>>;
  
  /** Configuration sp√©cifique √† l'analyse */
  analysisConfig?: Record<string, any>;
  
  /** V√©rifie si les donn√©es d'entr√©e sont valides pour l'analyse */
  validateInput?(input: Record<string, any>): boolean;
  
  /** Liste des formats d'entr√©e support√©s */
  supportedFormats?: string[];
}
EOL

echo "‚úÖ Interface AnalyzerAgent cr√©√©e" | tee -a "$INTERFACES_LOG"

# 2. GeneratorAgent
cat > "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/generator/generator-agent.ts" << EOL
import { BaseAgent } from '../base-agent';

/**
 * Interface pour les agents de g√©n√©ration de code, contenu ou configuration
 */
export interface GeneratorAgent extends BaseAgent {
  /** G√©n√®re du contenu √† partir des donn√©es d'entr√©e */
  generate(input: Record<string, any>): Promise<Record<string, any>>;
  
  /** Configuration sp√©cifique √† la g√©n√©ration */
  generationConfig?: Record<string, any>;
  
  /** Formats de sortie support√©s */
  outputFormats?: string[];
  
  /** V√©rifie si le contenu g√©n√©r√© est valide */
  validateOutput?(output: Record<string, any>): boolean;
  
  /** Options de formatage de la sortie */
  formatOptions?: Record<string, any>;
}
EOL

echo "‚úÖ Interface GeneratorAgent cr√©√©e" | tee -a "$INTERFACES_LOG"

# 3. OrchestratorAgent
cat > "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/orchestrator/orchestrator-agent.ts" << EOL
import { BaseAgent } from '../base-agent';
import { McpAgent } from '../mcp-agent';

/**
 * Interface pour les agents d'orchestration qui coordonnent d'autres agents
 */
export interface OrchestratorAgent extends BaseAgent {
  /** Orchestrer l'ex√©cution d'une cha√Æne d'agents */
  orchestrate(agents: McpAgent[], params: Record<string, any>): Promise<Record<string, any>>;
  
  /** Enregistrer un agent dans l'orchestrateur */
  registerAgent?(agent: McpAgent): Promise<void>;
  
  /** D√©senregistrer un agent */
  unregisterAgent?(agentName: string): Promise<void>;
  
  /** Liste des agents enregistr√©s */
  registeredAgents?: McpAgent[];
  
  /** R√©cup√®re l'√©tat du syst√®me d'orchestration */
  getSystemState?(): Promise<Record<string, any>>;
  
  /** Supervise l'ex√©cution d'une t√¢che */
  monitorExecution?(jobId: string): Promise<Record<string, any>>;
}
EOL

echo "‚úÖ Interface OrchestratorAgent cr√©√©e" | tee -a "$INTERFACES_LOG"

# 4. ValidatorAgent
cat > "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/validator/validator-agent.ts" << EOL
import { BaseAgent } from '../base-agent';

/**
 * Interface pour les agents de validation et v√©rification
 */
export interface ValidatorAgent extends BaseAgent {
  /** Valide les donn√©es d'entr√©e selon un sch√©ma ou des r√®gles */
  validate(input: Record<string, any>): Promise<Record<string, any>>;
  
  /** R√®gles de validation configurables */
  validationRules?: Record<string, any>;
  
  /** Niveau de s√©v√©rit√© des erreurs √† remonter */
  severityLevel?: 'info' | 'warning' | 'error' | 'critical';
  
  /** V√©rifie la conformit√© √† un standard sp√©cifique */
  checkCompliance?(standard: string, input: Record<string, any>): Promise<boolean>;
  
  /** Formats des rapports d'erreurs */
  errorReportFormat?: 'simple' | 'detailed' | 'json';
}
EOL

echo "‚úÖ Interface ValidatorAgent cr√©√©e" | tee -a "$INTERFACES_LOG"

# Cr√©er des index pour exporter les interfaces
cat > "/workspaces/cahier-des-charge/packages/mcp-agents/interfaces/index.ts" << EOL
// Exports des interfaces principales
export * from './mcp-agent';
export * from './base-agent';
export * from './analyzer/analyzer-agent';
export * from './generator/generator-agent';
export * from './orchestrator/orchestrator-agent';
export * from './validator/validator-agent';
EOL

# Chercher tous les fichiers d'agents pour impl√©menter les interfaces
echo "üîç Recherche des agents √† mettre √† jour..." | tee -a "$INTERFACES_LOG"

# 1. Trouver tous les agents d'analyse
analyzer_agents=$(find /workspaces/cahier-des-charge -path "*/analyzers/*/*.ts" -or -path "*/analysis/*/*.ts" | grep -v "index.ts" | grep -v "interfaces")

for agent_file in $analyzer_agents; do
  echo "üõ†Ô∏è Mise √† jour de l'agent d'analyse: $agent_file" | tee -a "$INTERFACES_LOG"
  
  # V√©rifier si le fichier impl√©mente d√©j√† une interface
  if grep -q "implements" "$agent_file"; then
    echo "  ‚úì D√©j√† impl√©ment√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Extraire le nom de la classe
  class_name=$(grep -oP "(?<=class\s+)(\w+)" "$agent_file" | head -1)
  
  if [ -z "$class_name" ]; then
    echo "  ‚ö†Ô∏è Pas de classe trouv√©e, ignor√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Ajouter l'import de l'interface
  sed -i '1s/^/import { AnalyzerAgent } from "..\/..\/interfaces\/analyzer\/analyzer-agent";\n/' "$agent_file"
  
  # Ajouter l'impl√©mentation de l'interface
  sed -i "s/class $class_name/class $class_name implements AnalyzerAgent/" "$agent_file"
  
  # V√©rifier si les propri√©t√©s et m√©thodes obligatoires sont pr√©sentes
  if ! grep -q "name\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  name = \"$class_name\";" "$agent_file"
  fi
  
  if ! grep -q "version\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  version = \"1.0.0\";" "$agent_file"
  fi
  
  if ! grep -q "domain\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  domain = \"analysis\";" "$agent_file"
  fi
  
  if ! grep -q "capabilities\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  capabilities = [\"analyze\"];" "$agent_file"
  fi
  
  # Ajouter la m√©thode getSummary si elle n'existe pas
  if ! grep -q "getSummary" "$agent_file"; then
    sed -i "/class $class_name/a \  getSummary(): string {\n    return \`\${this.name} v\${this.version} - Agent d'analyse\`;\n  }" "$agent_file"
  fi
  
  # Ajouter la m√©thode analyze si elle n'existe pas
  if ! grep -q "analyze" "$agent_file" && ! grep -q "analyse" "$agent_file"; then
    sed -i "/class $class_name/a \  async analyze(input: Record<string, any>): Promise<Record<string, any>> {\n    return await this.execute(input);\n  }" "$agent_file"
  fi
  
  echo "  ‚úÖ Interface impl√©ment√©e" | tee -a "$INTERFACES_LOG"
done

# 2. Trouver tous les agents de g√©n√©ration
generator_agents=$(find /workspaces/cahier-des-charge -path "*/generators/*/*.ts" | grep -v "index.ts" | grep -v "interfaces")

for agent_file in $generator_agents; do
  echo "üõ†Ô∏è Mise √† jour de l'agent de g√©n√©ration: $agent_file" | tee -a "$INTERFACES_LOG"
  
  # V√©rifier si le fichier impl√©mente d√©j√† une interface
  if grep -q "implements" "$agent_file"; then
    echo "  ‚úì D√©j√† impl√©ment√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Extraire le nom de la classe
  class_name=$(grep -oP "(?<=class\s+)(\w+)" "$agent_file" | head -1)
  
  if [ -z "$class_name" ]; then
    echo "  ‚ö†Ô∏è Pas de classe trouv√©e, ignor√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Ajouter l'import de l'interface
  sed -i '1s/^/import { GeneratorAgent } from "..\/..\/interfaces\/generator\/generator-agent";\n/' "$agent_file"
  
  # Ajouter l'impl√©mentation de l'interface
  sed -i "s/class $class_name/class $class_name implements GeneratorAgent/" "$agent_file"
  
  # V√©rifier si les propri√©t√©s et m√©thodes obligatoires sont pr√©sentes
  if ! grep -q "name\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  name = \"$class_name\";" "$agent_file"
  fi
  
  if ! grep -q "version\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  version = \"1.0.0\";" "$agent_file"
  fi
  
  if ! grep -q "domain\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  domain = \"generation\";" "$agent_file"
  fi
  
  if ! grep -q "capabilities\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  capabilities = [\"generate\"];" "$agent_file"
  fi
  
  # Ajouter la m√©thode getSummary si elle n'existe pas
  if ! grep -q "getSummary" "$agent_file"; then
    sed -i "/class $class_name/a \  getSummary(): string {\n    return \`\${this.name} v\${this.version} - Agent de g√©n√©ration\`;\n  }" "$agent_file"
  fi
  
  # Ajouter la m√©thode generate si elle n'existe pas
  if ! grep -q "generate" "$agent_file"; then
    sed -i "/class $class_name/a \  async generate(input: Record<string, any>): Promise<Record<string, any>> {\n    return await this.execute(input);\n  }" "$agent_file"
  fi
  
  echo "  ‚úÖ Interface impl√©ment√©e" | tee -a "$INTERFACES_LOG"
done

# 3. Trouver tous les agents d'orchestration
orchestrator_agents=$(find /workspaces/cahier-des-charge -path "*/orchestrators/*/*.ts" | grep -v "index.ts" | grep -v "interfaces")

for agent_file in $orchestrator_agents; do
  echo "üõ†Ô∏è Mise √† jour de l'agent d'orchestration: $agent_file" | tee -a "$INTERFACES_LOG"
  
  # V√©rifier si le fichier impl√©mente d√©j√† une interface
  if grep -q "implements" "$agent_file"; then
    echo "  ‚úì D√©j√† impl√©ment√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Extraire le nom de la classe
  class_name=$(grep -oP "(?<=class\s+)(\w+)" "$agent_file" | head -1)
  
  if [ -z "$class_name" ]; then
    echo "  ‚ö†Ô∏è Pas de classe trouv√©e, ignor√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Ajouter l'import de l'interface
  sed -i '1s/^/import { OrchestratorAgent } from "..\/..\/interfaces\/orchestrator\/orchestrator-agent";\n/' "$agent_file"
  sed -i '1s/^/import { McpAgent } from "..\/..\/interfaces\/mcp-agent";\n/' "$agent_file"
  
  # Ajouter l'impl√©mentation de l'interface
  sed -i "s/class $class_name/class $class_name implements OrchestratorAgent/" "$agent_file"
  
  # V√©rifier si les propri√©t√©s et m√©thodes obligatoires sont pr√©sentes
  if ! grep -q "name\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  name = \"$class_name\";" "$agent_file"
  fi
  
  if ! grep -q "version\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  version = \"1.0.0\";" "$agent_file"
  fi
  
  if ! grep -q "domain\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  domain = \"orchestration\";" "$agent_file"
  fi
  
  if ! grep -q "capabilities\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  capabilities = [\"orchestrate\"];" "$agent_file"
  fi
  
  # Ajouter la m√©thode getSummary si elle n'existe pas
  if ! grep -q "getSummary" "$agent_file"; then
    sed -i "/class $class_name/a \  getSummary(): string {\n    return \`\${this.name} v\${this.version} - Agent d'orchestration\`;\n  }" "$agent_file"
  fi
  
  # Ajouter la m√©thode orchestrate si elle n'existe pas
  if ! grep -q "orchestrate" "$agent_file"; then
    sed -i "/class $class_name/a \  async orchestrate(agents: McpAgent[], params: Record<string, any>): Promise<Record<string, any>> {\n    return await this.execute({ agents, ...params });\n  }" "$agent_file"
  fi
  
  echo "  ‚úÖ Interface impl√©ment√©e" | tee -a "$INTERFACES_LOG"
done

# 4. Trouver tous les agents de validation
validator_agents=$(find /workspaces/cahier-des-charge -path "*/validators/*/*.ts" | grep -v "index.ts" | grep -v "interfaces")

for agent_file in $validator_agents; do
  echo "üõ†Ô∏è Mise √† jour de l'agent de validation: $agent_file" | tee -a "$INTERFACES_LOG"
  
  # V√©rifier si le fichier impl√©mente d√©j√† une interface
  if grep -q "implements" "$agent_file"; then
    echo "  ‚úì D√©j√† impl√©ment√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Extraire le nom de la classe
  class_name=$(grep -oP "(?<=class\s+)(\w+)" "$agent_file" | head -1)
  
  if [ -z "$class_name" ]; then
    echo "  ‚ö†Ô∏è Pas de classe trouv√©e, ignor√©" | tee -a "$INTERFACES_LOG"
    continue
  fi
  
  # Ajouter l'import de l'interface
  sed -i '1s/^/import { ValidatorAgent } from "..\/..\/interfaces\/validator\/validator-agent";\n/' "$agent_file"
  
  # Ajouter l'impl√©mentation de l'interface
  sed -i "s/class $class_name/class $class_name implements ValidatorAgent/" "$agent_file"
  
  # V√©rifier si les propri√©t√©s et m√©thodes obligatoires sont pr√©sentes
  if ! grep -q "name\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  name = \"$class_name\";" "$agent_file"
  fi
  
  if ! grep -q "version\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  version = \"1.0.0\";" "$agent_file"
  fi
  
  if ! grep -q "domain\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  domain = \"validation\";" "$agent_file"
  fi
  
  if ! grep -q "capabilities\s*=" "$agent_file"; then
    sed -i "/class $class_name/a \  capabilities = [\"validate\"];" "$agent_file"
  fi
  
  # Ajouter la m√©thode getSummary si elle n'existe pas
  if ! grep -q "getSummary" "$agent_file"; then
    sed -i "/class $class_name/a \  getSummary(): string {\n    return \`\${this.name} v\${this.version} - Agent de validation\`;\n  }" "$agent_file"
  fi
  
  # Ajouter la m√©thode validate si elle n'existe pas
  if ! grep -q "validate" "$agent_file"; then
    sed -i "/class $class_name/a \  async validate(input: Record<string, any>): Promise<Record<string, any>> {\n    return await this.execute(input);\n  }" "$agent_file"
  fi
  
  echo "  ‚úÖ Interface impl√©ment√©e" | tee -a "$INTERFACES_LOG"
done

echo "‚úÖ Impl√©mentation des interfaces termin√©e"
echo "üìã Journal d'impl√©mentation : $INTERFACES_LOG"