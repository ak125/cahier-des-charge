{
  "name": "SQL Analyzer & Prisma Builder Workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 1,
              "unit": "days"
            }
          ]
        }
      },
      "name": "Déclencheur Planifié",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analyze-sql-prisma",
        "options": {
          "responseMode": "lastNode",
          "responseCode": 200
        }
      },
      "name": "Déclencheur Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 450]
    },
    {
      "parameters": {
        "functionCode": "// Configuration de l'analyse\nconst config = {\n  databaseName: $input.body?.databaseName || 'application_db',\n  connectionString: $input.body?.connectionString || process.env.DATABASE_URL,\n  outputDir: `/workspaces/cahier-des-charge/reports/sql-audit-${new Date().toISOString().replace(/:/g, '-').split('.')[0]}`,\n  schemaOnly: $input.body?.schemaOnly || true,\n  includeTables: $input.body?.includeTables || [],\n  excludeTables: $input.body?.excludeTables || ['migrations', 'schema_migrations', 'ar_internal_metadata'],\n  generatePrismaSchema: $input.body?.generatePrismaSchema !== false,\n  analyzePerformance: $input.body?.analyzePerformance !== false,\n  // Détails supplémentaires pour le suivi Git\n  gitBranch: $input.body?.gitBranch || 'main',\n  author: $input.body?.author || 'sql-analyzer-agent',\n  commitMessage: $input.body?.commitMessage || 'Audit SQL et génération de modèles Prisma automatisés',\n  timestamp: new Date().toISOString()\n};\n\n// S'assurer que le dossier de sortie existe\nconst mkdirCommand = `mkdir -p ${config.outputDir}`;\n\nreturn {\n  config,\n  mkdirCommand,\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Configurer l'analyse",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "command": "={{ $node[\"Configurer l'analyse\"].json[\"mkdirCommand\"] }}",
        "executeTimeout": 10
      },
      "name": "Créer répertoire de sortie",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && ts-node agents/migration/sql-analyzer+prisma-builder.ts --connection=\"{{ $node[\"Configurer l'analyse\"].json.config.connectionString }}\" --database=\"{{ $node[\"Configurer l'analyse\"].json.config.databaseName }}\" --output-dir=\"{{ $node[\"Configurer l'analyse\"].json.config.outputDir }}\" --schema-only={{ $node[\"Configurer l'analyse\"].json.config.schemaOnly }} --generate-prisma={{ $node[\"Configurer l'analyse\"].json.config.generatePrismaSchema }} --analyze-performance={{ $node[\"Configurer l'analyse\"].json.config.analyzePerformance }}",
        "executeTimeout": 600
      },
      "name": "Exécuter analyse SQL",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "functionCode": "// Vérifier que l'exécution s'est bien déroulée\nconst success = $input.exitCode === 0;\nconst outputDir = $node[\"Configurer l'analyse\"].json.config.outputDir;\n\n// Liste des fichiers générés attendus\nconst expectedFiles = [\n  'mysql_schema_map.json',\n  'sql_analysis.md',\n  'prisma_models.suggestion.prisma',\n  'schema_migration_diff.json',\n  'migration_plan.md',\n  'entity_graph.json',\n  'sql_index_suggestions.sql',\n  'sql_backlog.json'\n];\n\n// Construire la commande pour vérifier l'existence des fichiers\nconst checkFilesCommand = `find ${outputDir} -type f -name \"*.json\" -o -name \"*.md\" -o -name \"*.prisma\" -o -name \"*.sql\" | sort`;\n\n// Préparer la commande Git si nécessaire\nlet gitCommands = [];\nif (success) {\n  gitCommands = [\n    `cd /workspaces/cahier-des-charge`,\n    `git checkout -b audit-sql-${new Date().toISOString().slice(0, 10)}`,\n    `git add ${outputDir}/*`,\n    `git commit -m \"${$node[\"Configurer l'analyse\"].json.config.commitMessage}\"`,\n    `git push origin audit-sql-${new Date().toISOString().slice(0, 10)}`\n  ];\n}\n\nreturn {\n  success,\n  outputDir,\n  expectedFiles,\n  checkFilesCommand,\n  gitCommands: gitCommands.join(' && ')\n};"
      },
      "name": "Préparer validation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "command": "={{ $node[\"Préparer validation\"].json[\"checkFilesCommand\"] }}",
        "executeTimeout": 30
      },
      "name": "Vérifier fichiers générés",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"Préparer validation\"].json.success }}",
              "operation": "equal",
              "value2": "true"
            }
          ]
        }
      },
      "name": "Si succès",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1250, 450]
    },
    {
      "parameters": {
        "command": "={{ $node[\"Préparer validation\"].json[\"gitCommands\"] }}",
        "executeTimeout": 120
      },
      "name": "Commit dans Git",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1450, 450]
    },
    {
      "parameters": {
        "functionCode": "// Préparer le chemin vers le fichier zip\nconst zipPath = `${$node[\"Configurer l'analyse\"].json.config.outputDir}.zip`;\n\n// Commande pour créer l'archive zip\nconst zipCommand = `cd /workspaces/cahier-des-charge && zip -r ${zipPath} ${$node[\"Configurer l'analyse\"].json.config.outputDir}/*`;\n\nreturn {\n  zipCommand,\n  zipPath,\n  outputDir: $node[\"Configurer l'analyse\"].json.config.outputDir,\n  reportDate: new Date().toLocaleDateString('fr-FR'),\n  filesList: $node[\"Vérifier fichiers générés\"].json.stdout\n};"
      },
      "name": "Préparer notification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "command": "={{ $node[\"Préparer notification\"].json[\"zipCommand\"] }}",
        "executeTimeout": 60
      },
      "name": "Créer archive",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "path": "={{ $node[\"Préparer notification\"].json[\"zipPath\"] }}"
      },
      "name": "Lire archive",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "to": ["equipe-migration@exemple.com"],
        "subject": "Rapport d'audit SQL et modèles Prisma générés - {{ $node[\"Préparer notification\"].json[\"reportDate\"] }}",
        "text": "# Audit SQL et génération de modèles Prisma\n\nL'analyse SQL et la génération des modèles Prisma ont été effectuées avec succès.\n\n## Détails\n- **Base de données**: {{ $node[\"Configurer l'analyse\"].json.config.databaseName }}\n- **Dossier de résultats**: {{ $node[\"Préparer notification\"].json[\"outputDir\"] }}\n- **Date d'analyse**: {{ $node[\"Configurer l'analyse\"].json[\"timestamp\"] }}\n\n## Fichiers générés\n```\n{{ $node[\"Vérifier fichiers générés\"].json[\"stdout\"] }}\n```\n\n## Résumé des actions\n1. ✅ Carte des tables et colonnes générée (mysql_schema_map.json)\n2. ✅ Rapport d'audit technique généré (sql_analysis.md)\n3. ✅ Modèles Prisma proposés (prisma_models.suggestion.prisma)\n4. ✅ Plan de migration SQL/Prisma (schema_migration_diff.json)\n5. ✅ Liste des actions à réaliser (migration_plan.md)\n6. ✅ Graphe relationnel visualisable (entity_graph.json)\n7. ✅ Suggestions d'index et performances (sql_index_suggestions.sql)\n8. ✅ Backlog technique SQL (sql_backlog.json)\n\n## Accès aux résultats\nVous pouvez accéder aux résultats complets via :\n- Le dossier partagé : {{ $node[\"Préparer notification\"].json[\"outputDir\"] }}\n- L'archive jointe à cet email\n- La branche Git créée : audit-sql-{{ $node[\"Configurer l'analyse\"].json[\"timestamp\"].slice(0, 10) }}\n\nMerci d'examiner ces résultats et de planifier les actions nécessaires pour la migration vers Prisma.",
        "options": {
          "attachments": "={{ $node[\"Lire archive\"].binary }}"
        }
      },
      "name": "Envoyer notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "url": "https://hooks.slack.com/services/TXXXXXX/BXXXXXX/XXXXXXXX",
        "jsonParameters": true,
        "options": {},
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "✅ Audit SQL et génération des modèles Prisma terminés !\n\nLes fichiers ont été générés dans {{ $node[\"Préparer notification\"].json[\"outputDir\"] }} et une notification par email a été envoyée."
            }
          ]
        }
      },
      "name": "Notifier sur Slack",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2200, 300]
    },
    {
      "parameters": {
        "functionCode": "// Générer un résumé pour l'API\nconst filesGenerated = $node[\"Vérifier fichiers générés\"].json.stdout.split('\\n').filter(f => f.trim() !== '');\n\nconst summary = {\n  success: $node[\"Préparer validation\"].json.success,\n  timestamp: $node[\"Configurer l'analyse\"].json.timestamp,\n  database: $node[\"Configurer l'analyse\"].json.config.databaseName,\n  outputDirectory: $node[\"Configurer l'analyse\"].json.config.outputDir,\n  filesGenerated: filesGenerated,\n  gitBranch: `audit-sql-${new Date().toISOString().slice(0, 10)}`,\n  emailSent: true,\n  slackNotified: true\n};\n\n// Préparer la commande pour sauvegarder le résumé\nconst summaryPath = `${$node[\"Configurer l'analyse\"].json.config.outputDir}/execution_summary.json`;\nconst summaryCommand = `echo '${JSON.stringify(summary, null, 2)}' > ${summaryPath}`;\n\nreturn {\n  summary,\n  summaryCommand,\n  summaryPath\n};"
      },
      "name": "Générer résumé",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 450]
    },
    {
      "parameters": {
        "command": "={{ $node[\"Générer résumé\"].json[\"summaryCommand\"] }}",
        "executeTimeout": 10
      },
      "name": "Sauvegarder résumé",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [2200, 450]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            }
          ],
          "object": [
            {
              "name": "summary",
              "value": "={{ $node[\"Générer résumé\"].json.summary }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Préparer réponse API",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [2400, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"Exécuter analyse SQL\"].json[\"exitCode\"] }}",
              "operation": "notEqual",
              "value2": "0"
            }
          ]
        }
      },
      "name": "Si échec",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 600]
    },
    {
      "parameters": {
        "url": "https://hooks.slack.com/services/TXXXXXX/BXXXXXX/XXXXXXXX",
        "jsonParameters": true,
        "options": {},
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "⚠️ Erreur lors de l'audit SQL et de la génération des modèles Prisma :\n```\n{{ $node[\"Exécuter analyse SQL\"].json[\"stderr\"] }}\n```"
            }
          ]
        }
      },
      "name": "Alerter sur Slack (Erreur)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [1250, 600]
    },
    {
      "parameters": {
        "to": ["equipe-migration@exemple.com"],
        "subject": "⚠️ ERREUR: Audit SQL et Prisma - {{ $node[\"Configurer l'analyse\"].json[\"timestamp\"] }}",
        "text": "# ⚠️ Erreur lors de l'audit SQL et de la génération des modèles Prisma\n\nUne erreur s'est produite lors de l'exécution de l'analyse SQL ou de la génération des modèles Prisma.\n\n## Détails\n- **Base de données**: {{ $node[\"Configurer l'analyse\"].json.config.databaseName }}\n- **Dossier de résultats**: {{ $node[\"Configurer l'analyse\"].json.config.outputDir }}\n- **Date de tentative**: {{ $node[\"Configurer l'analyse\"].json[\"timestamp\"] }}\n\n## Message d'erreur\n```\n{{ $node[\"Exécuter analyse SQL\"].json[\"stderr\"] }}\n```\n\n## Résultat de l'exécution\n```\n{{ $node[\"Exécuter analyse SQL\"].json[\"stdout\"] }}\n```\n\nMerci d'examiner cette erreur et de relancer l'analyse après correction."
      },
      "name": "Envoyer notification d'erreur",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [1450, 600]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "status",
              "value": "error"
            },
            {
              "name": "message",
              "value": "={{ $node[\"Exécuter analyse SQL\"].json[\"stderr\"] }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Préparer réponse d'erreur",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1650, 600]
    }
  ],
  "connections": {
    "Déclencheur Planifié": {
      "main": [
        [
          {
            "node": "Configurer l'analyse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Déclencheur Webhook": {
      "main": [
        [
          {
            "node": "Configurer l'analyse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configurer l'analyse": {
      "main": [
        [
          {
            "node": "Créer répertoire de sortie",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Créer répertoire de sortie": {
      "main": [
        [
          {
            "node": "Exécuter analyse SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exécuter analyse SQL": {
      "main": [
        [
          {
            "node": "Préparer validation",
            "type": "main",
            "index": 0
          },
          {
            "node": "Si échec",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer validation": {
      "main": [
        [
          {
            "node": "Vérifier fichiers générés",
            "type": "main",
            "index": 0
          },
          {
            "node": "Si succès",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vérifier fichiers générés": {
      "main": [
        [
          {
            "node": "Préparer notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Si succès": {
      "main": [
        [
          {
            "node": "Commit dans Git",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Commit dans Git": {
      "main": [
        [
          {
            "node": "Générer résumé",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer notification": {
      "main": [
        [
          {
            "node": "Créer archive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Créer archive": {
      "main": [
        [
          {
            "node": "Lire archive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lire archive": {
      "main": [
        [
          {
            "node": "Envoyer notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envoyer notification": {
      "main": [
        [
          {
            "node": "Notifier sur Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notifier sur Slack": {
      "main": [
        [
          {
            "node": "Préparer réponse API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Générer résumé": {
      "main": [
        [
          {
            "node": "Sauvegarder résumé",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sauvegarder résumé": {
      "main": [
        [
          {
            "node": "Préparer réponse API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Si échec": {
      "main": [
        [
          {
            "node": "Alerter sur Slack (Erreur)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alerter sur Slack (Erreur)": {
      "main": [
        [
          {
            "node": "Envoyer notification d'erreur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Envoyer notification d'erreur": {
      "main": [
        [
          {
            "node": "Préparer réponse d'erreur",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "migration-error-handler"
  },
  "tags": ["sql", "analyze", "migration", "database", "prisma", "audit"],
  "versionId": "a5cb47a6-bfac-4f7f-952a-90ae1bd9dff9"
}
