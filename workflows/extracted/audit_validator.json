{
  "id": "audit-validator",
  "name": "Audit Validator",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 30,
              "unit": "minutes"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [100, 200]
    },
    {
      "parameters": {
        "functionCode": "// Exécute le script de validation des audits\nconst { spawnSync } = require('child_process');\n\nconst result = spawnSync('npx', ['ts-node', '/workspaces/cahier-des-charge/utils/validate-audit-outputs.ts', '--verbose'], {\n  encoding: 'utf8',\n  cwd: '/workspaces/cahier-des-charge'\n});\n\nif (result.error) {\n  throw new Error(`Erreur d'exécution: ${result.error.message}`);\n}\n\nlet validationReport;\ntry {\n  validationReport = require('/workspaces/cahier-des-charge/reports/audit_consistency_report.json');\n} catch (err) {\n  throw new Error(`Impossible de lire le rapport de validation: ${err.message}`);\n}\n\n// Ajouter des métadonnées pour la notification\nconst hasIssues = validationReport.missingFiles.length > 0 || \n                 validationReport.inconsistentFields.length > 0 || \n                 validationReport.duplicateAnalyses.length > 0;\n\nreturn {\n  json: {\n    validationReport,\n    timestamp: new Date().toISOString(),\n    hasIssues,\n    issueCount: validationReport.missingFiles.length + \n                validationReport.inconsistentFields.length + \n                validationReport.duplicateAnalyses.length,\n    summary: {\n      missingFiles: validationReport.missingFiles.length,\n      inconsistentFields: validationReport.inconsistentFields.length,\n      duplicateAnalyses: validationReport.duplicateAnalyses.length\n    }\n  }\n};"
      },
      "name": "Run Audit Validation",
      "type": "n8n-nodes-base.function",
      "position": [300, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.hasIssues }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Has Issues?",
      "type": "n8n-nodes-base.if",
      "position": [500, 200]
    },
    {
      "parameters": {
        "functionCode": "// Exécute le script de correction automatique\nconst { spawnSync } = require('child_process');\n\nconst result = spawnSync('npx', ['ts-node', '/workspaces/cahier-des-charge/utils/recheck-missing-outputs.ts', '--force'], {\n  encoding: 'utf8',\n  cwd: '/workspaces/cahier-des-charge'\n});\n\nif (result.error) {\n  throw new Error(`Erreur d'exécution: ${result.error.message}`);\n}\n\nlet recheckReport;\ntry {\n  recheckReport = require('/workspaces/cahier-des-charge/reports/recheck_report.json');\n} catch (err) {\n  throw new Error(`Impossible de lire le rapport de retraitement: ${err.message}`);\n}\n\nreturn {\n  json: {\n    ...recheckReport,\n    timestamp: new Date().toISOString(),\n    output: result.stdout,\n    summary: {\n      successful: recheckReport.successful.length,\n      failed: recheckReport.failed.length,\n      notFound: recheckReport.notFound.length\n    }\n  }\n};"
      },
      "name": "Auto-Fix Issues",
      "type": "n8n-nodes-base.function",
      "position": [700, 140]
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "⚠️ *Problèmes détectés dans les audits*\n\n*Résumé:*\n- Fichiers manquants: {{ $json.summary.missingFiles }}\n- Champs incohérents: {{ $json.summary.inconsistentFields }}\n- Analyses en double: {{ $json.summary.duplicateAnalyses }}\n\n[Voir le tableau de bord](http://localhost:3000/audit-dashboard)\n\nLe processus de correction automatique a été déclenché.",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": false
        }
      },
      "name": "Send Alert",
      "type": "n8n-nodes-base.telegram",
      "position": [900, 140]
    },
    {
      "parameters": {
        "path": "/workspaces/cahier-des-charge/reports/latest_validation_status.json",
        "options": {
          "encoding": "utf8",
          "createPath": true
        }
      },
      "name": "Save Status",
      "type": "n8n-nodes-base.writeBinaryFile",
      "position": [700, 300]
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "✅ *Validation des audits terminée*\n\nTous les fichiers d'audit sont cohérents et à jour.\n\n[Voir le tableau de bord](http://localhost:3000/audit-dashboard)",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": true
        }
      },
      "name": "Send Success",
      "type": "n8n-nodes-base.telegram",
      "position": [900, 300]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Run Audit Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Audit Validation": {
      "main": [
        [
          {
            "node": "Has Issues?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Issues?": {
      "main": [
        [
          {
            "node": "Auto-Fix Issues",
            "type": "main",
            "index": 0
          },
          {
            "node": "Save Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-Fix Issues": {
      "main": [
        [
          {
            "node": "Send Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Status": {
      "main": [
        [
          {
            "node": "Send Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
