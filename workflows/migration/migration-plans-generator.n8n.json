{
  "name": "Generate Migration Plans Workflow",
  "nodes": [
    {
      "parameters": {
        "path": "={{ $json.phpDirectory }}",
        "options": {
          "include": ["**/*.php"],
          "exclude": ["**/vendor/**", "**/node_modules/**"]
        }
      },
      "name": "Find PHP Files",
      "type": "n8n-nodes-base.fileSearch",
      "id": "1",
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// Processeur pour analyser les fichiers PHP et prÃ©parer les data pour la gÃ©nÃ©ration\nreturn items.map(item => {\n  const filePath = item.json.path;\n  const fileName = filePath.split('/').pop();\n  \n  return {\n    json: {\n      filePath,\n      fileName,\n      command: `cd ${workflow.settings.scriptsPath} && ts-node generate-migration-plan.ts \"${filePath}\" --export-all`,\n      outputDir: workflow.settings.outputPath || 'migration-plans',\n      timestamp: new Date().toISOString()\n    }\n  };\n});"
      },
      "name": "Prepare Migration Commands",
      "type": "n8n-nodes-base.function",
      "id": "2",
      "position": [450, 300]
    },
    {
      "parameters": {
        "command": "={{ $json.command }}",
        "executeInLine": false
      },
      "name": "Execute Generate Commands",
      "type": "n8n-nodes-base.executeCommand",
      "id": "3",
      "position": [650, 300]
    },
    {
      "parameters": {
        "functionCode": "// Processeur des rÃ©sultats pour extraire les mÃ©triques\nconst results = [];\n\nfor (const item of items) {\n  try {\n    // Extraction des informations clÃ©s des rÃ©sultats\n    const output = item.json.stdout;\n    const fileName = item.json.fileName;\n    \n    // Rechercher les informations clÃ©s dans la sortie\n    const waveMatch = output.match(/Vague (\\d+)/);\n    const scoreMatch = output.match(/Score global migration : ([ðŸŒŸ]+)/);\n    const typeMatch = output.match(/Type : ([^\\n]+)/);\n    \n    const wave = waveMatch ? parseInt(waveMatch[1]) : 0;\n    const score = scoreMatch ? scoreMatch[1].length : 0;\n    const type = typeMatch ? typeMatch[1].trim() : 'Inconnu';\n    \n    // PrioritÃ© basÃ©e sur le score\n    let priority = 'Basse';\n    if (score >= 5) priority = 'Critique';\n    else if (score >= 4) priority = 'Ã‰levÃ©e';\n    else if (score >= 3) priority = 'Moyenne';\n    \n    results.push({\n      json: {\n        fileName,\n        wave,\n        score,\n        type,\n        priority,\n        success: true,\n        timestamp: item.json.timestamp,\n        outputPath: `${item.json.outputDir}/${fileName.replace('.php', '.migration_plan.md')}`\n      }\n    });\n  } catch (error) {\n    // En cas d'erreur, ajouter une entrÃ©e d'Ã©chec\n    results.push({\n      json: {\n        fileName: item.json.fileName,\n        success: false,\n        error: error.message,\n        timestamp: item.json.timestamp\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "name": "Process Results",
      "type": "n8n-nodes-base.function",
      "id": "4",
      "position": [850, 300]
    },
    {
      "parameters": {
        "table": "migration_plans",
        "columns": {
          "fileName": "={{ $json.fileName }}",
          "wave": "={{ $json.wave }}",
          "score": "={{ $json.score }}",
          "type": "={{ $json.type }}",
          "priority": "={{ $json.priority }}",
          "success": "={{ $json.success }}",
          "timestamp": "={{ $json.timestamp }}",
          "outputPath": "={{ $json.outputPath }}"
        }
      },
      "name": "Store in Supabase",
      "type": "n8n-nodes-base.supabase",
      "id": "5",
      "position": [1050, 300],
      "credentials": {
        "supabaseApi": {
          "id": "1",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "phpDirectory",
              "value": "/path/to/php/sources"
            }
          ]
        },
        "options": {}
      },
      "name": "Workflow Data",
      "type": "n8n-nodes-base.set",
      "id": "6",
      "position": [50, 300]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 1,
              "unit": "week"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.cron",
      "id": "7",
      "position": [50, 500]
    },
    {
      "parameters": {},
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "webhookId": "migration-plan-generation",
      "id": "8",
      "position": [50, 100]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Successful Only",
      "type": "n8n-nodes-base.if",
      "id": "9",
      "position": [1050, 500]
    },
    {
      "parameters": {
        "fromEmail": "migration-bot@fafa.com",
        "toEmail": "={{ $json.notificationEmail || 'admin@fafa.com' }}",
        "subject": "Rapport de gÃ©nÃ©ration des plans de migration",
        "text": "=La gÃ©nÃ©ration des plans de migration est terminÃ©e.\n\n- Nombre total de fichiers traitÃ©s: {{ $json.totalFiles }}\n- SuccÃ¨s: {{ $json.successCount }}\n- Ã‰checs: {{ $json.errorCount }}\n\nLes plans de migration sont disponibles ici: {{ $json.outputDir }}\n\nMerci,\nVotre bot de migration PHP â†’ NestJS/Remix"
      },
      "name": "Send Email",
      "type": "n8n-nodes-base.emailSend",
      "id": "10",
      "position": [1250, 500],
      "credentials": {
        "smtp": {
          "id": "1",
          "name": "SMTP Account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// GÃ©nÃ©rer un rapport de synthÃ¨se\nconst successCount = items.filter(item => item.json.success).length;\nconst errorCount = items.length - successCount;\n\nreturn [{\n  json: {\n    totalFiles: items.length,\n    successCount,\n    errorCount,\n    outputDir: items[0]?.json.outputDir || 'migration-plans',\n    timestamp: new Date().toISOString(),\n    notificationEmail: workflow.settings.notificationEmail || 'admin@fafa.com'\n  }\n}];"
      },
      "name": "Generate Summary",
      "type": "n8n-nodes-base.function",
      "id": "11",
      "position": [1050, 700]
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "={{ $json.outputDir.split('/').pop() }}",
        "filePathUpload": "={{ $json.outputDir }}",
        "filePathS3": "={{ $json.outputDir.split('/').pop() }}",
        "options": {
          "makePublic": true
        }
      },
      "name": "Upload to S3",
      "type": "n8n-nodes-base.s3",
      "id": "12",
      "position": [1250, 700],
      "credentials": {
        "s3": {
          "id": "1",
          "name": "S3 Account"
        }
      }
    }
  ],
  "connections": {
    "Find PHP Files": {
      "main": [
        [
          {
            "node": "Prepare Migration Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Migration Commands": {
      "main": [
        [
          {
            "node": "Execute Generate Commands",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Generate Commands": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Store in Supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "Successful Only",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Data": {
      "main": [
        [
          {
            "node": "Find PHP Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Workflow Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Successful Only": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store in Supabase": {
      "main": [
        [
          {
            "node": "Generate Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Summary": {
      "main": [
        [
          {
            "node": "Upload to S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "saveExecutionProgress": true,
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "timezone": "Europe/Paris",
    "customVariables": {
      "scriptsPath": "/workspaces/cahier-des-charge/scripts/migration",
      "outputPath": "/workspaces/cahier-des-charge/migration-plans",
      "notificationEmail": "team@fafa.com"
    }
  },
  "staticData": null,
  "tags": [
    {
      "name": "migration"
    },
    {
      "name": "php"
    },
    {
      "name": "nestjs"
    },
    {
      "name": "remix"
    }
  ],
  "id": "1000"
}
