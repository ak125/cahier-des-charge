version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: migration-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: migration
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-migration_password}
      POSTGRES_DB: migration_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "migration"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis pour le cache et les sessions
  redis:
    image: redis:alpine
    container_name: migration-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # n8n pour l'orchestration des workflows
  n8n:
    image: n8nio/n8n:latest
    container_name: migration-n8n
    restart: unless-stopped
    environment:
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_HOST=${N8N_HOST:-localhost}
      - NODE_ENV=production
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-a_random_encryption_key}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=migration
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-migration_password}
      - EXECUTIONS_PROCESS=main
      - WEBHOOK_URL=http://${N8N_HOST:-localhost}:5678/
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./tools/agents:/home/node/agents
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # CodeServer pour l'édition de code et l'exécution des agents
  code-server:
    image: codercom/code-server:latest
    container_name: migration-code-server
    restart: unless-stopped
    environment:
      - PASSWORD=${CODE_SERVER_PASSWORD:-code_password}
      - DOCKER_USER=coder
    ports:
      - "8080:8080"
    volumes:
      - code_server_data:/home/coder/.local/share/code-server
      - ./:/home/coder/project
    command: --auth password --host 0.0.0.0 /home/coder/project

  # Service pour l'interface utilisateur du pipeline de migration
  migration-ui:
    image: node:20-alpine
    container_name: migration-ui
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./dashboard:/app
    ports:
      - "3000:3000"
    command: sh -c "npm install && npm run dev"
    environment:
      - N8N_API_URL=http://n8n:5678/api/
      - POSTGRES_CONNECTION=postgresql://migration:${POSTGRES_PASSWORD:-migration_password}@postgres:5432/migration_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - n8n
      - postgres
      - redis

  # Base de données MySQL (legacy)
  mysql-legacy:
    image: mysql:8.0
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_legacy_data:/var/lib/mysql
      - ./scripts/mysql/init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-legacy_app}
      MYSQL_USER: ${MYSQL_USER:-app_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-app_password}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-password}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - migration-network
    labels:
      - "mcp.service=mysql-legacy"
      - "mcp.type=database"
      - "mcp.stage=source"

  # Base de données PostgreSQL (cible intermédiaire)
  postgres-intermediate:
    image: postgres:15-alpine
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_intermediate_data:/var/lib/postgresql/data
      - ./scripts/postgres/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-app_migration}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-app_migration}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - migration-network
    labels:
      - "mcp.service=postgres-intermediate"
      - "mcp.type=database"
      - "mcp.stage=intermediate"

  # Serveur MCP pour MySQL
  mcp-server-mysql:
    build:
      context: ./apps/mcp-server-mysql
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${MCP_MYSQL_PORT:-3002}:3000"
    volumes:
      - ./apps/mcp-server-mysql:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      DATABASE_URL: mysql://${MYSQL_USER:-app_user}:${MYSQL_PASSWORD:-app_password}@mysql-legacy:3306/${MYSQL_DATABASE:-legacy_app}
      MCP_SERVER_ID: mysql-source
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      mysql-legacy:
        condition: service_healthy
    networks:
      - migration-network
    labels:
      - "mcp.service=mcp-server-mysql"
      - "mcp.type=agent"
      - "mcp.stage=source"

  # Serveur MCP pour PostgreSQL
  mcp-server-postgres:
    build:
      context: ./apps/mcp-server-postgres
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${MCP_POSTGRES_PORT:-3003}:3000"
    volumes:
      - ./apps/mcp-server-postgres:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-intermediate:5432/${POSTGRES_DB:-app_migration}
      MCP_SERVER_ID: postgres-target
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres-intermediate:
        condition: service_healthy
    networks:
      - migration-network
    labels:
      - "mcp.service=mcp-server-postgres"
      - "mcp.type=agent"
      - "mcp.stage=target"

  # Service d'analyse et transformation du code PHP vers NestJS/Remix
  code-transformer:
    build:
      context: ./agents/migration
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${CODE_TRANSFORMER_PORT:-3004}:3000"
    volumes:
      - ./agents/migration:/app
      - ./src:/app/src
      - ./apps/frontend:/app/target
      - /app/node_modules
    environment:
      NODE_ENV: development
      MCP_MYSQL_URL: http://mcp-server-mysql:3000
      MCP_POSTGRES_URL: http://mcp-server-postgres:3000
      N8N_WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://n8n:5678/webhook/transformer}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SOURCE_DIR: /app/src
      TARGET_DIR: /app/target
    depends_on:
      - mcp-server-mysql
      - mcp-server-postgres
    networks:
      - migration-network
    labels:
      - "mcp.service=code-transformer"
      - "mcp.type=agent"
      - "mcp.stage=transformation"

  # Outil de génération de schéma Prisma
  prisma-generator:
    build:
      context: ./tools/prisma-generator
      dockerfile: Dockerfile
    restart: "no"
    volumes:
      - ./tools/prisma-generator:/app
      - ./apps/frontend/prisma:/app/output
      - /app/node_modules
    environment:
      DATABASE_URL_SOURCE: mysql://${MYSQL_USER:-app_user}:${MYSQL_PASSWORD:-app_password}@mysql-legacy:3306/${MYSQL_DATABASE:-legacy_app}
      DATABASE_URL_TARGET: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-intermediate:5432/${POSTGRES_DB:-app_migration}
      SCHEMA_MAP_PATH: /app/schema_map.json
      OUTPUT_DIR: /app/output
    depends_on:
      - mcp-server-mysql
      - mcp-server-postgres
    networks:
      - migration-network
    labels:
      - "mcp.service=prisma-generator"
      - "mcp.type=tool"
      - "mcp.stage=schema-generation"

  # Adminer pour visualisation des bases de données
  adminer:
    image: adminer:latest
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: mysql-legacy
      ADMINER_DESIGN: pepa-linha
      ADMINER_PLUGINS: "tables-filter tinymce"
    networks:
      - migration-network
    labels:
      - "mcp.service=adminer"
      - "mcp.type=tool"
      - "mcp.stage=visualization"

  # Supabase CLI pour interactions avec Supabase
  supabase-cli:
    image: supabase/cli:latest
    restart: "no"
    volumes:
      - ./scripts/supabase:/supabase
      - ~/.supabase:/root/.supabase
    environment:
      SUPABASE_ACCESS_TOKEN: ${SUPABASE_ACCESS_TOKEN}
      SUPABASE_PROJECT_ID: ${SUPABASE_PROJECT_ID}
      SUPABASE_DB_PASSWORD: ${SUPABASE_DB_PASSWORD}
    networks:
      - migration-network
    labels:
      - "mcp.service=supabase-cli"
      - "mcp.type=tool"
      - "mcp.stage=deployment"

networks:
  migration-network:
    driver: bridge
    name: migration-network

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  code_server_data:
  mysql_legacy_data:
    name: mysql_legacy_data
  postgres_intermediate_data:
    name: postgres_intermediate_data
