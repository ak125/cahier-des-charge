import axios from 'axios';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// Interface pour les options de notification Teams
interface TeamsNotificationOptions {
  title?: string;
  themeColor?: string; // Couleur du th√®me pour la carte adaptive
  sections?: {
    title?: string;
    text?: string;
    facts?: {
      name: string;
      value: string;
    }[];
  }[];
  timestamp?: boolean; // Ajouter un timestamp automatiquement
  footer?: string;
  images?: {
    url: string;
    alt?: string;
  }[];
}

/**
 * Envoie une notification √† un webhook Microsoft Teams
 * @param message Le message principal √† envoyer
 * @param options Options suppl√©mentaires pour la notification
 * @param webhookUrl URL du webhook Teams (optionnel, sinon utilise la variable d'environnement)
 * @returns true si la notification a √©t√© envoy√©e avec succ√®s, false sinon
 */
export async function sendTeamsNotification(
  message: string,
  options: TeamsNotificationOptions = {},
  webhookUrl?: string
): Promise<boolean> {
  // R√©cup√©rer l'URL du webhook
  const teamsWebhook = webhookUrl || process.env.TEAMS_WEBHOOK;

  // Si aucune URL de webhook n'est fournie, retourner false
  if (!teamsWebhook) {
    console.warn('‚ö†Ô∏è Aucune URL de webhook Teams configur√©e. Notification ignor√©e.');
    return false;
  }

  try {
    // Pr√©parer les facts pour la carte Teams
    const facts = [];
    if (options.sections) {
      for (const section of options.sections) {
        if (section.facts) {
          facts.push(...section.facts);
        }
      }
    }

    // Pr√©parer la payload pour Teams (format Carte Adaptative)
    const payload = {
      '@type': 'MessageCard',
      '@context': 'http://schema.org/extensions',
      themeColor: options.themeColor || '0076D7', // Bleu par d√©faut
      summary: options.title || 'Notification de Migration',
      title: options.title || 'Pipeline de Migration PHP ‚Üí NestJS + Remix',
      text: message,
      sections: options.sections || [],
      potentialAction: [
        {
          '@type': 'OpenUri',
          name: 'Voir le Projet',
          targets: [
            {
              os: 'default',
              uri: 'https:/DoDoDoDoDoDotgithub.com/votre-organisation/votre-projet',
            },
          ],
        },
      ],
    };

    // Ajouter un timestamp si demand√©
    if (options.timestamp) {
      if (!payload.sections || payload.sections.length === 0) {
        payload.sections = [{}];
      }

      if (!payload.sections[0].facts) {
        payload.sections[0].facts = [];
      }

      payload.sections[0].facts.push({
        name: 'Horodatage',
        value: new Date().toLocaleString(),
      });
    }

    // Ajouter un footer si demand√©
    if (options.footer) {
      if (!payload.sections || payload.sections.length === 0) {
        payload.sections = [{}];
      }

      payload.sections.push({
        text: `<em>${options.footer}</em>`,
      });
    }

    // Envoyer la notification
    const response = await axios.post(teamsWebhook, payload, {
      headers: {
        'Content-Type': 'application/json',
      },
    });

    // V√©rifier si la notification a √©t√© envoy√©e avec succ√®s
    if (response.status === 200) {
      console.log('‚úÖ Notification Teams envoy√©e avec succ√®s.');
      return true;
    }
    console.error(
      `‚ùå Erreur lors de l'envoi de la notification Teams: ${response.status} ${response.statusText}`
    );
    return false;
  } catch (error) {
    console.error("‚ùå Exception lors de l'envoi de la notification Teams:", error);
    return false;
  }
}

/**
 * Envoie une notification de d√©but de migration
 */
export async function sendTeamsMigrationStartNotification(
  sourceDir: string,
  mode: string,
  webhookUrl?: string
): Promise<boolean> {
  return sendTeamsNotification(
    'üöÄ D√©marrage de la migration PHP ‚Üí NestJS + Remix',
    {
      title: 'Migration D√©marr√©e',
      themeColor: '2EB886', // Vert
      sections: [
        {
          facts: [
            {
              name: 'R√©pertoire Source',
              value: sourceDir,
            },
            {
              name: 'Mode',
              value: mode,
            },
            {
              name: '√âtat',
              value: 'En cours',
            },
          ],
        },
      ],
      timestamp: true,
    },
    webhookUrl
  );
}

/**
 * Envoie une notification de progression de migration
 */
export async function sendTeamsMigrationProgressNotification(
  sourceDir: string,
  progress: number, // 0-100
  stats: {
    filesProcessed: number;
    totalFiles: number;
    filesSucceeded: number;
    filesFailed: number;
  },
  webhookUrl?: string
): Promise<boolean> {
  // Cr√©er une barre de progression visuelle
  const progressBar = createProgressBar(progress);

  return sendTeamsNotification(
    `‚è≥ Migration en cours: ${progress.toFixed(1)}% termin√©e`,
    {
      title: 'Progression de la Migration',
      themeColor: 'FFC107', // Jaune
      sections: [
        {
          facts: [
            {
              name: 'R√©pertoire Source',
              value: sourceDir,
            },
            {
              name: 'Progression',
              value: progressBar,
            },
            {
              name: 'Fichiers Trait√©s',
              value: `${stats.filesProcessed}/${stats.totalFiles}`,
            },
            {
              name: 'Succ√®s',
              value: `${stats.filesSucceeded}`,
            },
            {
              name: '√âchecs',
              value: `${stats.filesFailed}`,
            },
          ],
        },
      ],
      timestamp: true,
    },
    webhookUrl
  );
}

/**
 * Envoie une notification de fin de migration
 */
export async function sendTeamsMigrationCompleteNotification(
  sourceDir: string,
  targetDir: string,
  success: boolean,
  stats: {
    duration: number; // en secondes
    filesProcessed: number;
    totalFiles: number;
    filesSucceeded: number;
    filesFailed: number;
  },
  webhookUrl?: string
): Promise<boolean> {
  // Formater la dur√©e
  const duration = formatDuration(stats.duration);

  return sendTeamsNotification(
    success
      ? `‚úÖ Migration termin√©e avec succ√®s en ${duration}`
      : `‚ö†Ô∏è Migration termin√©e avec des probl√®mes en ${duration}`,
    {
      title: success ? 'Migration R√©ussie' : 'Migration Termin√©e avec Avertissements',
      themeColor: success ? '2EB886' : 'FFC107', // Vert ou Orange
      sections: [
        {
          facts: [
            {
              name: 'R√©pertoire Source',
              value: sourceDir,
            },
            {
              name: 'R√©pertoire Cible',
              value: targetDir,
            },
            {
              name: 'Dur√©e',
              value: duration,
            },
            {
              name: 'Fichiers Trait√©s',
              value: `${stats.filesProcessed}/${stats.totalFiles}`,
            },
            {
              name: 'Succ√®s',
              value: `${stats.filesSucceeded}`,
            },
            {
              name: '√âchecs',
              value: `${stats.filesFailed}`,
            },
            {
              name: 'Taux de R√©ussite',
              value: `${((stats.filesSucceeded / stats.totalFiles) * 100).toFixed(1)}%`,
            },
          ],
        },
      ],
      timestamp: true,
    },
    webhookUrl
  );
}

/**
 * Envoie une notification d'erreur de migration
 */
export async function sendTeamsMigrationErrorNotification(
  sourceDir: string,
  error: string,
  webhookUrl?: string
): Promise<boolean> {
  return sendTeamsNotification(
    '‚ùå Erreur lors de la migration PHP ‚Üí NestJS + Remix',
    {
      title: 'Erreur de Migration',
      themeColor: 'E81123', // Rouge
      sections: [
        {
          facts: [
            {
              name: 'R√©pertoire Source',
              value: sourceDir,
            },
            {
              name: 'Erreur',
              value: error,
            },
          ],
        },
      ],
      timestamp: true,
    },
    webhookUrl
  );
}

/**
 * Fonction d'alerte de d√©synchronisation pour Teams
 */
export async function sendTeamsDesyncAlert(
  message: string,
  details: {
    entityType: string;
    entityId: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    source: string;
    target: string;
    timestamp?: Date;
    differences?: Array<{ field: string; sourceValue: any; targetValue: any }>;
  },
  webhookUrl?: string
): Promise<boolean> {
  // D√©terminer la couleur en fonction de la s√©v√©rit√©
  let themeColor = '0076D7'; // Bleu par d√©faut
  switch (details.severity) {
    case 'low':
      themeColor = '2EB886'; // Vert
      break;
    case 'medium':
      themeColor = 'FFC107'; // Jaune
      break;
    case 'high':
      themeColor = 'FF9800'; // Orange
      break;
    case 'critical':
      themeColor = 'E81123'; // Rouge
      break;
  }

  // Pr√©parer les facts avec les diff√©rences
  const facts = [
    {
      name: "Type d'entit√©",
      value: details.entityType,
    },
    {
      name: "ID de l'entit√©",
      value: details.entityId,
    },
    {
      name: 'S√©v√©rit√©',
      value: `${getSeverityEmoji(details.severity)} ${
        details.severity.charAt(0).toUpperCase() + details.severity.slice(1)
      }`,
    },
    {
      name: 'Source',
      value: details.source,
    },
    {
      name: 'Cible',
      value: details.target,
    },
  ];

  // Ajouter les diff√©rences si elles existent
  let differencesText = '';
  if (details.differences && details.differences.length > 0) {
    differencesText = '**Diff√©rences d√©tect√©es:**\n\n';
    details.differences.forEach((diff) => {
      differencesText += `- **${diff.field}**: '${diff.sourceValue}' ‚Üí '${diff.targetValue}'\n`;
    });
  }

  return sendTeamsNotification(
    `üö® ${message}`,
    {
      title: 'Alerte de D√©synchronisation D√©tect√©e',
      themeColor: themeColor,
      sections: [
        {
          facts: facts,
        },
        {
          text: differencesText,
        },
      ],
      timestamp: true,
      footer: 'Alerte g√©n√©r√©e automatiquement par le syst√®me de surveillance de d√©synchronisation',
    },
    webhookUrl
  );
}

/**
 * Fonctions utilitaires
 */

// Cr√©e une barre de progression visuelle pour Teams
function createProgressBar(progress: number): string {
  const filledBar = '‚ñà';
  const emptyBar = '‚ñë';
  const barLength = 20;

  const filledLength = Math.floor((progress / 100) * barLength);
  const emptyLength = barLength - filledLength;

  return `${filledBar.repeat(filledLength)}${
    emptyLength > 0 ? emptyBar.repeat(emptyLength) : ''
  } ${progress.toFixed(1)}%`;
}

// Formate une dur√©e en secondes en format lisible
function formatDuration(seconds: number): string {
  if (seconds < 60) {
    return `${seconds.toFixed(1)} seconde${seconds !== 1 ? 's' : ''}`;
  }

  if (seconds < 3600) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes} minute${minutes !== 1 ? 's' : ''} ${remainingSeconds.toFixed(0)} seconde${
      remainingSeconds !== 1 ? 's' : ''
    }`;
  }

  const hours = Math.floor(seconds / 3600);
  const remainingMinutes = Math.floor((seconds % 3600) / 60);
  return `${hours} heure${hours !== 1 ? 's' : ''} ${remainingMinutes} minute${
    remainingMinutes !== 1 ? 's' : ''
  }`;
}

// Renvoie un emoji repr√©sentant le niveau de s√©v√©rit√©
function getSeverityEmoji(severity: string): string {
  switch (severity) {
    case 'low':
      return 'üü¢';
    case 'medium':
      return 'üü°';
    case 'high':
      return 'üü†';
    case 'critical':
      return 'üî¥';
    default:
      return '‚ö™';
  }
}

// Pour tester l'envoi de notification si ce script est ex√©cut√© directement
if (require.main === module) {
  (async () => {
    // Tester la notification
    const success = await sendTeamsNotification(
      'Ceci est un test de notification Teams depuis le pipeline de migration',
      {
        title: 'Test de Notification Teams',
        themeColor: '0076D7',
        sections: [
          {
            facts: [
              {
                name: 'Test',
                value: 'Valeur de test',
              },
            ],
          },
        ],
        timestamp: true,
      }
    );

    if (success) {
      console.log('‚úÖ Test de notification Teams envoy√© avec succ√®s');
    } else {
      console.error('‚ùå √âchec du test de notification Teams');
    }
  })();
}
