import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join, resolve } from 'path';

interface VerificationResult {
  fileType: string;
  file: string;
  status: 'success' | 'warning' | 'error';
  message: string;
  details?: string[];
}

/**
 * G√©n√®re un rapport de v√©rification au format Markdown
 */
export async function generateVerificationReport(
  results: VerificationResult[],
  config: any
): Promise<string> {
  // Cr√©er le r√©pertoire de logs si n√©cessaire
  const logsDir = resolve(config.paths.logs);
  if (!existsSync(logsDir)) {
    mkdirSync(logsDir, { recursive: true });
  }
  
  // Pr√©parer le chemin du fichier de rapport
  const now = new Date();
  const timestamp = now.toISOString().replace(/:/g, '-').replace(/\..+/, '');
  const reportPath = join(logsDir, `verification-report-${timestamp}.md`);
  
  // G√©n√©rer le contenu du rapport
  let reportContent = `# Rapport de v√©rification du cahier des charges\n\n`;
  reportContent += `*G√©n√©r√© le ${now.toLocaleString()}*\n\n`;
  
  // R√©sum√©
  const totalFiles = new Set(results.map(r => r.file)).size;
  const totalChecks = results.length;
  const successCount = results.filter(r => r.status === 'success').length;
  const warningCount = results.filter(r => r.status === 'warning').length;
  const errorCount = results.filter(r => r.status === 'error').length;
  
  reportContent += `## üìä R√©sum√©\n\n`;
  reportContent += `- **Fichiers v√©rifi√©s**: ${totalFiles}\n`;
  reportContent += `- **V√©rifications effectu√©es**: ${totalChecks}\n`;
  reportContent += `- **R√©sultats**:\n`;
  reportContent += `  - ‚úÖ Succ√®s: ${successCount}\n`;
  reportContent += `  - ‚ö†Ô∏è Avertissements: ${warningCount}\n`;
  reportContent += `  - ‚ùå Erreurs: ${errorCount}\n\n`;
  
  // Regrouper les r√©sultats par type
  const byType = {
    md: results.filter(r => r.fileType === 'md'),
    json: results.filter(r => r.fileType === 'json'),
    ts: results.filter(r => r.fileType === 'ts')
  };
  
  // Ajouter les sections par type de fichier
  reportContent += `## üìÑ Fichiers Markdown\n\n`;
  reportContent += formatResultsSection(byType.md);
  
  reportContent += `## üîß Fichiers JSON\n\n`;
  reportContent += formatResultsSection(byType.json);
  
  reportContent += `## üíª Fichiers TypeScript\n\n`;
  reportContent += formatResultsSection(byType.ts);
  
  // Ajouter les actions recommand√©es
  reportContent += `## üìã Actions recommand√©es\n\n`;
  
  if (errorCount > 0) {
    reportContent += `### Erreurs critiques √† corriger\n\n`;
    results.filter(r => r.status === 'error').forEach(result => {
      reportContent += `- ‚ùå **${result.file}**: ${result.message}\n`;
      if (result.details && result.details.length > 0) {
        result.details.forEach(detail => {
          reportContent += `  - ${detail}\n`;
        });
      }
    });
    reportContent += `\n`;
  }
  
  if (warningCount > 0) {
    reportContent += `### Avertissements √† consid√©rer\n\n`;
    results.filter(r => r.status === 'warning').forEach(result => {
      reportContent += `- ‚ö†Ô∏è **${result.file}**: ${result.message}\n`;
      if (result.details && result.details.length > 0) {
        result.details.forEach(detail => {
          reportContent += `  - ${detail}\n`;
        });
      }
    });
    reportContent += `\n`;
  }
  
  // Conclusion
  reportContent += `## üèÅ Conclusion\n\n`;
  
  if (errorCount === 0 && warningCount === 0) {
    reportContent += `‚úÖ **Excellent!** Aucun probl√®me d√©tect√© dans le cahier des charges.\n`;
  } else if (errorCount === 0) {
    reportContent += `‚ö†Ô∏è **Bien!** Le cahier des charges ne contient pas d'erreurs critiques, mais quelques avertissements √† consid√©rer.\n`;
  } else {
    reportContent += `‚ùå **Attention!** Le cahier des charges contient des erreurs qui doivent √™tre corrig√©es avant de continuer.\n`;
  }
  
  // √âcrire le rapport
  writeFileSync(reportPath, reportContent);
  
  return reportPath;
}

/**
 * Formate une section de r√©sultats pour un type de fichier
 */
function formatResultsSection(results: VerificationResult[]): string {
  if (results.length === 0) {
    return 'Aucun fichier v√©rifi√©.\n\n';
  }
  
  let content = '';
  
  // Extraire les fichiers uniques
  const uniqueFiles = [...new Set(results.map(r => r.file))];
  
  // Regrouper les r√©sultats par fichier
  for (const file of uniqueFiles) {
    const fileResults = results.filter(r => r.file === file);
    const fileSuccess = fileResults.every(r => r.status === 'success');
    const status = fileSuccess ? '‚úÖ' : fileResults.some(r => r.status === 'error') ? '‚ùå' : '‚ö†Ô∏è';
    
    content += `### ${status} ${file}\n\n`;
    
    for (const result of fileResults) {
      const icon = result.status === 'success' ? '‚úÖ' : result.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';
      content += `- ${icon} ${result.message}\n`;
      
      if (result.details && result.details.length > 0) {
        for (const detail of result.details) {
          content += `  - ${detail}\n`;
        }
      }
    }
    
    content += '\n';
  }
  
  return content;
}
