/**
 * SafeMigrationValidator
 * 
 * Validateur principal qui int√®gre tous les niveaux de validation pour s'assurer que
 * le code g√©n√©r√© par IA est s√©curis√©, conforme, et s√©mantiquement correct.
 */

import { securityScanner } from '../scanners/SecurityScanner';
import { complianceVerifier } from '../verifiers/ComplianceVerifier';
import { semanticValidator } from '../validators/SemanticValidator';
import { SafeValidationOptions, ValidationResult, FileType } from '../types';
import * as fs from 'fs';
import * as path from 'path';
import * as crypto from 'crypto';

/**
 * Classe principale pour la validation s√©curis√©e du code g√©n√©r√© par IA
 */
export class SafeMigrationValidator {
    /**
     * Valide un fragment de code selon tous les crit√®res (s√©curit√©, conformit√©, s√©mantique)
     * 
     * @param code Code source √† valider
     * @param options Options de validation
     * @returns true si la validation r√©ussit, false sinon
     */
    async validate(code: string, options: SafeValidationOptions = {}): Promise<boolean> {
        // 1. Scanner de s√©curit√© pour d√©tecter les patterns dangereux
        const securityResult = securityScanner.scan(
            code,
            options.fileType,
            options.path
        );

        // Si le scan de s√©curit√© √©choue, inutile de continuer
        if (!securityResult.success) {
            console.error('√âchec de la validation de s√©curit√©:',
                securityResult.issues.map(i => `[${i.severity}] ${i.message}`).join('\n'));
            return false;
        }

        // 2. V√©rificateur de conformit√© pour assurer le respect des standards
        const complianceResult = complianceVerifier.check(
            code,
            options.fileType,
            options.path
        );

        // Si la v√©rification de conformit√© √©choue, inutile de continuer
        if (!complianceResult.success) {
            console.error('√âchec de la validation de conformit√©:',
                complianceResult.issues.map(i => `[${i.severity}] ${i.message}`).join('\n'));
            return false;
        }

        // 3. Validation s√©mantique pour v√©rifier la coh√©rence du code
        const semanticResult = semanticValidator.verify(
            code,
            options.fileType,
            options.path
        );

        // D√©terminer le r√©sultat final de la validation
        const isValid = securityResult.success &&
            complianceResult.success &&
            semanticResult.success;

        return isValid;
    }

    /**
     * Valide un fichier selon tous les crit√®res (s√©curit√©, conformit√©, s√©mantique)
     * 
     * @param filePath Chemin du fichier √† valider
     * @param options Options de validation
     * @returns true si la validation r√©ussit, false sinon
     */
    async validateFile(filePath: string, options: SafeValidationOptions = {}): Promise<boolean> {
        if (!fs.existsSync(filePath)) {
            console.error(`Fichier non trouv√©: ${filePath}`);
            return false;
        }

        try {
            const content = await fs.promises.readFile(filePath, 'utf8');
            const fileType = path.extname(filePath).substring(1) as FileType;

            // Utiliser les options fournies ou le type de fichier d√©tect√©
            const validationOptions: SafeValidationOptions = {
                ...options,
                path: filePath,
                fileType: options.fileType || fileType
            };

            return this.validate(content, validationOptions);
        } catch (error) {
            console.error(`Erreur lors de la validation du fichier ${filePath}:`, error);
            return false;
        }
    }

    /**
     * Obtient un r√©sultat d√©taill√© de validation pour un fragment de code
     * 
     * @param code Code source √† valider
     * @param options Options de validation
     * @returns R√©sultat d√©taill√© de la validation
     */
    async getDetailedValidation(code: string, options: SafeValidationOptions = {}): Promise<{
        security: ValidationResult;
        compliance: ValidationResult;
        semantic: ValidationResult;
        success: boolean;
    }> {
        // Ex√©cuter toutes les validations
        const securityResult = securityScanner.scan(code, options.fileType, options.path);
        const complianceResult = complianceVerifier.check(code, options.fileType, options.path);
        const semanticResult = semanticValidator.verify(code, options.fileType, options.path);

        // D√©terminer le r√©sultat global
        const isValid = securityResult.success &&
            complianceResult.success &&
            semanticResult.success;

        return {
            security: securityResult,
            compliance: complianceResult,
            semantic: semanticResult,
            success: isValid
        };
    }

    /**
     * Valide un fragment de code et retourne un rapport format√© des probl√®mes d√©tect√©s
     * 
     * @param code Code source √† valider
     * @param options Options de validation
     * @returns Rapport format√© de validation
     */
    async getValidationReport(code: string, options: SafeValidationOptions = {}): Promise<{
        success: boolean;
        report: string;
        codeHash: string;
        timestamp: string;
    }> {
        const results = await this.getDetailedValidation(code, options);

        // G√©n√©rer un hash du code pour tra√ßabilit√©
        const codeHash = crypto.createHash('sha256').update(code).digest('hex');

        // Collecter tous les probl√®mes
        const allIssues = [
            ...results.security.issues,
            ...results.compliance.issues,
            ...results.semantic.issues
        ].sort((a, b) => {
            // Trier par gravit√© (du plus critique au moins critique)
            const severityOrder = { critical: 4, error: 3, warning: 2, info: 1 };
            return severityOrder[b.severity] - severityOrder[a.severity];
        });

        // Construire le rapport
        let report = `# Rapport de validation de code\n\n`;
        report += `* **Timestamp**: ${new Date().toISOString()}\n`;
        report += `* **Hash du code**: ${codeHash}\n`;
        report += `* **R√©sultat**: ${results.success ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}\n\n`;

        report += `## R√©sum√©\n\n`;
        report += `* Validation de s√©curit√©: ${results.security.success ? '‚úÖ R√©ussite' : '‚ùå √âchec'} (${results.security.issues.length} probl√®mes)\n`;
        report += `* Validation de conformit√©: ${results.compliance.success ? '‚úÖ R√©ussite' : '‚ùå √âchec'} (${results.compliance.issues.length} probl√®mes)\n`;
        report += `* Validation s√©mantique: ${results.semantic.success ? '‚úÖ R√©ussite' : '‚ùå √âchec'} (${results.semantic.issues.length} probl√®mes)\n\n`;

        if (allIssues.length > 0) {
            report += `## Probl√®mes d√©tect√©s\n\n`;

            report += `| S√©v√©rit√© | Cat√©gorie | R√®gle | Message |\n`;
            report += `| --- | --- | --- | --- |\n`;

            allIssues.forEach(issue => {
                const severitySymbol = {
                    critical: 'üî¥',
                    error: '‚ùå',
                    warning: '‚ö†Ô∏è',
                    info: '‚ÑπÔ∏è'
                }[issue.severity] || '‚ö†Ô∏è';

                report += `| ${severitySymbol} ${issue.severity} | ${issue.category} | ${issue.rule} | ${issue.message} |\n`;
            });

            report += `\n`;
        }

        return {
            success: results.success,
            report,
            codeHash,
            timestamp: new Date().toISOString()
        };
    }

    /**
     * M√©thode statique pour validation rapide de code
     * 
     * @param code Code source √† valider
     * @returns true si la validation r√©ussit, false sinon
     */
    static async validate(code: string): Promise<boolean> {
        return securityScanner.scan(code).success &&
            complianceVerifier.check(code).success &&
            semanticValidator.verify(code).success;
    }
}

// Export de l'instance par d√©faut du validateur
export const safeMigrationValidator = new SafeMigrationValidator();