/**
 * Exemple d'utilisation de l'agent SEO intelligent avec m√©moire
 * 
 * Cet exemple d√©montre comment initialiser et utiliser le SmartSeoCheckerAgent
 * avec ses capacit√©s de m√©moire pour l'analyse SEO et l'apprentissage.
 */

import { SmartSeoCheckerAgent } from ..@cahier-des-charge/business/src/agents/seo/smart-seo-checker-agent';

/**
 * Fonction principale d'exemple
 */
async function run() {
    console.log('=== D√âMARRAGE DE L\'EXEMPLE D\'AGENT SEO INTELLIGENT ===');

    // Cr√©er l'agent SEO intelligent
    const agent = new SmartSeoCheckerAgent({
        name: 'SEO Analyzer Pro',
        version: '1.0.0',

        // Configuration de la m√©moire
        memory: {
            storeNamePrefix: 'seo-agent',

            // Configuration de la m√©moire √† court terme
            shortTerm: {
                enabled: true,
                ttl: 60 * 60 * 1000 // 1 heure
            },

            // Configuration de la m√©moire √† long terme
            longTerm: {
                enabled: true,
                mode: 'json',
                storagePath: './.memo-storage',
                vectorIndexing: false // Activer pour la recherche s√©mantique
            },

            // Configuration de la tra√ßabilit√©
            tracing: {
                enabled: true,
                detailLevel: 'standard'
            }
        },

        // Configuration sp√©cifique au SEO
        config: {
            maxDepth: 2,
            maxUrls: 20,
            keywords: ['mcp', 'seo', 'analysis'],
            enableLearning: true
        }
    });

    // Initialiser l'agent (inclut l'initialisation de la m√©moire)
    await agent.initialize();
    console.log('‚úÖ Agent SEO intelligent initialis√©');

    try {
        // Premier site √† v√©rifier
        console.log('\nüîç ANALYSE DU PREMIER SITE...');
        const firstResult = await agent.checkSite('https://example.com');

        console.log(`Site v√©rifi√©: ${firstResult.baseUrl}`);
        console.log(`URLs v√©rifi√©es: ${firstResult.urlsChecked}`);
        console.log(`Score moyen: ${firstResult.averageScore.toFixed(2)}/100`);
        console.log(`Top probl√®mes: ${firstResult.topIssues.length}`);

        // Attendre un moment pour simuler le passage du temps
        console.log('\nAttente avant la deuxi√®me analyse...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Deuxi√®me site √† v√©rifier - l'agent pourra utiliser l'exp√©rience de la premi√®re v√©rification
        console.log('\nüîç ANALYSE DU DEUXI√àME SITE...');
        const secondResult = await agent.checkSite('https://another-example.org', {
            keywords: ['mcp', 'seo', 'best practices']
        });

        console.log(`Site v√©rifi√©: ${secondResult.baseUrl}`);
        console.log(`URLs v√©rifi√©es: ${secondResult.urlsChecked}`);
        console.log(`Score moyen: ${secondResult.averageScore.toFixed(2)}/100`);
        console.log(`Top probl√®mes: ${secondResult.topIssues.length}`);

        // Attendre un moment pour simuler le passage du temps
        console.log('\nAttente avant la troisi√®me analyse...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Troisi√®me site √† v√©rifier - l'agent utilisera maintenant les deux exp√©riences pr√©c√©dentes
        console.log('\nüîç ANALYSE DU TROISI√àME SITE...');
        const thirdResult = await agent.checkSite('https://third-example.net');

        console.log(`Site v√©rifi√©: ${thirdResult.baseUrl}`);
        console.log(`URLs v√©rifi√©es: ${thirdResult.urlsChecked}`);
        console.log(`Score moyen: ${thirdResult.averageScore.toFixed(2)}/100`);
        console.log(`Top probl√®mes: ${thirdResult.topIssues.length}`);

        // G√©n√©rer un rapport d'apprentissage
        console.log('\nüìä G√âN√âRATION DU RAPPORT D\'APPRENTISSAGE...');
        const learningReport = await agent.generateLearningReport();
        console.log('\nRAPPORT D\'APPRENTISSAGE:');
        console.log(learningReport);

        // V√©rifier le contenu de la m√©moire
        console.log('\nüíæ EXPLORATION DE LA M√âMOIRE...');

        // Rechercher des entr√©es sp√©cifiques en m√©moire
        const memorizedChecks = await agent.searchMemory({
            type: 'seo-check-result'
        });
        console.log(`Nombre de v√©rifications en m√©moire: ${memorizedChecks.length}`);

        // Afficher les domaines m√©moris√©s
        const domains = new Set<string>();
        memorizedChecks.forEach(check => {
            if (check.data && check.metadata?.domain) {
                domains.add(check.metadata.domain as string);
            }
        });
        console.log('Domaines en m√©moire:', Array.from(domains));

        // Nettoyer la m√©moire (optionnel)
        // console.log('\nNettoyage de la m√©moire...');
        // const cleanupResult = await agent.cleanupMemory();
        // console.log(`Entr√©es nettoy√©es: Court terme=${cleanupResult.shortTerm}, Long terme=${cleanupResult.longTerm}`);

    } catch (error) {
        console.error('‚ùå Erreur lors de l\'ex√©cution de l\'exemple:', error);
    } finally {
        // Fermer proprement l'agent
        await agent.shutdown();
        console.log('\n‚úÖ Agent arr√™t√© proprement');
        console.log('=== FIN DE L\'EXEMPLE ===');
    }
}

// Ex√©cuter l'exemple
run()
    .then(() => console.log('Exemple termin√© avec succ√®s'))
    .catch(err => console.error('Erreur lors de l\'ex√©cution de l\'exemple:', err));
