#!/bin/bash

# Script pour d√©marrer la stack compl√®te de monitoring: Prometheus, Grafana, Jaeger et OpenTelemetry

echo "üöÄ D√©marrage de la stack compl√®te de monitoring avec OpenTelemetry..."

# V√©rification de la pr√©sence de docker-compose
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Erreur: docker-compose n'est pas install√©. Veuillez l'installer pour continuer."
    exit 1
fi

# Emplacement du r√©pertoire actuel
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROOT_DIR="$(dirname "$DIR")"

# V√©rifier si le fichier docker-compose.monitoring.yml existe
if [ ! -f "$ROOT_DIR/docker-compose.monitoring.yml" ]; then
    echo "‚ùå Erreur: Le fichier docker-compose.monitoring.yml n'existe pas √† l'emplacement attendu."
    exit 1
fi

# V√©rifier si package.json existe pour installer les d√©pendances OpenTelemetry
if [ -f "$ROOT_DIR/package.json" ]; then
    echo "üì¶ V√©rification des d√©pendances OpenTelemetry..."
    
    # Installer les d√©pendances OpenTelemetry si elles ne sont pas d√©j√† pr√©sentes
    if ! grep -q "@opentelemetry/sdk-node" "$ROOT_DIR/package.json"; then
        echo "üì• Installation des d√©pendances OpenTelemetry..."
        cd "$ROOT_DIR"
        npm install --save @opentelemetry/sdk-node @opentelemetry/api @opentelemetry/auto-instrumentations-node \
            @opentelemetry/exporter-trace-otlp-proto @opentelemetry/exporter-metrics-otlp-proto \
            @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/context-async-hooks
    else
        echo "‚úÖ Les d√©pendances OpenTelemetry sont d√©j√† install√©es."
    fi
fi

# D√©marrage des services avec docker-compose
echo "üê≥ D√©marrage des conteneurs Docker..."
docker-compose -f "$ROOT_DIR/docker-compose.monitoring.yml" up -d

# V√©rification que les services sont bien d√©marr√©s
echo "‚è≥ V√©rification des services..."
sleep 5

if docker-compose -f "$ROOT_DIR/docker-compose.monitoring.yml" ps | grep -q "Up"; then
    echo "‚úÖ Services de monitoring d√©marr√©s avec succ√®s"
    
    echo "
üîç Acc√®s aux interfaces:
    - Prometheus: http://localhost:9090
    - Grafana:    http://localhost:3000 (admin/mcppassword)
    - Jaeger:     http://localhost:16686
    "

    # D√©marrage du serveur de m√©triques (si TypeScript est install√©)
    if command -v ts-node &> /dev/null; then
        echo "üîÑ D√©marrage du serveur de m√©triques..."
        
        # V√©rifier si le fichier metrics-server.ts existe
        if [ -f "$DIR/metrics-server.ts" ]; then
            # D√©marrer le serveur en arri√®re-plan
            ts-node "$DIR/metrics-server.ts" &
            SERVER_PID=$!
            echo "‚úÖ Serveur de m√©triques d√©marr√© avec PID $SERVER_PID"
            echo "üìä M√©triques disponibles sur: http://localhost:3001/metrics"
        else
            echo "‚ö†Ô∏è  Le fichier metrics-server.ts n'existe pas. Le serveur de m√©triques ne sera pas d√©marr√©."
        fi
    else
        echo "‚ÑπÔ∏è  ts-node n'est pas install√©. Pour d√©marrer le serveur de m√©triques manuellement:"
        echo "  npm install -g ts-node"
        echo "  ts-node $DIR/metrics-server.ts"
    fi
    
    echo "
üöÄ Vous pouvez maintenant instrumenter vos agents avec OpenTelemetry:
    - Importez { AgentTracer } from './monitoring/telemetry' dans vos agents
    - Importez { OrchestratorTracer } from './monitoring/telemetry' dans vos orchestrateurs
    - Consultez /monitoring/telemetry/README.md pour plus d'informations
    "
    
    # Proposer d'ex√©cuter les exemples
    echo "üìã Voulez-vous ex√©cuter les exemples d'agents instrument√©s avec OpenTelemetry? (o/n)"
    read -r EXEC_EXAMPLES
    
    if [[ "$EXEC_EXAMPLES" == "o" || "$EXEC_EXAMPLES" == "O" || "$EXEC_EXAMPLES" == "oui" ]]; then
        echo "üèÉ Ex√©cution de l'exemple d'agent..."
        ts-node "$DIR/telemetry/exemple-agent.ts"
        
        echo ""
        echo "üèÉ Ex√©cution de l'exemple d'orchestrateur..."
        ts-node "$DIR/telemetry/exemple-orchestrateur.ts"
        
        echo ""
        echo "‚úÖ Exemples ex√©cut√©s. Vous pouvez maintenant visualiser les traces dans Jaeger: http://localhost:16686"
    fi
    
else
    echo "‚ùå Erreur lors du d√©marrage des services de monitoring"
    echo "Consultez les logs pour plus de d√©tails: docker-compose -f \"$ROOT_DIR/docker-compose.monitoring.yml\" logs"
    exit 1
fi