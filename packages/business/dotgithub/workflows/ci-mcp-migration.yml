name: CI - V√©rification Migration MCP

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/routes/**'
      - 'docs/**'
      - 'tests/**'

jobs:
  verify-migration:
    if: contains(github.head_ref, 'migration/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: pnpm install
        
      - name: V√©rifier les types TypeScript
        run: pnpm tsc --noEmit
        
      - name: Ex√©cuter les tests
        run: pnpm test -- --selectFiles=$(echo ${{ github.event.pull_request.title }} | sed -n 's/.*‚Üí \(.*\)/\1/p')
        
      - name: Linter
        run: pnpm lint app/routes/
        
      - name: V√©rification de la structure MCP
        run: |
          echo "V√©rification de la structure MCP pour la migration..."
          
          # Extraire le nom du fichier cible depuis le titre de la PR
          TARGET_FILE=$(echo ${{ github.event.pull_request.title }} | sed -n 's/.*‚Üí \(.*\)/\1/p')
          BASE_NAME=$(basename $TARGET_FILE .tsx)
          
          # V√©rifier la pr√©sence des fichiers requis
          MISSING_FILES=""
          
          # V√©rifier les fichiers de route
          [ ! -f "app/routes/$BASE_NAME.tsx" ] && MISSING_FILES="$MISSING_FILES\n- app/routes/$BASE_NAME.tsx"
          [ ! -f "app/routes/$BASE_NAME.loader.ts" ] && MISSING_FILES="$MISSING_FILES\n- app/routes/$BASE_NAME.loader.ts"
          
          # V√©rifier les fichiers de documentation
          [ ! -f "docs/$BASE_NAME.audit.md" ] && MISSING_FILES="$MISSING_FILES\n- docs/$BASE_NAME.audit.md"
          [ ! -f "docs/$BASE_NAME.final.md" ] && MISSING_FILES="$MISSING_FILES\n- docs/$BASE_NAME.final.md"
          [ ! -f "docs/$BASE_NAME.verification_report.json" ] && MISSING_FILES="$MISSING_FILES\n- docs/$BASE_NAME.verification_report.json"
          
          # V√©rifier les tests
          [ ! -f "tests/routes/$BASE_NAME.test.ts" ] && MISSING_FILES="$MISSING_FILES\n- tests/routes/$BASE_NAME.test.ts"
          
          # Afficher les r√©sultats
          if [ ! -z "$MISSING_FILES" ]; then
            echo "::error::Fichiers manquants dans la migration MCP:$MISSING_FILES"
            exit 1
          else
            echo "‚úÖ Tous les fichiers requis sont pr√©sents pour la migration MCP."
          fi
          
      - name: V√©rifier la qualit√© du code avec MCP Verifier
        run: |
          # Extraire le nom du fichier cible depuis le titre de la PR
          TARGET_FILE=$(echo ${{ github.event.pull_request.title }} | sed -n 's/.*‚Üí \(.*\)/\1/p')
          BASE_NAME=$(basename $TARGET_FILE .tsx)
          
          # Ex√©cuter MCP Verifier
          pnpm mcp-verify $BASE_NAME --type-check --add-tags
        
      - name: Commenter les r√©sultats sur la PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Extraire le nom du fichier cible depuis le titre de la PR
            const prTitle = context.payload.pull_request.title;
            const targetFileMatch = prTitle.match(/‚Üí\s*([^\s]+)/);
            
            if (!targetFileMatch) {
              console.log('Impossible de d√©terminer le fichier cible √† partir du titre de la PR');
              return;
            }
            
            const targetFile = targetFileMatch[1];
            const baseName = path.basename(targetFile, path.extname(targetFile));
            
            // Lire le rapport de v√©rification
            let verificationReport;
            try {
              const reportPath = `docs/${baseName}.verification_report.json`;
              verificationReport = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            } catch (error) {
              console.log(`Erreur lors de la lecture du rapport de v√©rification: ${error.message}`);
              return;
            }
            
            // Cr√©er un r√©sum√© du rapport
            let comment = `## üîç R√©sultats de la v√©rification MCP\n\n`;
            
            // Statut global
            const statusEmoji = {
              'success': '‚úÖ',
              'warning': '‚ö†Ô∏è',
              'error': '‚ùå',
              'not-found': '‚ùì'
            };
            
            comment += `### Statut: ${statusEmoji[verificationReport.status] || 'üîÑ'} ${verificationReport.status.toUpperCase()}\n\n`;
            
            // Tags
            if (verificationReport.tags && verificationReport.tags.length > 0) {
              comment += `### Tags\n`;
              verificationReport.tags.forEach(tag => {
                comment += `- ${tag}\n`;
              });
              comment += '\n';
            }
            
            // R√©sultats d√©taill√©s
            comment += `### D√©tails\n\n`;
            comment += `| Fichier | Type | Statut | Messages |\n`;
            comment += `|---------|------|--------|----------|\n`;
            
            verificationReport.results.forEach(result => {
              const fileName = result.file ? path.basename(result.file) : `${baseName}${result.fileType}`;
              const status = `${statusEmoji[result.status] || 'üîÑ'} ${result.status}`;
              const messages = result.messages.length > 0 ? result.messages.join('<br>') : 'Aucun probl√®me';
              
              comment += `| \`${fileName}\` | ${result.fileType} | ${status} | ${messages} |\n`;
            });
            
            // Ajouter le commentaire √† la PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });