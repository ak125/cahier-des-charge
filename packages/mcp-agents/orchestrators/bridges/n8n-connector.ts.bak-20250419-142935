import { AbstractOrchestratorAgent } from '../abstract-orchestrator';
/**
import { BaseAgent } from '@workspaces/cahier-des-charge/src/core/interfaces/base-agent';
 * Connecteur d'orchestration pour n8n
 * 
 * Implémentation de l'interface OrchestrationConnector pour n8n.
 * Ce connecteur permet d'intégrer des workflows n8n et des déclencheurs externes.
 */

import { EventEmitter } from 'events';
import {
  OrchestrationConnector,
  OrchestrationConnectorConfig,
  OrchestrationJob,
  WorkflowDefinition,
  ExecutionResult
} from '../interfaces/orchestration-connector';
import axios, { AxiosInstance } from 'axios';

/**
 * Configuration spécifique pour n8n
 */
export interface N8nConnectorConfig extends OrchestrationConnectorConfig {
  apiKey?: string;
  baseUrl: string; // URL de base du serveur n8n
  webhookBaseUrl?: string; // URL de base pour les webhooks
  timeout?: number; // Timeout en ms pour les requêtes API
}

/**
 * Connecteur d'orchestration pour n8n
 */
export class N8nConnector implements BaseAgent extends AbstractOrchestratorAgent<any, any> implements OrchestrationConnector , BusinessAgent{
  readonly events = new EventEmitter();
  readonly name = 'n8n';
  
  private _status: 'connecting' | 'ready' | 'error' | 'closed' = 'closed';
  private config: N8nConnectorConfig | null = null;
  private client: AxiosInstance | null = null;
  private workflows: Map<string, WorkflowDefinition> = new Map();
  private n8nWorkflowMap: Map<string, number> = new Map(); // Mapper nos IDs de workflow aux IDs n8n
  private webhooks: Map<string, string> = new Map(); // Mapper les IDs de workflow aux webhooks
  private jobStatusMap: Map<string, OrchestrationJob> = new Map();
  
  /**
   * Obtient le statut actuel du connecteur
   */
  get status(): 'connecting' | 'ready' | 'error' | 'closed' {
    return this._status;
  }
  
  /**
   * Initialise la connexion avec n8n
   */
  protected async initializeInternal(): Promise<void> {
  protected async cleanupInternal(): Promise<void> {
    // Nettoyage des ressources
  }

    this._status = 'connecting';
    this.config = config;
    
    try {
      console.log(`Initialisation de la connexion n8n vers ${config.baseUrl}`);
      
      // Initialiser le client HTTP pour les appels à l'API n8n
      // Dans une implémentation réelle, on utiliserait axios ou une autre bibliothèque HTTP
      this.client = axios.create({
        baseURL: config.baseUrl,
        timeout: config.timeout || 10000,
        headers: {
          'X-N8N-API-KEY': config.apiKey || '',
          'Content-Type': 'application/json'
        }
      });
      
      // Vérifier que nous pouvons nous connecter à n8n
      // En implémentation réelle:
      // await this.client.get('/healthz');
      
      this._status = 'ready';
      this.events.emit('ready', { timestamp: new Date() });
      
      console.log('✅ Connexion à n8n établie avec succès');
    } catch (error) {
      this._status = 'error';
      this.events.emit('error', {
        error: error instanceof Error ? error.message : String(error),
        timestamp: new Date()
      });
      
      console.error('❌ Erreur lors de la connexion à n8n:', error);
      throw error;
    }
  }
  
  /**
   * Ferme la connexion avec n8n
   */
  async close(): Promise<void> {
    // Pas besoin de fermeture spécifique pour un client HTTP, mais
    // nous pourrions nettoyer les ressources si nécessaire
    this._status = 'closed';
    this.events.emit('closed', { timestamp: new Date() });
    console.log('✅ Connexion à n8n fermée');
  }
  
  /**
   * Enregistre une définition de workflow
   */
  async registerWorkflow(workflow: WorkflowDefinition): Promise<void> {
    if (this.status !== 'ready') {
      throw new Error('Le connecteur n8n n\'est pas prêt');
    }
    
    try {
      console.log(`Enregistrement du workflow ${workflow.name} (${workflow.id})`);
      
      // Stocker la définition du workflow
      this.workflows.set(workflow.id, workflow);
      
      // En implémentation réelle, nous créerions ou mettrions à jour le workflow dans n8n
      // const n8nWorkflow = this.convertToN8nWorkflow(workflow);
      // 
      // let n8nWorkflowId = this.n8nWorkflowMap.get(workflow.id);
      // let response;
      // 
      // if (n8nWorkflowId) {
      //   // Mettre à jour un workflow existant
      //   response = await this.client.put(`/workflows/${n8nWorkflowId}`, n8nWorkflow);
      // } else {
      //   // Créer un nouveau workflow
      //   response = await this.client.post('/workflows', n8nWorkflow);
      //   n8nWorkflowId = response.data.id;
      //   this.n8nWorkflowMap.set(workflow.id, n8nWorkflowId);
      // }
      
      // Simuler l'enregistrement dans n8n
      const n8nWorkflowId = Date.now();
      this.n8nWorkflowMap.set(workflow.id, n8nWorkflowId);
      
      // Si le workflow a besoin d'un webhook
      if (workflow.options?.webhook) {
        const webhookUrl = `${this.config?.webhookBaseUrl || ''}/webhook/${n8nWorkflowId}`;
        this.webhooks.set(workflow.id, webhookUrl);
      }
      
      this.events.emit('workflow:registered', {
        workflowId: workflow.id,
        name: workflow.name,
        version: workflow.version,
        timestamp: new Date(),
        n8nWorkflowId
      });
      
      console.log(`Workflow ${workflow.name} enregistré avec succès dans n8n (ID n8n: ${n8nWorkflowId})`);
    } catch (error) {
      console.error(`Erreur lors de l'enregistrement du workflow ${workflow.id}:`, error);
      throw error;
    }
  }
  
  /**
   * Soumet un job à exécuter
   */
  async submitJob(type: string, data: any, options: Record<string, any> = {}): Promise<string> {
    if (this.status !== 'ready') {
      throw new Error('Le connecteur n8n n\'est pas prêt');
    }
    
    try {
      console.log(`Soumission d'un job de type ${type}`);
      
      // Générer un ID pour le job
      const jobId = `n8n-job-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
      
      // Trouver un workflow qui correspond au type
      const workflowEntry = Array.from(this.workflows.entries())
        .find(([_, wf]) => wf.name === type);
      
      if (!workflowEntry) {
        throw new Error(`Aucun workflow n'est enregistré pour le type ${type}`);
      }
      
      const [workflowId, workflow] = workflowEntry;
      const n8nWorkflowId = this.n8nWorkflowMap.get(workflowId);
      
      if (!n8nWorkflowId) {
        throw new Error(`Le workflow ${workflowId} n'est pas encore synchronisé avec n8n`);
      }
      
      // En implémentation réelle, nous démarrerions l'exécution dans n8n
      // const response = await this.client.post(`/workflows/${n8nWorkflowId}/execute`, {
      //   data,
      //   ...options
      // });
      // const executionId = response.data.executionId;
      
      // Simuler le démarrage de l'exécution
      const job: OrchestrationJob = {
        id: jobId,
        type,
        data,
        status: 'pending',
        startTime: new Date(),
        metadata: {
          workflowId,
          n8nWorkflowId,
          ...options
        }
      };
      
      this.jobStatusMap.set(jobId, job);
      
      this.events.emit('job:submitted', {
        jobId,
        type,
        timestamp: new Date(),
        n8nWorkflowId
      });
      
      // Simuler le cycle de vie du job
      setTimeout(() => {
        const updatedJob = this.jobStatusMap.get(jobId);
        if (updatedJob) {
          updatedJob.status = 'running';
          
          this.events.emit('job:started', {
            jobId,
            type,
            timestamp: new Date()
          });
          
          // Simuler la fin du job
          setTimeout(() => {
            updatedJob.status = 'completed';
            updatedJob.endTime = new Date();
            updatedJob.result = { success: true, data: { message: 'Job completed successfully' } };
            
            this.events.emit('job:completed', {
              jobId,
              type,
              timestamp: new Date(),
              result: updatedJob.result
            });
          }, 500);
        }
      }, 100);
      
      return jobId;
    } catch (error) {
      console.error(`Erreur lors de la soumission du job de type ${type}:`, error);
      throw error;
    }
  }
  
  /**
   * Exécute un workflow complet
   */
  async executeWorkflow(
    workflowId: string, 
    input: any, 
    options: Record<string, any> = {}
  ): Promise<ExecutionResult> {
    if (this.status !== 'ready') {
      throw new Error('Le connecteur n8n n\'est pas prêt');
    }
    
    try {
      // Récupérer la définition du workflow
      const workflow = this.workflows.get(workflowId);
      if (!workflow) {
        throw new Error(`Workflow non trouvé: ${workflowId}`);
      }
      
      // Récupérer l'ID n8n correspondant
      const n8nWorkflowId = this.n8nWorkflowMap.get(workflowId);
      if (!n8nWorkflowId) {
        throw new Error(`Le workflow ${workflowId} n'est pas encore synchronisé avec n8n`);
      }
      
      console.log(`Exécution du workflow ${workflow.name} (${workflowId})`);
      
      // Générer des identifiants pour l'exécution
      const runId = `run-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
      const jobId = `n8n-workflow-${workflowId}-${runId}`;
      
      // En implémentation réelle, nous lancerions l'exécution dans n8n
      // const response = await this.client.post(`/workflows/${n8nWorkflowId}/execute`, {
      //   data: input,
      //   ...options
      // });
      // const executionId = response.data.executionId;
      
      // Créer un enregistrement de job
      const job: OrchestrationJob = {
        id: jobId,
        type: workflow.name,
        data: input,
        status: 'running',
        startTime: new Date(),
        metadata: {
          workflowId,
          n8nWorkflowId,
          runId,
          ...options
        }
      };
      
      this.jobStatusMap.set(jobId, job);
      
      this.events.emit('workflow:started', {
        jobId,
        workflowId,
        runId,
        timestamp: new Date(),
        n8nWorkflowId
      });
      
      // Simuler l'exécution du workflow
      setTimeout(() => {
        const updatedJob = this.jobStatusMap.get(jobId);
        if (updatedJob) {
          updatedJob.status = 'completed';
          updatedJob.endTime = new Date();
          updatedJob.result = { success: true, data: { message: 'Workflow completed successfully' } };
          
          this.events.emit('workflow:completed', {
            jobId,
            workflowId,
            runId,
            timestamp: new Date(),
            result: updatedJob.result,
            duration: updatedJob.endTime.getTime() - updatedJob.startTime!.getTime()
          });
        }
      }, 800);
      
      return {
        success: true,
        jobId,
        workflowId,
        runId,
      };
    } catch (error) {
      console.error(`Erreur lors de l'exécution du workflow ${workflowId}:`, error);
      
      this.events.emit('workflow:failed', {
        workflowId,
        error: error instanceof Error ? error.message : String(error),
        timestamp: new Date()
      });
      
      throw error;
    }
  }
  
  /**
   * Récupère le statut d'un job
   */
  async getJobStatus(jobId: string): Promise<OrchestrationJob | null> {
    // Vérifier d'abord dans notre cache local
    const job = this.jobStatusMap.get(jobId);
    if (job) {
      return job;
    }
    
    if (!jobId.startsWith('n8n')) {
      return null; // Ce n'est pas un job n8n
    }
    
    try {
      // En implémentation réelle, nous récupérerions le statut depuis n8n
      // Nous aurions besoin de conserver une table de correspondance entre nos IDs et les IDs d'exécution n8n
      // const executionId = this.extractExecutionIdFromJobId(jobId);
      // if (!executionId) {
      //   return null;
      // }
      // 
      // const response = await this.client.get(`/executions/${executionId}`);
      // const execution = response.data;
      // 
      // return {
      //   id: jobId,
      //   type: execution.workflowData.name,
      //   data: execution.data,
      //   status: this.mapN8nStatusToJobStatus(execution.status),
      //   startTime: new Date(execution.startedAt),
      //   endTime: execution.stoppedAt ? new Date(execution.stoppedAt) : undefined,
      //   result: execution.data,
      //   metadata: {
      //     n8nExecutionId: executionId,
      //     workflowId: execution.workflowId
      //   }
      // };
      
      // Simulation
      return {
        id: jobId,
        type: 'simulated-n8n-job',
        data: {},
        status: 'completed',
        startTime: new Date(Date.now() - 1000),
        endTime: new Date(),
        result: { success: true }
      };
    } catch (error) {
      console.error(`Erreur lors de la récupération du statut du job ${jobId}:`, error);
      return null;
    }
  }
  
  /**
   * Annule un job en cours d'exécution
   */
  async cancelJob(jobId: string): Promise<boolean> {
    try {
      console.log(`Tentative d'annulation du job ${jobId}`);
      
      // Vérifier d'abord dans notre cache local
      const job = this.jobStatusMap.get(jobId);
      if (job && job.status === 'running') {
        // En implémentation réelle, nous annulerions l'exécution dans n8n
        // const executionId = this.extractExecutionIdFromJobId(jobId);
        // if (!executionId) {
        //   return false;
        // }
        // 
        // await this.client.post(`/executions/${executionId}/stop`);
        
        // Mettre à jour le statut local
        job.status = 'failed';
        job.error = 'Job annulé par l\'utilisateur';
        job.endTime = new Date();
        
        this.events.emit('job:cancelled', {
          jobId,
          timestamp: new Date()
        });
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error(`Erreur lors de l'annulation du job ${jobId}:`, error);
      return false;
    }
  }
  
  /**
   * Retourne des métriques sur le système d'orchestration
   */
  async getMetrics(): Promise<Record<string, any>> {
    try {
      // En implémentation réelle, nous récupérerions des métriques depuis l'API n8n
      
      // Simuler quelques métriques basiques
      return {
        workflows: {
          total: this.workflows.size,
          active: this.n8nWorkflowMap.size,
        },
        executions: {
          total: 100, // Simulé
          completed: 90,
          failed: 5,
          running: 5
        },
        webhooks: {
          total: this.webhooks.size,
          recentInvocations: 25 // Simulé
        },
        lastUpdated: new Date().toISOString()
      };
    } catch (error) {
      console.error('Erreur lors de la récupération des métriques:', error);
      return { error: error instanceof Error ? error.message : String(error) };
    }
  }
  
  /**
   * Retourne l'état de santé du connecteur
   */
  async healthCheck(): Promise<boolean> {
    if (this.status !== 'ready' || !this.client) {
      return false;
    }
    
    try {
      // En implémentation réelle, nous vérifierions l'API n8n
      // await this.client.get('/healthz');
      return true;
    } catch (error) {
      console.error('Erreur lors de la vérification de santé n8n:', error);
      return false;
    }
  }
  
  /**
   * Convertit notre définition de workflow en format n8n
   * @private
   */
  private convertToN8nWorkflow(workflow: WorkflowDefinition): any {
    // Cette méthode convertirait notre définition générique de workflow en format spécifique n8n
    // En implémentation réelle, elle créerait les nœuds et connexions n8n
    
    // Exemple simplifié
    return {
      name: workflow.name,
      nodes: workflow.steps.map((step, index) => ({
        id: `node-${index}`,
        name: step.agentId,
        type: 'mcp-agent',
        parameters: step.config || {}
      })),
      connections: workflow.steps.flatMap((step, index) => 
        step.dependencies?.map(dep => {
          const depIndex = workflow.steps.findIndex(s => s.agentId === dep);
          return {
            source: depIndex > -1 ? `node-${depIndex}` : null,
            target: `node-${index}`
          };
        }) || []
      )
    };
  }
  
  /**
   * Extrait l'ID d'exécution n8n à partir de notre ID de job
   * @private
   */
  private extractExecutionIdFromJobId(jobId: string): string | null {
    // Dans une implémentation réelle, nous aurions une méthode pour extraire l'ID d'exécution n8n
    // depuis notre format d'ID de job ou une table de correspondance
    
    // Exemple simplifié
    const parts = jobId.split('-');
    if (parts.length < 3) {
      return null;
    }
    
    return parts[2];
  }
  
  /**
   * Convertit un statut n8n en format standardisé
   * @private
   */
  private mapN8nStatusToJobStatus(status: string): 'pending' | 'running' | 'completed' | 'failed' {
    switch (status) {
      case 'running':
        return 'running';
      case 'success':
        return 'completed';
      case 'failed':
      case 'crashed':
      case 'error':
        return 'failed';
      case 'waiting':
      default:
        return 'pending';
    }
  }
}

















import { BusinessAgent } from '@workspaces/cahier-des-charge/src/core/interfaces/business';




































































































































































































































































































































































































































































































































































