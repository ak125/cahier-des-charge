version: '3.8'

services:
  redis:
    image: redis:alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  ollama:
    image: ollama/ollama:latest
    container_name: mcp-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:11434/api/version || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  mcp-server:
    image: node:20-alpine
    container_name: mcp-server
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=development
      - PORT=3333
      - MCP_SERVER_PORT=3333
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=deepseek-coder
      - USE_CACHE=true
      - CACHE_EXPIRY=3600
      - SUPABASE_URL=http://supabase:5432
      - SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example-key
      - N8N_WEBHOOK_URL=http://migration-n8n:5678/webhook/mcp
    command: >
      sh -c "apk add --no-cache curl git python3 make g++ findutils &&
             mkdir -p /app/minimal-mcp &&
             cd /app/minimal-mcp &&
             npm init -y &&
             npm install express &&
             echo 'const express = require(\"express\"); const app = express(); const port = process.env.PORT || 3333; app.get(\"/health\", (req, res) => { res.status(200).json({ status: \"ok\", version: \"1.0.0\", mode: \"minimal\" }); }); app.listen(port, () => console.log(`Minimal MCP server running on port ${port}`));' > index.js &&
             node index.js"
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
      supabase:
        condition: service_started
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:3333/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 60s

  supabase:
    image: supabase/postgres:15.1.0.112
    container_name: mcp-supabase
    restart: unless-stopped
    ports:
      - "5433:5432"  # Changement du port externe de 5432 Ã  5433
    volumes:
      - supabase-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mcp_database
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  mcp-network:
    driver: bridge

volumes:
  redis-data:
  ollama-data:
  supabase-data: