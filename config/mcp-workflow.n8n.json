{
  "name": "MCP Workflow Pipeline",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 12,
              "unit": "hours"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [100, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "httpMethod": "POST",
        "path": "mcp-update-webhook",
        "responseMode": "responseNode",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "MCP Update Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [100, 400],
      "webhookId": "mcp-update-webhook",
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "mergeByPosition"
      },
      "name": "Merge Triggers",
      "type": "n8n-nodes-base.merge",
      "position": [300, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/mcp-manifest-manager.ts --action=validate",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 60
      },
      "name": "Validate Manifests",
      "type": "n8n-nodes-base.executeCommand",
      "position": [500, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.exitCode }}",
              "operation": "equal",
              "value2": 0
            }
          ]
        }
      },
      "name": "Validation Successful?",
      "type": "n8n-nodes-base.if",
      "position": [700, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/mcp-verifier.ts --verify-all --output-json",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 180
      },
      "name": "Verify MCP Conformity",
      "type": "n8n-nodes-base.executeCommand",
      "position": [900, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/mcp-manifest-manager.ts --action=regenerate --manifest=/workspaces/cahier-des-charge/MCPManifest.json",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Regenerate Manifest",
      "type": "n8n-nodes-base.executeCommand",
      "position": [900, 400],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Analyser les r√©sultats de la v√©rification MCP\nconst verifyOutput = $node['Verify MCP Conformity'].json.stdout || '';\n\n// Extraire les r√©sultats JSON\nlet mcpResults = { success: false, issues: [] };\ntry {\n  const jsonMatch = verifyOutput.match(/\\{[\\s\\S]*?\\}/);\n  if (jsonMatch) {\n    const mcpData = JSON.parse(jsonMatch[0]);\n    mcpResults = {\n      success: mcpData.success || false,\n      issues: mcpData.issues || [],\n      componentsVerified: mcpData.componentsVerified || 0,\n      componentsWithIssues: mcpData.componentsWithIssues || 0,\n      conformance: mcpData.conformanceScore || 0,\n      details: mcpData.details || {}\n    };\n  } else {\n    mcpResults.issues.push('No JSON data found in verification output');\n  }\n} catch (error) {\n  mcpResults.issues.push(`Error parsing MCP verification results: ${error.message}`);\n}\n\n// Calculer le niveau de conformit√©\nlet conformityLevel = 'faible';\nif (mcpResults.conformance >= 90) {\n  conformityLevel = '√©lev√©e';\n} else if (mcpResults.conformance >= 70) {\n  conformityLevel = 'moyenne';\n}\n\n// Pr√©parer les recommandations\nconst recommendations = [];\nif (mcpResults.issues.length > 0) {\n  for (const issue of mcpResults.issues.slice(0, 5)) {\n    recommendations.push({\n      type: issue.type || 'Probl√®me de conformit√©',\n      component: issue.component || 'Inconnu',\n      description: issue.message || issue.toString(),\n      priority: issue.severity || 'medium'\n    });\n  }\n}\n\nreturn {\n  json: {\n    mcpResults,\n    timestamp: new Date().toISOString(),\n    conformityLevel,\n    recommendations,\n    summary: {\n      success: mcpResults.success,\n      componentsVerified: mcpResults.componentsVerified,\n      componentsWithIssues: mcpResults.componentsWithIssues,\n      conformanceScore: mcpResults.conformance,\n      issueCount: mcpResults.issues.length\n    }\n  }\n};"
      },
      "name": "Process MCP Results",
      "type": "n8n-nodes-base.code",
      "position": [1100, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.summary.componentsWithIssues }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "name": "Has Issues?",
      "type": "n8n-nodes-base.if",
      "position": [1300, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/mcp-manifest-manager.ts --action=fix-issues --issues-file=/workspaces/cahier-des-charge/reports/mcp-issues-{{ $json.timestamp.replace(/:/g, '-') }}.json",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 180
      },
      "name": "Auto-Fix MCP Issues",
      "type": "n8n-nodes-base.executeCommand",
      "position": [1500, 100],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# Rapport d'analyse MCP - {{ $json.timestamp }}\n\n## R√©sum√©\n\n- **Score de conformit√© MCP**: {{ $json.summary.conformanceScore }}% (Niveau: {{ $json.conformityLevel }})\n- **Composants v√©rifi√©s**: {{ $json.summary.componentsVerified }}\n- **Composants avec probl√®mes**: {{ $json.summary.componentsWithIssues }}\n- **Probl√®mes identifi√©s**: {{ $json.summary.issueCount }}\n\n## Probl√®mes identifi√©s\n\n{% if $json.mcpResults.issues.length === 0 %}\nAucun probl√®me identifi√©. Tous les composants sont conformes au protocole MCP.\n{% else %}\n{% for issue in $json.mcpResults.issues %}\n### {{ issue.type || \"Probl√®me\" }} dans {{ issue.component || \"Composant inconnu\" }}\n\n{{ issue.message || issue.toString() }}\n\nS√©v√©rit√©: {{ issue.severity || \"moyenne\" }}\n{% endfor %}\n{% endif %}\n\n## Recommandations\n\n{% if $json.recommendations.length === 0 %}\nAucune recommandation sp√©cifique. Le syst√®me est conforme au protocole MCP.\n{% else %}\n{% for rec in $json.recommendations %}\n- **{{ rec.type }} ({{ rec.component }})**: {{ rec.description }} (Priorit√©: {{ rec.priority }})\n{% endfor %}\n{% endif %}\n\n## √âtapes suivantes\n\n1. {% if $json.summary.componentsWithIssues > 0 %}Corriger les probl√®mes identifi√©s dans les composants non-conformes{% else %}Maintenir la conformit√© actuelle{% endif %}\n2. V√©rifier r√©guli√®rement la conformit√© au protocole MCP\n3. Mettre √† jour le manifeste apr√®s chaque modification importante\n\n> Ce rapport a √©t√© g√©n√©r√© automatiquement par le pipeline de v√©rification MCP le {{ $json.timestamp }}.",
        "destination": "=/workspaces/cahier-des-charge/reports/mcp-rapport-{{ $json.timestamp.replace(/:/g, '-') }}.md",
        "options": {}
      },
      "name": "Generate MCP Report",
      "type": "n8n-nodes-base.writeTextFile",
      "position": [1500, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "{{ JSON.stringify($json.mcpResults.issues, null, 2) }}",
        "destination": "=/workspaces/cahier-des-charge/reports/mcp-issues-{{ $json.timestamp.replace(/:/g, '-') }}.json",
        "options": {}
      },
      "name": "Save Issues JSON",
      "type": "n8n-nodes-base.writeTextFile",
      "position": [1300, 100],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "üö® *Probl√®mes de conformit√© MCP d√©tect√©s*\n\nüìä *Statistiques:*\n- Score de conformit√©: {{ $json.summary.conformanceScore }}% ({{ $json.conformityLevel }})\n- Composants avec probl√®mes: {{ $json.summary.componentsWithIssues }}/{{ $json.summary.componentsVerified }}\n- Probl√®mes identifi√©s: {{ $json.summary.issueCount }}\n\n{% if $json.recommendations.length > 0 %}\nüìã *Recommandations principales:*\n{% for rec in $json.recommendations.slice(0, 3) %}\n- {{ rec.component }}: {{ rec.description }}\n{% endfor %}\n{% if $json.recommendations.length > 3 %}...et {{ $json.recommendations.length - 3 }} autre(s){% endif %}\n{% endif %}\n\nüîÑ *Auto-correction en cours*\n\n*Timestamp:* {{ $json.timestamp }}",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": false
        }
      },
      "name": "Send Issues Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [1700, 100],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "‚úÖ *V√©rification MCP compl√©t√©e*\n\nüìä *Statistiques:*\n- Score de conformit√©: {{ $json.summary.conformanceScore }}% ({{ $json.conformityLevel }})\n- Composants v√©rifi√©s: {{ $json.summary.componentsVerified }}\n- Statut: {{ $json.summary.success ? 'Conforme' : 'Non-conforme' }}\n\nüìù *Rapport:* [Voir le rapport complet](file:///workspaces/cahier-des-charge/reports/mcp-rapport-{{ $json.timestamp.replace(/:/g, '-') }}.md)\n\n*Timestamp:* {{ $json.timestamp }}",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": true
        }
      },
      "name": "Send Success Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [1700, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "audit",
        "table": "mcp_verifications",
        "columns": "timestamp,conformance_score,conformity_level,components_verified,components_with_issues,issue_count,report_path",
        "values": "={{ $json.timestamp }},={{ $json.summary.conformanceScore }},={{ $json.conformityLevel }},={{ $json.summary.componentsVerified }},={{ $json.summary.componentsWithIssues }},={{ $json.summary.issueCount }},=/workspaces/cahier-des-charge/reports/mcp-rapport-{{ $json.timestamp.replace(/:/g, '-') }}.md",
        "additionalFields": {}
      },
      "name": "Log to Database",
      "type": "n8n-nodes-base.postgres",
      "position": [1900, 200],
      "typeVersion": 1,
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Postgres Account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Merge Triggers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Update Webhook": {
      "main": [
        [
          {
            "node": "Merge Triggers",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Triggers": {
      "main": [
        [
          {
            "node": "Validate Manifests",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Manifests": {
      "main": [
        [
          {
            "node": "Validation Successful?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Successful?": {
      "main": [
        [
          {
            "node": "Verify MCP Conformity",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Regenerate Manifest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verify MCP Conformity": {
      "main": [
        [
          {
            "node": "Process MCP Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Regenerate Manifest": {
      "main": [
        [
          {
            "node": "Verify MCP Conformity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process MCP Results": {
      "main": [
        [
          {
            "node": "Has Issues?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate MCP Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Issues?": {
      "main": [
        [
          {
            "node": "Save Issues JSON",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Issues JSON": {
      "main": [
        [
          {
            "node": "Auto-Fix MCP Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-Fix MCP Issues": {
      "main": [
        [
          {
            "node": "Send Issues Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate MCP Report": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Success Notification": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Issues Notification": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "tags": ["mcp", "verification", "protocol", "conformity", "monitoring"]
}