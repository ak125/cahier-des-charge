{
  "name": "PostgreSQL Analyzer Workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 6,
              "unit": "hours"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [100, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/discovery/postgres-schema-discovery.ts",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 300
      },
      "name": "Discover PostgreSQL Schemas",
      "type": "n8n-nodes-base.executeCommand",
      "position": [300, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Extraire les sch√©mas de la base de donn√©es PostgreSQL\nconst output = $input.item.json.stdout || '';\n\ntry {\n  // Extraire la liste JSON des sch√©mas\n  const jsonMatch = output.match(/\\{[\\s\\S]*\\}/);\n  \n  if (!jsonMatch) {\n    throw new Error('Aucun sch√©ma trouv√© dans la sortie');\n  }\n  \n  const schemasData = JSON.parse(jsonMatch[0]);\n  \n  if (!schemasData.schemas || !Array.isArray(schemasData.schemas) || schemasData.schemas.length === 0) {\n    return {\n      json: {\n        message: 'Aucun sch√©ma PostgreSQL √† analyser',\n        timestamp: new Date().toISOString(),\n        schemas: []\n      }\n    };\n  }\n  \n  // Retourner les donn√©es de sch√©ma pour le traitement ult√©rieur\n  return {\n    json: {\n      schemas: schemasData.schemas,\n      database: schemasData.database,\n      timestamp: new Date().toISOString(),\n      outputDir: '/workspaces/cahier-des-charge/reports/analysis/postgres'\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  };\n}"
      },
      "name": "Parse Schemas",
      "type": "n8n-nodes-base.code",
      "position": [500, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/analysis/postgres-schema-analyzer.ts --schema={{ $json.schema }} --output-dir={{ $json.outputDir }}/{{ $json.schema }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 180
      },
      "name": "Analyze Schema",
      "type": "n8n-nodes-base.executeCommand",
      "position": [700, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/optimization/postgres-optimization.ts --schema={{ $json.schema }} --input-dir={{ $json.outputDir }}/{{ $json.schema }} --output-dir={{ $json.outputDir }}/optimizations",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Generate Optimization Recommendations",
      "type": "n8n-nodes-base.executeCommand",
      "position": [900, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/migration/generate-prisma-model.ts --schema={{ $json.schema }} --input-dir={{ $json.outputDir }}/{{ $json.schema }} --output-dir={{ $json.outputDir }}/prisma-models",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Generate Prisma Model",
      "type": "n8n-nodes-base.executeCommand",
      "position": [900, 350],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "üìä *Analyse PostgreSQL compl√©t√©e*\n\nSch√©ma: `{{ $json.schema }}`\nBase de donn√©es: {{ $json.database }}\n\n‚úÖ Mod√®le Prisma g√©n√©r√©\n‚úÖ Recommandations d'optimisation disponibles\n\n*Timestamp:* {{ $json.timestamp }}\n\n[Voir le rapport d'analyse](file://{{ $json.outputDir }}/{{ $json.schema }})",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": true
        }
      },
      "name": "Send Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [1100, 275],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "audit",
        "table": "schema_analyses",
        "columns": "schema,database,timestamp,optimizations_count,model_generated,report_path",
        "additionalFields": {}
      },
      "name": "Log to Database",
      "type": "n8n-nodes-base.postgres",
      "position": [1300, 275],
      "typeVersion": 1,
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Postgres Account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Discover PostgreSQL Schemas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discover PostgreSQL Schemas": {
      "main": [
        [
          {
            "node": "Parse Schemas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Schemas": {
      "main": [
        [
          {
            "node": "Analyze Schema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Schema": {
      "main": [
        [
          {
            "node": "Generate Optimization Recommendations",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Prisma Model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Optimization Recommendations": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Prisma Model": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "tags": ["postgres", "analysis", "database", "migration", "prisma"]
}
