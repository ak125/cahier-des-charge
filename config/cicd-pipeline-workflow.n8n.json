{
  "name": "CI/CD Pipeline Workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 1,
              "unit": "hours"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [100, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "httpMethod": "POST",
        "path": "cicd-webhook",
        "responseMode": "responseNode",
        "options": {
          "allowUnauthorizedCerts": true
        }
      },
      "name": "GitHub Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [100, 400],
      "webhookId": "cicd-webhook",
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "mergeByPosition"
      },
      "name": "Merge Triggers",
      "type": "n8n-nodes-base.merge",
      "position": [300, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.headers['x-github-event'] || '' }}",
              "operation": "contains",
              "value2": "pull_request"
            }
          ]
        }
      },
      "name": "Is PR Event?",
      "type": "n8n-nodes-base.if",
      "position": [500, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/ci-tester.ts --event=pull_request --pr-number={{ $json.body.pull_request.number }} --repo={{ $json.body.repository.full_name }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 300
      },
      "name": "Run CI Tests",
      "type": "n8n-nodes-base.executeCommand",
      "position": [700, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/dev-linter.ts --files-pattern=\"**/*.{ts,tsx,js,jsx}\" --strict",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Run Code Linter",
      "type": "n8n-nodes-base.executeCommand",
      "position": [700, 400],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Analyser les résultats des tests et du linting\nconst ciOutput = $node['Run CI Tests'].json.stdout || '';\nconst linterOutput = $node['Run Code Linter'].json.stdout || '';\n\n// Extraire les résultats des tests CI\nlet ciResults = { success: false, failures: [] };\ntry {\n  const ciMatch = ciOutput.match(/\\{[\\s\\S]*?\\}/);\n  if (ciMatch) {\n    const ciData = JSON.parse(ciMatch[0]);\n    ciResults = {\n      success: ciData.success || false,\n      failures: ciData.failures || [],\n      testsPassed: ciData.testsPassed || 0,\n      testsFailed: ciData.testsFailed || 0,\n      coverage: ciData.coverage || '0%'\n    };\n  }\n} catch (error) {\n  ciResults.failures.push(`Error parsing CI results: ${error.message}`);\n}\n\n// Extraire les résultats du linting\nlet lintResults = { success: false, errors: [] };\ntry {\n  const lintMatch = linterOutput.match(/\\{[\\s\\S]*?\\}/);\n  if (lintMatch) {\n    const lintData = JSON.parse(lintMatch[0]);\n    lintResults = {\n      success: lintData.success || false,\n      errors: lintData.errors || [],\n      warnings: lintData.warnings || [],\n      errorCount: lintData.errorCount || 0,\n      warningCount: lintData.warningCount || 0,\n      fixableErrorCount: lintData.fixableErrorCount || 0\n    };\n  }\n} catch (error) {\n  lintResults.errors.push(`Error parsing linter results: ${error.message}`);\n}\n\n// Consolider les résultats\nconst pipelineSuccess = ciResults.success && lintResults.success;\nconst summary = {\n  success: pipelineSuccess,\n  testsPassed: ciResults.testsPassed || 0,\n  testsFailed: ciResults.testsFailed || 0,\n  coverage: ciResults.coverage || '0%',\n  lintErrors: lintResults.errorCount || 0,\n  lintWarnings: lintResults.warningCount || 0,\n  lintFixable: lintResults.fixableErrorCount || 0,\n  timestamp: new Date().toISOString()\n};\n\n// Gérer les pull requests et notifications\nlet prData = {};\nif ($json.body && $json.body.pull_request) {\n  prData = {\n    repo: $json.body.repository.full_name,\n    prNumber: $json.body.pull_request.number,\n    prTitle: $json.body.pull_request.title,\n    prAuthor: $json.body.pull_request.user.login,\n    prUrl: $json.body.pull_request.html_url\n  };\n}\n\nreturn {\n  json: {\n    ...summary,\n    ciResults,\n    lintResults,\n    prData,\n    detailedReport: {\n      ciOutput: ciOutput.substring(0, 500) + (ciOutput.length > 500 ? '...' : ''),\n      linterOutput: linterOutput.substring(0, 500) + (linterOutput.length > 500 ? '...' : '')\n    }\n  }\n};"
      },
      "name": "Process Results",
      "type": "n8n-nodes-base.code",
      "position": [900, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Pipeline Succeeded?",
      "type": "n8n-nodes-base.if",
      "position": [1100, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/auto-pr-agent.ts --pr-number={{ $json.prData.prNumber }} --repo={{ $json.prData.repo }} --action=approve",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 30
      },
      "name": "Approve PR",
      "type": "n8n-nodes-base.executeCommand",
      "position": [1300, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/auto-pr-agent.ts --pr-number={{ $json.prData.prNumber }} --repo={{ $json.prData.repo }} --action=comment --message=\"CI/CD pipeline failed. Please fix the issues before merging.\"",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 30
      },
      "name": "Comment PR Issues",
      "type": "n8n-nodes-base.executeCommand",
      "position": [1300, 400],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "✅ *CI/CD Pipeline réussie*\n\n{% if $json.prData.prNumber %}\n*Pull Request:* [#{{ $json.prData.prNumber }}]({{ $json.prData.prUrl }}) par {{ $json.prData.prAuthor }}\n*Titre:* {{ $json.prData.prTitle }}\n{% endif %}\n\n📊 *Statistiques:*\n- Tests passés: {{ $json.testsPassed }}\n- Couverture: {{ $json.coverage }}\n- Avertissements de linting: {{ $json.lintWarnings }}\n\n*Timestamp:* {{ $json.timestamp }}",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": true
        }
      },
      "name": "Send Success Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [1500, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "❌ *CI/CD Pipeline échouée*\n\n{% if $json.prData.prNumber %}\n*Pull Request:* [#{{ $json.prData.prNumber }}]({{ $json.prData.prUrl }}) par {{ $json.prData.prAuthor }}\n*Titre:* {{ $json.prData.prTitle }}\n{% endif %}\n\n📊 *Statistiques:*\n- Tests passés: {{ $json.testsPassed }}\n- Tests échoués: {{ $json.testsFailed }}\n- Erreurs de linting: {{ $json.lintErrors }} ({{ $json.lintFixable }} corrigibles)\n\n{% if $json.ciResults.failures.length > 0 %}\n*Échecs de tests:*\n{% for failure in $json.ciResults.failures %}\n- {{ failure }}\n{% endfor %}\n{% endif %}\n\n*Timestamp:* {{ $json.timestamp }}",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": false
        }
      },
      "name": "Send Failure Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [1500, 400],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "audit",
        "table": "ci_cd_runs",
        "columns": "timestamp,success,tests_passed,tests_failed,lint_errors,lint_warnings,pr_number,pr_author",
        "values": "={{ $json.timestamp }},={{ $json.success }},={{ $json.testsPassed }},={{ $json.testsFailed }},={{ $json.lintErrors }},={{ $json.lintWarnings }},={{ $json.prData.prNumber || 'NULL' }},={{ $json.prData.prAuthor || 'scheduled' }}",
        "additionalFields": {}
      },
      "name": "Log to Database",
      "type": "n8n-nodes-base.postgres",
      "position": [1700, 300],
      "typeVersion": 1,
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Postgres Account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Merge Triggers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Webhook": {
      "main": [
        [
          {
            "node": "Merge Triggers",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Triggers": {
      "main": [
        [
          {
            "node": "Is PR Event?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is PR Event?": {
      "main": [
        [
          {
            "node": "Run CI Tests",
            "type": "main",
            "index": 0
          },
          {
            "node": "Run Code Linter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Run CI Tests",
            "type": "main",
            "index": 0
          },
          {
            "node": "Run Code Linter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run CI Tests": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Code Linter": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Pipeline Succeeded?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pipeline Succeeded?": {
      "main": [
        [
          {
            "node": "Approve PR",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Comment PR Issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Approve PR": {
      "main": [
        [
          {
            "node": "Send Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comment PR Issues": {
      "main": [
        [
          {
            "node": "Send Failure Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Success Notification": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Failure Notification": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "tags": ["ci", "cd", "testing", "linting", "automation"]
}