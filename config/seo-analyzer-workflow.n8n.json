{
  "name": "SEO Analyzer Workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 24,
              "unit": "hours"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [100, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/discovery/seo-discovery.ts --source-dir=/workspaces/cahier-des-charge/app/legacy --output-dir=/workspaces/cahier-des-charge/reports/analysis/seo",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 300
      },
      "name": "Discover SEO Elements",
      "type": "n8n-nodes-base.executeCommand",
      "position": [300, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Traiter les résultats de la découverte SEO\nconst output = $input.item.json.stdout || '';\nconst outputDir = '/workspaces/cahier-des-charge/reports/analysis/seo';\nconst timestamp = new Date().toISOString();\nconst fs = require('fs');\nconst path = require('path');\n\ntry {\n  // Extraire les données JSON du résultat\n  const jsonMatch = output.match(/\\{[\\s\\S]*\\}/);\n  \n  if (!jsonMatch) {\n    throw new Error('Aucune donnée JSON trouvée dans la sortie');\n  }\n  \n  const seoData = JSON.parse(jsonMatch[0]);\n  \n  // Traitement et enrichissement des données\n  const processedData = {\n    timestamp,\n    summary: {\n      urlsAnalyzed: seoData.urls ? seoData.urls.length : 0,\n      metaTitleCount: 0,\n      metaDescriptionCount: 0,\n      h1Count: 0,\n      canonicalLinksCount: 0,\n      hreflangCount: 0,\n      structuredDataCount: 0,\n      robotsTxtCount: seoData.robotsTxt ? 1 : 0,\n      sitemapCount: seoData.sitemaps ? seoData.sitemaps.length : 0\n    },\n    pages: [],\n    sitemaps: seoData.sitemaps || [],\n    robotsTxt: seoData.robotsTxt || null,\n    internalLinks: seoData.internalLinks || [],\n    externalLinks: seoData.externalLinks || [],\n    seoIssues: [],\n    migrationRisks: []\n  };\n  \n  // Traiter chaque URL découverte\n  if (seoData.urls && Array.isArray(seoData.urls)) {\n    seoData.urls.forEach(url => {\n      // Enrichir les données de la page\n      const pageData = {\n        url: url.url,\n        path: url.path,\n        metaTitle: url.metaTitle,\n        metaDescription: url.metaDescription,\n        h1: url.h1,\n        h2Count: url.h2Count || 0,\n        h3Count: url.h3Count || 0,\n        imagesCount: url.imagesCount || 0,\n        imagesWithAlt: url.imagesWithAlt || 0,\n        wordCount: url.wordCount || 0,\n        responseCode: url.responseCode || 200,\n        canonicalLink: url.canonicalLink,\n        hreflang: url.hreflang || [],\n        structuredData: url.structuredData || []\n      };\n      \n      // Mettre à jour les compteurs du résumé\n      if (url.metaTitle) processedData.summary.metaTitleCount++;\n      if (url.metaDescription) processedData.summary.metaDescriptionCount++;\n      if (url.h1) processedData.summary.h1Count++;\n      if (url.canonicalLink) processedData.summary.canonicalLinksCount++;\n      if (url.hreflang && url.hreflang.length > 0) processedData.summary.hreflangCount++;\n      if (url.structuredData && url.structuredData.length > 0) processedData.summary.structuredDataCount++;\n      \n      // Vérifier les problèmes SEO courants\n      if (!url.metaTitle) {\n        processedData.seoIssues.push({\n          url: url.url,\n          issue: 'Titre meta manquant',\n          severity: 'high'\n        });\n      } else if (url.metaTitle.length < 10 || url.metaTitle.length > 60) {\n        processedData.seoIssues.push({\n          url: url.url,\n          issue: `Longueur du titre meta non optimale (${url.metaTitle.length} caractères)`,\n          severity: 'medium'\n        });\n      }\n      \n      if (!url.metaDescription) {\n        processedData.seoIssues.push({\n          url: url.url,\n          issue: 'Description meta manquante',\n          severity: 'medium'\n        });\n      } else if (url.metaDescription.length < 50 || url.metaDescription.length > 160) {\n        processedData.seoIssues.push({\n          url: url.url,\n          issue: `Longueur de la description meta non optimale (${url.metaDescription.length} caractères)`,\n          severity: 'low'\n        });\n      }\n      \n      if (!url.h1) {\n        processedData.seoIssues.push({\n          url: url.url,\n          issue: 'Balise H1 manquante',\n          severity: 'high'\n        });\n      }\n      \n      if (url.imagesCount > 0 && url.imagesWithAlt < url.imagesCount) {\n        processedData.seoIssues.push({\n          url: url.url,\n          issue: `${url.imagesCount - url.imagesWithAlt}/${url.imagesCount} images sans attribut alt`,\n          severity: 'medium'\n        });\n      }\n      \n      // Ajouter la page aux données traitées\n      processedData.pages.push(pageData);\n    });\n  }\n  \n  // Identifier les risques de migration\n  if (seoData.urls && seoData.urls.some(url => url.canonicalLink)) {\n    processedData.migrationRisks.push({\n      risk: 'Liens canoniques à préserver pendant la migration',\n      mitigation: 'Implémenter des règles dans Remix pour maintenir les mêmes liens canoniques'\n    });\n  }\n  \n  if (seoData.urls && seoData.urls.some(url => url.hreflang && url.hreflang.length > 0)) {\n    processedData.migrationRisks.push({\n      risk: 'Balises hreflang (internationalisation) à préserver',\n      mitigation: 'Configurer correctement les paramètres régionaux dans l\\'application Remix'\n    });\n  }\n  \n  if (seoData.robotsTxt) {\n    processedData.migrationRisks.push({\n      risk: 'Règles robots.txt à maintenir',\n      mitigation: 'Copier les règles dans le nouveau robots.txt ou implémenter via API Remix'\n    });\n  }\n  \n  if (seoData.redirects && seoData.redirects.length > 0) {\n    processedData.migrationRisks.push({\n      risk: `${seoData.redirects.length} redirections à préserver`,\n      mitigation: 'Implémenter les redirections dans les routes Remix ou au niveau serveur'\n    });\n  }\n  \n  // Sauvegarder les données traitées\n  const processedDataPath = path.join(outputDir, `seo_analysis_${timestamp.replace(/:/g, '-')}.json`);\n  fs.writeFileSync(processedDataPath, JSON.stringify(processedData, null, 2));\n  \n  return {\n    json: {\n      ...processedData,\n      analysisPath: processedDataPath,\n      outputDir\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  };\n}"
      },
      "name": "Process SEO Data",
      "type": "n8n-nodes-base.code",
      "position": [500, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/migration/seo-migration-guide.ts --input-file={{ $json.analysisPath }} --output-dir={{ $json.outputDir }}/guide",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Generate SEO Migration Guide",
      "type": "n8n-nodes-base.executeCommand",
      "position": [700, 100],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/migration/seo-remix-configs.ts --input-file={{ $json.analysisPath }} --output-dir={{ $json.outputDir }}/remix-configs",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Generate SEO Remix Configs",
      "type": "n8n-nodes-base.executeCommand",
      "position": [700, 250],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/migration/seo-generate-redirects.ts --input-file={{ $json.analysisPath }} --output-dir={{ $json.outputDir }}/redirects",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Generate Redirection Maps",
      "type": "n8n-nodes-base.executeCommand",
      "position": [700, 400],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "// Consolider les résultats des différentes générations\nconst analysis = $input.item.json;\nconst timestamp = new Date().toISOString();\n\n// Calculer les métriques globales\nconst metrics = {\n  totalUrls: analysis.summary.urlsAnalyzed,\n  seoIssuesCount: analysis.seoIssues.length,\n  migrationRisksCount: analysis.migrationRisks.length,\n  seoScore: 0,\n  highPriorityIssues: analysis.seoIssues.filter(issue => issue.severity === 'high').length,\n  mediumPriorityIssues: analysis.seoIssues.filter(issue => issue.severity === 'medium').length,\n  lowPriorityIssues: analysis.seoIssues.filter(issue => issue.severity === 'low').length\n};\n\n// Calculer un score SEO simple (0-100)\nif (metrics.totalUrls > 0) {\n  const metaTitleScore = (analysis.summary.metaTitleCount / metrics.totalUrls) * 30;\n  const metaDescScore = (analysis.summary.metaDescriptionCount / metrics.totalUrls) * 20;\n  const h1Score = (analysis.summary.h1Count / metrics.totalUrls) * 20;\n  \n  // Pénalités basées sur les problèmes\n  const highIssuePenalty = Math.min(20, metrics.highPriorityIssues * 2);\n  const mediumIssuePenalty = Math.min(10, metrics.mediumPriorityIssues);\n  \n  metrics.seoScore = Math.round(metaTitleScore + metaDescScore + h1Score + 30 - highIssuePenalty - mediumIssuePenalty);\n}\n\n// Déterminer le niveau de complexité de la migration SEO\nlet migrationComplexity = 'faible';\nif (metrics.highPriorityIssues > 5 || metrics.migrationRisksCount > 3) {\n  migrationComplexity = 'élevée';\n} else if (metrics.highPriorityIssues > 0 || metrics.migrationRisksCount > 0) {\n  migrationComplexity = 'moyenne';\n}\n\nreturn {\n  json: {\n    ...analysis,\n    metrics,\n    migrationComplexity,\n    consolidatedTimestamp: timestamp\n  }\n};"
      },
      "name": "Consolidate Results",
      "type": "n8n-nodes-base.function",
      "position": [900, 250],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "🔍 *Analyse SEO complétée*\n\n📊 *Statistiques:*\n- URLs analysées: {{ $json.summary.urlsAnalyzed }}\n- Score SEO: {{ $json.metrics.seoScore }}/100\n- Problèmes identifiés: {{ $json.metrics.seoIssuesCount }}\n  - Haute priorité: {{ $json.metrics.highPriorityIssues }}\n  - Moyenne priorité: {{ $json.metrics.mediumPriorityIssues }}\n  - Faible priorité: {{ $json.metrics.lowPriorityIssues }}\n- Risques de migration: {{ $json.metrics.migrationRisksCount }}\n\n🔄 *Migration:*\n- Complexité estimée: {{ $json.migrationComplexity }}\n\n✅ *Artifacts générés:*\n- Guide de migration SEO\n- Configurations SEO pour Remix\n- Carte des redirections\n\n*Timestamp:* {{ $json.timestamp }}\n\n[Voir le rapport d'analyse](file://{{ $json.outputDir }})",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": false
        }
      },
      "name": "Send Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [1100, 250],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# Rapport d'analyse SEO - {{ $json.consolidatedTimestamp }}\n\n## Résumé\n\n- **URLs analysées**: {{ $json.summary.urlsAnalyzed }}\n- **Score SEO**: {{ $json.metrics.seoScore }}/100\n- **Complexité de migration**: {{ $json.migrationComplexity }}\n\n## Statistiques\n\n- **Pages avec titre meta**: {{ $json.summary.metaTitleCount }}/{{ $json.summary.urlsAnalyzed }} ({{ Math.round($json.summary.metaTitleCount/$json.summary.urlsAnalyzed*100) }}%)\n- **Pages avec description meta**: {{ $json.summary.metaDescriptionCount }}/{{ $json.summary.urlsAnalyzed }} ({{ Math.round($json.summary.metaDescriptionCount/$json.summary.urlsAnalyzed*100) }}%)\n- **Pages avec H1**: {{ $json.summary.h1Count }}/{{ $json.summary.urlsAnalyzed }} ({{ Math.round($json.summary.h1Count/$json.summary.urlsAnalyzed*100) }}%)\n- **Pages avec liens canoniques**: {{ $json.summary.canonicalLinksCount }}\n- **Pages avec hreflang**: {{ $json.summary.hreflangCount }}\n- **Pages avec données structurées**: {{ $json.summary.structuredDataCount }}\n- **Fichiers sitemap**: {{ $json.summary.sitemapCount }}\n- **Fichier robots.txt**: {{ $json.summary.robotsTxtCount ? 'Présent' : 'Absent' }}\n\n## Problèmes SEO identifiés\n\n{% if $json.seoIssues.length === 0 %}\nAucun problème SEO identifié.\n{% else %}\n### Problèmes de haute priorité\n\n{% for issue in $json.seoIssues %}\n{% if issue.severity === 'high' %}\n- **{{ issue.url }}**: {{ issue.issue }}\n{% endif %}\n{% endfor %}\n\n### Problèmes de priorité moyenne\n\n{% for issue in $json.seoIssues %}\n{% if issue.severity === 'medium' %}\n- **{{ issue.url }}**: {{ issue.issue }}\n{% endif %}\n{% endfor %}\n\n### Problèmes de faible priorité\n\n{% for issue in $json.seoIssues %}\n{% if issue.severity === 'low' %}\n- **{{ issue.url }}**: {{ issue.issue }}\n{% endif %}\n{% endfor %}\n{% endif %}\n\n## Risques de migration\n\n{% if $json.migrationRisks.length === 0 %}\nAucun risque de migration SEO identifié.\n{% else %}\n{% for risk in $json.migrationRisks %}\n### {{ risk.risk }}\n\nMitigation: {{ risk.mitigation }}\n{% endfor %}\n{% endif %}\n\n## Documents générés\n\n- [Guide de migration SEO](file://{{ $json.outputDir }}/guide)\n- [Configurations SEO pour Remix](file://{{ $json.outputDir }}/remix-configs)\n- [Carte des redirections](file://{{ $json.outputDir }}/redirects)\n\n> Ce rapport a été généré automatiquement par le pipeline d'analyse SEO.",
        "destination": "={{ $json.outputDir }}/seo_rapport_{{ $json.consolidatedTimestamp.replace(/:/g, '-') }}.md",
        "options": {}
      },
      "name": "Generate Report",
      "type": "n8n-nodes-base.writeTextFile",
      "position": [1300, 250],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "audit",
        "table": "seo_analyses",
        "columns": "timestamp,urls_analyzed,seo_score,high_priority_issues,medium_priority_issues,low_priority_issues,migration_complexity,report_path",
        "values": "={{ $json.consolidatedTimestamp }},={{ $json.summary.urlsAnalyzed }},={{ $json.metrics.seoScore }},={{ $json.metrics.highPriorityIssues }},={{ $json.metrics.mediumPriorityIssues }},={{ $json.metrics.lowPriorityIssues }},={{ $json.migrationComplexity }},={{ $json.outputDir + '/seo_rapport_' + $json.consolidatedTimestamp.replace(/:/g, '-') + '.md' }}",
        "additionalFields": {}
      },
      "name": "Log to Database",
      "type": "n8n-nodes-base.postgres",
      "position": [1500, 250],
      "typeVersion": 1,
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Postgres Account"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Discover SEO Elements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Discover SEO Elements": {
      "main": [
        [
          {
            "node": "Process SEO Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process SEO Data": {
      "main": [
        [
          {
            "node": "Generate SEO Migration Guide",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate SEO Remix Configs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Redirection Maps",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate SEO Migration Guide": {
      "main": [
        [
          {
            "node": "Consolidate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate SEO Remix Configs": {
      "main": [
        [
          {
            "node": "Consolidate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Redirection Maps": {
      "main": [
        [
          {
            "node": "Consolidate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidate Results": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Report": {
      "main": [
        [
          {
            "node": "Log to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "tags": ["seo", "migration", "analysis", "remix", "web"]
}
