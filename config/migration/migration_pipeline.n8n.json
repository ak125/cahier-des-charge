{
    automatiser ta migration PHP ‚ûù NestJS/Remix avec MySQL + PostgreSQL dans Docker, int√©gr√© √† ton pipeline IA avec MCP et n8n :

    ‚úÖ Plan de g√©n√©ration
    Je vais te livrer les 3 √©l√©ments suivants :
    
    üì¶ docker-compose.dev.yml
    Contient :
    
    MySQL legacy
    
    PostgreSQL interm√©diaire
    
    MCP-ready
    
    Volumes persistants
    
    R√©seau interne
    
    üõ†Ô∏è start_pipeline.sh
    Script shell automatis√© qui fait :
    
    Lancement des containers
    
    Injection des dumps
    
    Lancement des agents MCP (mysql-analyzer, mysql-to-pg, sync-mapper)
    
    G√©n√©ration de schema.prisma
    
    Push dans Supabase (via CLI ou psql)
    
    Lancement de n8n ou appel d‚Äôun webhook
    
    üîÅ n8n.json
    Workflow complet qui :
    
    √âcoute un trigger Supabase (new_audit ou new_data)
    
    D√©clenche la validation (data-verifier.ts)
    
    Signe la migration comme ‚Äúvalid√©e‚Äù
    
    Peut d√©clencher ensuite un dev-generator, une PR GitHub, ou un post-migration-cleaner
    
    üéÅ Bonus (inclus dans les fichiers)
    Variables .env centralis√©es (pour connexions DB, Supabase, etc.)
    
    Compatibilit√© aarch64 si tu es sur ARM
    
    Scripts seed.sql auto-import√©s pour les tests
    
    Tags MCP pour chaque √©tape
    
    Souhaites-tu que je :
    
     T‚Äôaffiche tout dans cette conversation ?
    
     Te g√©n√®re un .zip complet avec tous les fichiers ?
    
     Te push √ßa dans un repo GitHub (via MCP) ?
    
     Active un mode dry-run qui simule tout sans √©crire dans Supabase pour tester en s√©curit√© ?  "name": "Pipeline de Migration PHP ‚Üí NestJS/Remix",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "migration-pipeline",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        300
      ],
      "webhookId": "migration-pipeline"
    },
    {
      "parameters": {
        "functionCode": "// R√©cup√©rer les donn√©es de la requ√™te\nconst payload = $input.item.json;\n\n// Extraire les configurations\nconst config = {\n  source: payload.source || {},\n  target: payload.target || {},\n  tables: payload.tables || 'all',\n  options: payload.options || {},\n  dryRun: payload.dryRun === true,\n  timestamp: new Date().toISOString(),\n  reportPath: payload.reportPath || `/tmp/migration-${Date.now()}`\n};\n\n// G√©n√©rer un ID unique pour cette ex√©cution\nconst runId = `migration-${Date.now()}`;\n\n// Pr√©parer les donn√©es pour les n≈ìuds suivants\nreturn {\n  json: {\n    runId,\n    config,\n    startTime: new Date().toISOString(),\n    status: 'started',\n    steps: [],\n    logs: [],\n    results: {}\n  }\n};"
      },
      "name": "Initialisation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.config.dryRun}}",
              "value2": "true"
            }
          ]
        }
      },
      "name": "Est en Mode Dry Run?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "content": "## Mode Simulation (Dry Run)\n\nCette ex√©cution est en mode simulation. Aucune modification ne sera effectu√©e sur Supabase.",
        "height": 184.19439697542534,
        "width": 345.6748466257669
      },
      "name": "Mode Dry Run",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        650,
        160
      ]
    },
    {
      "parameters": {
        "functionCode": "// Ajouter une entr√©e de log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  $input.item.json.logs.push({ timestamp, level, message });\n};\n\n// Mise √† jour du statut\nconst data = $input.item.json;\ndata.steps.push(\"validate_config\");\n\n// Validation de la configuration\nconst config = data.config;\n\n// Validation de la source (MySQL)\nif (!config.source.host) {\n  addLog('warning', 'H√¥te MySQL non sp√©cifi√©, utilisation de la valeur par d√©faut: mysql-legacy');\n  config.source.host = 'mysql-legacy';\n}\n\nif (!config.source.database) {\n  addLog('warning', 'Base de donn√©es MySQL non sp√©cifi√©e, utilisation de la valeur par d√©faut: legacy_app');\n  config.source.database = 'legacy_app';\n}\n\nif (!config.source.user) {\n  addLog('warning', 'Utilisateur MySQL non sp√©cifi√©, utilisation de la valeur par d√©faut: app_user');\n  config.source.user = 'app_user';\n}\n\nif (!config.source.password) {\n  addLog('warning', 'Mot de passe MySQL non sp√©cifi√©, utilisation de la valeur par d√©faut');\n  config.source.password = 'app_password';\n}\n\n// Validation de la cible (PostgreSQL)\nif (!config.target.host) {\n  addLog('warning', 'H√¥te PostgreSQL non sp√©cifi√©, utilisation de la valeur par d√©faut: postgres-intermediate');\n  config.target.host = 'postgres-intermediate';\n}\n\nif (!config.target.database) {\n  addLog('warning', 'Base de donn√©es PostgreSQL non sp√©cifi√©e, utilisation de la valeur par d√©faut: app_migration');\n  config.target.database = 'app_migration';\n}\n\nif (!config.target.user) {\n  addLog('warning', 'Utilisateur PostgreSQL non sp√©cifi√©, utilisation de la valeur par d√©faut: postgres');\n  config.target.user = 'postgres';\n}\n\nif (!config.target.password) {\n  addLog('warning', 'Mot de passe PostgreSQL non sp√©cifi√©, utilisation de la valeur par d√©faut');\n  config.target.password = 'postgres';\n}\n\n// Validation des options\naddLog('info', `Ex√©cution en mode ${config.dryRun ? 'simulation (dry run)' : 'production'}`);\naddLog('info', `Tables √† migrer: ${config.tables === 'all' ? 'toutes' : config.tables}`);\n\nreturn {\n  json: data\n};"
      },
      "name": "Valider Config",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        850,
        300
      ]
    },
    {
      "parameters": {
        "command": "docker-compose -f docker-compose.dev.yml ps --format json",
        "executeTimeout": 60
      },
      "name": "V√©rifier Docker",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1050,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extraire les informations du r√©sultat de la commande Docker\nconst output = $input.item.json.executeCommandOutput || '';\nlet containers = [];\n\ntry {\n  containers = JSON.parse(output);\n} catch (error) {\n  console.error('Erreur de parsing JSON:', error);\n  // Si le format n'est pas JSON, essayer une autre approche pour extraire les informations\n  // (Certaines versions de docker-compose ne supportent pas --format json)\n  if (output.includes('Up') || output.includes('running')) {\n    containers = output.split('\\n')\n      .filter(line => line.trim())\n      .map(line => {\n        const parts = line.split(/\\s{2,}/);\n        return { name: parts[0], state: parts[3] || '' };\n      });\n  }\n}\n\n// V√©rifier l'√©tat des conteneurs essentiels\nconst requiredContainers = [\n  'mysql-legacy',\n  'postgres-intermediate',\n  'mcp-server-mysql',\n  'mcp-server-postgres'\n];\n\nconst runningContainers = containers.filter(c => \n  c.state?.includes('Up') || c.state?.includes('running')\n).map(c => c.name || c.Service);\n\nconst missingContainers = requiredContainers.filter(\n  name => !runningContainers.some(c => c.includes(name))\n);\n\n// Mettre √† jour l'√©tat\nconst data = $input.item.json;\ndata.steps.push(\"check_docker\");\n\n// Ajouter les infos sur les conteneurs\ndata.dockerStatus = {\n  running: runningContainers,\n  missing: missingContainers,\n  requiresRestart: missingContainers.length > 0\n};\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\nif (missingContainers.length > 0) {\n  addLog('warning', `Conteneurs manquants ou arr√™t√©s: ${missingContainers.join(', ')}`);\n} else {\n  addLog('info', 'Tous les conteneurs Docker requis sont en cours d'ex√©cution');\n}\n\nreturn {\n  json: data\n};"
      },
      "name": "Analyser √âtat Docker",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1250,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.dockerStatus.requiresRestart}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Docker Restart Requis?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1450,
        300
      ]
    },
    {
      "parameters": {
        "command": "docker-compose -f docker-compose.dev.yml up -d",
        "executeTimeout": 180
      },
      "name": "Red√©marrer Docker",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1650,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Attendre un moment pour que les containers d√©marrent\nconst wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));\nawait wait(15000); // 15 secondes\n\n// Ajouter un log\nconst data = $input.item.json;\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\naddLog('info', 'Attente apr√®s red√©marrage des conteneurs Docker');\ndata.steps.push(\"docker_restarted\");\n\nreturn {\n  json: data\n};"
      },
      "name": "Attendre D√©marrage",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1850,
        200
      ]
    },
    {
      "parameters": {
        "command": "=node agents/migration/mysql-to-pg.ts --host={{$json.config.source.host}} --port=3306 --user={{$json.config.source.user}} --password={{$json.config.source.password}} --database={{$json.config.source.database}} --output={{$json.config.reportPath}}/schema_map.json {{$json.config.tables !== 'all' ? '--include-tables=\"' + $json.config.tables + '\"' : ''}} --verbose",
        "executeTimeout": 300
      },
      "name": "Analyser Schema MySQL",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2050,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Traiter le r√©sultat de l'analyse du sch√©ma\nconst output = $input.item.json.executeCommandOutput || '';\nconst data = $input.item.json;\ndata.steps.push(\"analyze_schema\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\n// V√©rifier si l'analyse a r√©ussi\nif (output.includes('Mapping g√©n√©r√© avec succ√®s') || output.includes('Schema map generated successfully')) {\n  addLog('success', 'Analyse du sch√©ma MySQL termin√©e avec succ√®s');\n  \n  // Extraire les informations du sch√©ma\n  const tablesCountMatch = output.match(/(\\d+) tables mapp√©es/);\n  const issuesCountMatch = output.match(/(\\d+) probl√®mes d√©tect√©s/);\n  \n  const tablesCount = tablesCountMatch ? tablesCountMatch[1] : 'inconnu';\n  const issuesCount = issuesCountMatch ? issuesCountMatch[1] : '0';\n  \n  data.schemaAnalysis = {\n    success: true,\n    tablesCount,\n    issuesCount,\n    schemaMapPath: `${data.config.reportPath}/schema_map.json`\n  };\n  \n  addLog('info', `${tablesCount} tables analys√©es, ${issuesCount} probl√®mes d√©tect√©s`);\n} else {\n  addLog('error', '√âchec de l'analyse du sch√©ma MySQL');\n  data.schemaAnalysis = {\n    success: false,\n    error: output.slice(-500) // Derniers 500 caract√®res de l'output pour le diagnostic\n  };\n}\n\nreturn {\n  json: data\n};"
      },
      "name": "Traiter R√©sultat Analyse",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2250,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.schemaAnalysis.success}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Analyse R√©ussie?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2450,
        300
      ]
    },
    {
      "parameters": {
        "command": "=mkdir -p {{$json.config.reportPath}}/prisma && node tools/prisma-generator/generate-prisma.js --schema-map={{$json.config.reportPath}}/schema_map.json --output={{$json.config.reportPath}}/prisma/schema.prisma",
        "executeTimeout": 120
      },
      "name": "G√©n√©rer Schema Prisma",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2650,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Traiter le r√©sultat de la g√©n√©ration du sch√©ma Prisma\nconst output = $input.item.json.executeCommandOutput || '';\nconst data = $input.item.json;\ndata.steps.push(\"generate_prisma\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\n// V√©rifier si la g√©n√©ration a r√©ussi\nif (output.includes('successfully') || output.includes('g√©n√©r√© avec succ√®s')) {\n  addLog('success', 'G√©n√©ration du sch√©ma Prisma termin√©e avec succ√®s');\n  data.prismaGeneration = {\n    success: true,\n    prismaSchemaPath: `${data.config.reportPath}/prisma/schema.prisma`\n  };\n} else {\n  addLog('error', '√âchec de la g√©n√©ration du sch√©ma Prisma');\n  data.prismaGeneration = {\n    success: false,\n    error: output.slice(-500) // Derniers 500 caract√®res de l'output\n  };\n}\n\nreturn {\n  json: data\n};"
      },
      "name": "Traiter R√©sultat Prisma",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2850,
        200
      ]
    },
    {
      "parameters": {
        "command": "=cd tools/migration && node migrate-mysql-to-pg.js --config=../../migration-config.json --schema-map={{$json.config.reportPath}}/schema_map.json {{$json.config.tables !== 'all' ? '--tables=\"' + $json.config.tables + '\"' : ''}} --report-dir={{$json.config.reportPath}}",
        "executeTimeout": 600
      },
      "name": "Migrer Donn√©es",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3050,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Traiter le r√©sultat de la migration des donn√©es\nconst output = $input.item.json.executeCommandOutput || '';\nconst data = $input.item.json;\ndata.steps.push(\"migrate_data\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\n// V√©rifier si la migration a r√©ussi\nif (output.includes('Migration termin√©e avec succ√®s') || output.includes('successfully')) {\n  addLog('success', 'Migration des donn√©es termin√©e avec succ√®s');\n  \n  // Extraire les statistiques de migration si disponibles\n  const tablesMatch = output.match(/(\\d+) tables migr√©es/);\n  const rowsMatch = output.match(/(\\d+) lignes migr√©es/);\n  \n  const tablesCount = tablesMatch ? tablesMatch[1] : 'inconnu';\n  const rowsCount = rowsMatch ? rowsMatch[1] : 'inconnu';\n  \n  data.dataMigration = {\n    success: true,\n    tablesCount,\n    rowsCount,\n    reportPath: `${data.config.reportPath}/migration_report.json`\n  };\n  \n  addLog('info', `${tablesCount} tables et ${rowsCount} lignes migr√©es`);\n} else {\n  addLog('error', '√âchec de la migration des donn√©es');\n  data.dataMigration = {\n    success: false,\n    error: output.slice(-500) // Derniers 500 caract√®res de l'output\n  };\n}\n\nreturn {\n  json: data\n};"
      },
      "name": "Traiter R√©sultat Migration",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3250,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.dataMigration.success}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Migration R√©ussie?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        3450,
        200
      ]
    },
    {
      "parameters": {
        "command": "=node agents/migration/data-verifier.ts --config=migration-config.json {{$json.config.tables !== 'all' ? '--tables=\"' + $json.config.tables + '\"' : ''}} --output={{$json.config.reportPath}}/validation_report.json",
        "executeTimeout": 300
      },
      "name": "V√©rifier Donn√©es",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        3650,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Traiter le r√©sultat de la v√©rification des donn√©es\nconst output = $input.item.json.executeCommandOutput || '';\nconst data = $input.item.json;\ndata.steps.push(\"verify_data\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\n// V√©rifier si la v√©rification a trouv√© des probl√®mes\nif (output.includes('V√©rification termin√©e avec succ√®s') || output.includes('successfully')) {\n  addLog('success', 'V√©rification des donn√©es termin√©e');\n  \n  // Chercher les probl√®mes dans la sortie\n  const problemsMatch = output.match(/(\\d+) probl√®mes d√©tect√©s/);\n  const errorMatch = output.match(/(\\d+) erreurs critiques/);\n  \n  const problemsCount = problemsMatch ? problemsMatch[1] : '0';\n  const errorsCount = errorMatch ? errorsMatch[1] : '0';\n  \n  const hasIssues = parseInt(problemsCount) > 0;\n  const hasCriticalIssues = parseInt(errorsCount) > 0;\n  \n  data.dataVerification = {\n    success: true,\n    hasIssues,\n    hasCriticalIssues,\n    problemsCount,\n    errorsCount,\n    reportPath: `${data.config.reportPath}/validation_report.json`\n  };\n  \n  if (hasIssues) {\n    const level = hasCriticalIssues ? 'warning' : 'info';\n    addLog(level, `V√©rification termin√©e: ${problemsCount} probl√®mes d√©tect√©s, dont ${errorsCount} erreurs critiques`);\n  } else {\n    addLog('info', 'V√©rification termin√©e: aucun probl√®me d√©tect√©');\n  }\n} else {\n  addLog('error', '√âchec de la v√©rification des donn√©es');\n  data.dataVerification = {\n    success: false,\n    error: output.slice(-500) // Derniers 500 caract√®res de l'output\n  };\n}\n\nreturn {\n  json: data\n};"
      },
      "name": "Traiter R√©sultat V√©rification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3850,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.config.dryRun}}",
              "value2": true
            }
          ]
        }
      },
      "name": "Pousser vers Supabase?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        4050,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// G√©n√©rer le script SQL pour Supabase\nconst data = $input.item.json;\ndata.steps.push(\"generate_supabase_sql\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\naddLog('info', 'G√©n√©ration du script SQL pour Supabase...');\n\n// En mode dry-run, on simule cette √©tape\ndata.supabaseGeneration = {\n  success: true,\n  sqlPath: `${data.config.reportPath}/supabase_deploy.sql`,\n  dryRun: true\n};\n\naddLog('info', 'Mode dry-run: g√©n√©ration du script SQL pour Supabase simul√©e');\n\nreturn {\n  json: data\n};"
      },
      "name": "Simuler G√©n√©ration SQL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4250,
        0
      ]
    },
    {
      "parameters": {
        "command": "=node tools/migration/generate-supabase-sql.js --schema-map={{$json.config.reportPath}}/schema_map.json --config=migration-config.json --output={{$json.config.reportPath}}/supabase_deploy.sql",
        "executeTimeout": 120
      },
      "name": "G√©n√©rer SQL Supabase",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4250,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Traiter le r√©sultat de la g√©n√©ration SQL\nconst output = $input.item.json.executeCommandOutput || '';\nconst data = $input.item.json;\ndata.steps.push(\"generate_supabase_sql\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\n// V√©rifier si la g√©n√©ration a r√©ussi\nif (output.includes('generated successfully') || output.includes('g√©n√©r√© avec succ√®s')) {\n  addLog('success', 'G√©n√©ration du script SQL pour Supabase termin√©e avec succ√®s');\n  data.supabaseGeneration = {\n    success: true,\n    sqlPath: `${data.config.reportPath}/supabase_deploy.sql`,\n    dryRun: false\n  };\n} else {\n  addLog('error', '√âchec de la g√©n√©ration du script SQL pour Supabase');\n  data.supabaseGeneration = {\n    success: false,\n    error: output.slice(-500), // Derniers 500 caract√®res de l'output\n    dryRun: false\n  };\n}\n\nreturn {\n  json: data\n};"
      },
      "name": "Traiter G√©n√©ration SQL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4450,
        200
      ]
    },
    {
      "parameters": {
        "command": "=supabase db push --db-url postgresql://{{$json.config.target.user}}:{{$json.config.target.password}}@db.${SUPABASE_PROJECT_ID}.supabase.co:5432/postgres -f {{$json.config.reportPath}}/supabase_deploy.sql",
        "executeTimeout": 300
      },
      "name": "Push vers Supabase",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        4650,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Traiter le r√©sultat du push vers Supabase\nconst output = $input.item.json.executeCommandOutput || '';\nconst data = $input.item.json;\ndata.steps.push(\"push_to_supabase\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\n// V√©rifier si le push a r√©ussi\nif (output.includes('successfully') || output.includes('avec succ√®s')) {\n  addLog('success', 'Push vers Supabase termin√© avec succ√®s');\n  data.supabasePush = {\n    success: true,\n    timestamp: new Date().toISOString()\n  };\n} else {\n  addLog('error', '√âchec du push vers Supabase');\n  data.supabasePush = {\n    success: false,\n    error: output.slice(-500) // Derniers 500 caract√®res de l'output\n  };\n}\n\nreturn {\n  json: data\n};"
      },
      "name": "Traiter Push Supabase",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        4850,
        200
      ]
    },
    {
      "parameters": {
        "command": "=node agents/migration/generate-nestjs-models.js --schema-map={{$json.config.reportPath}}/schema_map.json --output-dir={{$json.config.reportPath}}/transformed_code/server/src/models",
        "executeTimeout": 180
      },
      "name": "G√©n√©rer Mod√®les NestJS",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        5050,
        100
      ]
    },
    {
      "parameters": {
        "command": "=node agents/migration/generate-remix-components.js --schema-map={{$json.config.reportPath}}/schema_map.json --output-dir={{$json.config.reportPath}}/transformed_code/app/components",
        "executeTimeout": 180
      },
      "name": "G√©n√©rer Composants Remix",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        5250,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// G√©n√©rer le rapport final de la migration\nconst data = $input.item.json;\ndata.steps.push(\"generate_report\");\ndata.endTime = new Date().toISOString();\n\n// Calculer la dur√©e totale\nconst startTime = new Date(data.startTime);\nconst endTime = new Date(data.endTime);\nconst durationMs = endTime - startTime;\nconst durationSeconds = Math.floor(durationMs / 1000);\nconst durationMinutes = Math.floor(durationSeconds / 60);\nconst remainingSeconds = durationSeconds % 60;\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\n// R√©capitulatif\naddLog('info', `Migration termin√©e en ${durationMinutes}m ${remainingSeconds}s`);\n\n// Pr√©parer le rapport JSON\ndata.report = {\n  runId: data.runId,\n  timestamp: new Date().toISOString(),\n  duration: {\n    milliseconds: durationMs,\n    seconds: durationSeconds,\n    formatted: `${durationMinutes}m ${remainingSeconds}s`\n  },\n  source: data.config.source,\n  target: data.config.target,\n  options: data.config.options,\n  dryRun: data.config.dryRun,\n  tables: data.config.tables,\n  steps: data.steps,\n  results: {\n    schemaAnalysis: data.schemaAnalysis || { success: false },\n    prismaGeneration: data.prismaGeneration || { success: false },\n    dataMigration: data.dataMigration || { success: false },\n    dataVerification: data.dataVerification || { success: false },\n    supabaseGeneration: data.supabaseGeneration || { success: false, dryRun: data.config.dryRun },\n    supabasePush: data.supabasePush || { success: false }\n  },\n  reportPath: data.config.reportPath\n};\n\n// D√©terminer le statut global\nconst criticalSteps = [\n  data.schemaAnalysis?.success !== false,\n  data.dataMigration?.success !== false\n];\n\nconst allCriticalSuccess = criticalSteps.every(step => step);\ndata.report.status = allCriticalSuccess ? 'success' : 'error';\n\n// G√©n√©rer un rapport Markdown\nlet markdownReport = `# Rapport de migration PHP ‚Üí NestJS/Remix\\n\\n`;\nmarkdownReport += `**Date:** ${new Date().toLocaleString()}\\n\\n`;\nmarkdownReport += `**Dur√©e:** ${durationMinutes}m ${remainingSeconds}s\\n\\n`;\nmarkdownReport += `**Mode:** ${data.config.dryRun ? 'Simulation (dry run)' : 'Production'}\\n\\n`;\n\nmarkdownReport += `## Source\\n\\n`;\nmarkdownReport += `- **MySQL Host:** ${data.config.source.host}\\n`;\nmarkdownReport += `- **MySQL Database:** ${data.config.source.database}\\n\\n`;\n\nmarkdownReport += `## Destination\\n\\n`;\nmarkdownReport += `- **PostgreSQL Host:** ${data.config.target.host}\\n`;\nmarkdownReport += `- **PostgreSQL Database:** ${data.config.target.database}\\n\\n`;\n\nmarkdownReport += `## R√©sultats\\n\\n`;\nmarkdownReport += `### Analyse du sch√©ma\\n\\n`;\nif (data.schemaAnalysis?.success) {\n  markdownReport += `‚úÖ **Succ√®s**: ${data.schemaAnalysis.tablesCount || 'inconnu'} tables analys√©es\\n`;\n} else {\n  markdownReport += `‚ùå **√âchec**: ${data.schemaAnalysis?.error || 'Erreur inconnue'}\\n`;\n}\n\nmarkdownReport += `\\n### G√©n√©ration du sch√©ma Prisma\\n\\n`;\nif (data.prismaGeneration?.success) {\n  markdownReport += `‚úÖ **Succ√®s**: Sch√©ma Prisma g√©n√©r√©\\n`;\n} else {\n  markdownReport += `‚ùå **√âchec**: ${data.prismaGeneration?.error || 'Erreur inconnue'}\\n`;\n}\n\nmarkdownReport += `\\n### Migration des donn√©es\\n\\n`;\nif (data.dataMigration?.success) {\n  markdownReport += `‚úÖ **Succ√®s**: ${data.dataMigration.tablesCount || 'inconnu'} tables et ${data.dataMigration.rowsCount || 'inconnu'} lignes migr√©es\\n`;\n} else {\n  markdownReport += `‚ùå **√âchec**: ${data.dataMigration?.error || 'Erreur inconnue'}\\n`;\n}\n\nmarkdownReport += `\\n### V√©rification des donn√©es\\n\\n`;\nif (data.dataVerification?.success) {\n  if (data.dataVerification.hasIssues) {\n    markdownReport += `‚ö†Ô∏è **Attention**: ${data.dataVerification.problemsCount} probl√®mes d√©tect√©s, dont ${data.dataVerification.errorsCount} erreurs critiques\\n`;\n  } else {\n    markdownReport += `‚úÖ **Succ√®s**: Aucun probl√®me d√©tect√©\\n`;\n  }\n} else {\n  markdownReport += `‚ùå **√âchec**: ${data.dataVerification?.error || 'Erreur inconnue'}\\n`;\n}\n\nmarkdownReport += `\\n### G√©n√©ration SQL pour Supabase\\n\\n`;\nif (data.supabaseGeneration?.dryRun) {\n  markdownReport += `‚ÑπÔ∏è **Mode simulation**: √âtape simul√©e\\n`;\n} else if (data.supabaseGeneration?.success) {\n  markdownReport += `‚úÖ **Succ√®s**: Script SQL g√©n√©r√©\\n`;\n} else {\n  markdownReport += `‚ùå **√âchec**: ${data.supabaseGeneration?.error || 'Erreur inconnue'}\\n`;\n}\n\nmarkdownReport += `\\n### Push vers Supabase\\n\\n`;\nif (data.config.dryRun) {\n  markdownReport += `‚ÑπÔ∏è **Mode simulation**: √âtape ignor√©e\\n`;\n} else if (data.supabasePush?.success) {\n  markdownReport += `‚úÖ **Succ√®s**: Push termin√© vers Supabase\\n`;\n} else {\n  markdownReport += `‚ùå **√âchec**: ${data.supabasePush?.error || 'Erreur inconnue'}\\n`;\n}\n\nmarkdownReport += `\\n## Fichiers g√©n√©r√©s\\n\\n`;\nmarkdownReport += `- **Rapport complet**: ${data.config.reportPath}/migration_report.json\\n`;\nmarkdownReport += `- **Sch√©ma Prisma**: ${data.config.reportPath}/prisma/schema.prisma\\n`;\nmarkdownReport += `- **Rapport de validation**: ${data.config.reportPath}/validation_report.json\\n`;\nif (!data.config.dryRun && data.supabaseGeneration?.success) {\n  markdownReport += `- **Script SQL Supabase**: ${data.config.reportPath}/supabase_deploy.sql\\n`;\n}\n\nmarkdownReport += `\\n## Prochaines √©tapes\\n\\n`;\nmarkdownReport += `1. V√©rifier les mod√®les NestJS g√©n√©r√©s dans ${data.config.reportPath}/transformed_code/server/src/models\\n`;\nmarkdownReport += `2. Examiner les composants Remix dans ${data.config.reportPath}/transformed_code/app/components\\n`;\nmarkdownReport += `3. Compl√©ter les routes et contr√¥leurs manquants\\n`;\n\n// Enregistrer le rapport Markdown\ndata.report.markdownReport = markdownReport;\n\n// Sauvegarder les rapports dans des fichiers (simul√© ici, serait fait par un autre n≈ìud)\ndata.report.files = {\n  json: `${data.config.reportPath}/migration_report.json`,\n  markdown: `${data.config.reportPath}/migration_report.md`\n};\n\nreturn {\n  json: data\n};"
      },
      "name": "G√©n√©rer Rapport Final",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        5450,
        100
      ]
    },
    {
      "parameters": {
        "path": "={{$json.config.reportPath}}/migration_report.json",
        "options": {}
      },
      "name": "Enregistrer Rapport JSON",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        5650,
        0
      ]
    },
    {
      "parameters": {
        "path": "={{$json.config.reportPath}}/migration_report.md",
        "options": {}
      },
      "name": "Enregistrer Rapport MD",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        5650,
        200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://hooks.slack.com/services/{{$node[\"Webhook\"].json[\"slackWebhook\"] || \"YOUR_SLACK_WEBHOOK_PATH\"}}",
        "authentication": "none",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "blocks",
              "value": "=[\n  {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": \"{{$json.report.status === 'success' ? '‚úÖ' : '‚ùå'}} Rapport de Migration PHP ‚Üí NestJS/Remix\",\n      \"emoji\": true\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"fields\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*ID:*\\n{{$json.runId}}\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Dur√©e:*\\n{{$json.report.duration.formatted}}\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Mode:*\\n{{$json.config.dryRun ? 'Simulation' : 'Production'}}\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Statut:*\\n{{$json.report.status === 'success' ? 'Succ√®s' : '√âchec'}}\"\n      }\n    ]\n  },\n  {\n    \"type\": \"divider\"\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"*R√©sultats:*\"\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"fields\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Analyse du sch√©ma:*\\n{{$json.schemaAnalysis?.success ? '‚úÖ Succ√®s' : '‚ùå √âchec'}}\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Migration des donn√©es:*\\n{{$json.dataMigration?.success ? '‚úÖ Succ√®s' : '‚ùå √âchec'}}\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Validation:*\\n{{$json.dataVerification?.success ? ($json.dataVerification.hasIssues ? '‚ö†Ô∏è Probl√®mes' : '‚úÖ Succ√®s') : '‚ùå √âchec'}}\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*Push Supabase:*\\n{{$json.config.dryRun ? '‚ûñ Ignor√©' : ($json.supabasePush?.success ? '‚úÖ Succ√®s' : '‚ùå √âchec')}}\"\n      }\n    ]\n  },\n  {\n    \"type\": \"divider\"\n  },\n  {\n    \"type\": \"context\",\n    \"elements\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"üëâ Rapport complet: `{{$json.config.reportPath}}/migration_report.md`\"\n      }\n    ]\n  }\n]"
            }
          ]
        },
        "options": {}
      },
      "name": "Notifier Slack",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        5850,
        100
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "status",
              "value": "={{$json.report.status}}"
            },
            {
              "name": "message",
              "value": "={{$json.report.status === 'success' ? 'Migration termin√©e avec succ√®s' : '√âchec de la migration'}}"
            },
            {
              "name": "reportPath",
              "value": "={{$json.config.reportPath}}"
            },
            {
              "name": "dryRun",
              "value": "={{$json.config.dryRun}}"
            },
            {
              "name": "duration",
              "value": "={{$json.report.duration.formatted}}"
            }
          ],
          "boolean": [
            {
              "name": "success",
              "value": "={{$json.report.status === 'success'}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Pr√©parer R√©ponse",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        6050,
        100
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        6250,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Signaler l'√©chec de l'analyse du sch√©ma\nconst data = $input.item.json;\ndata.steps.push(\"schema_analysis_failed\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\naddLog('error', 'Migration arr√™t√©e en raison de l\\'√©chec de l\\'analyse du sch√©ma');\ndata.status = 'error';\ndata.endTime = new Date().toISOString();\n\nreturn {\n  json: data\n};"
      },
      "name": "Signaler √âchec Analyse",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2650,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "// Signaler l'√©chec de la migration des donn√©es\nconst data = $input.item.json;\ndata.steps.push(\"data_migration_failed\");\n\n// Ajouter un log\nconst addLog = (level, message) => {\n  const timestamp = new Date().toISOString();\n  data.logs.push({ timestamp, level, message });\n};\n\naddLog('error', 'Migration arr√™t√©e en raison de l\\'√©chec de la migration des donn√©es');\ndata.status = 'error';\ndata.endTime = new Date().toISOString();\n\nreturn {\n  json: data\n};"
      },
      "name": "Signaler √âchec Migration",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3650,
        300
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Initialisation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialisation": {
      "main": [
        [
          {
            "node": "Est en Mode Dry Run?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Est en Mode Dry Run?": {
      "main": [
        [
          {
            "node": "Valider Config",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Valider Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valider Config": {
      "main": [
        [
          {
            "node": "V√©rifier Docker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "V√©rifier Docker": {
      "main": [
        [
          {
            "node": "Analyser √âtat Docker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyser √âtat Docker": {
      "main": [
        [
          {
            "node": "Docker Restart Requis?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Docker Restart Requis?": {
      "main": [
        [
          {
            "node": "Red√©marrer Docker",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analyser Schema MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Red√©marrer Docker": {
      "main": [
        [
          {
            "node": "Attendre D√©marrage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attendre D√©marrage": {
      "main": [
        [
          {
            "node": "Analyser Schema MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyser Schema MySQL": {
      "main": [
        [
          {
            "node": "Traiter R√©sultat Analyse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter R√©sultat Analyse": {
      "main": [
        [
          {
            "node": "Analyse R√©ussie?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyse R√©ussie?": {
      "main": [
        [
          {
            "node": "G√©n√©rer Schema Prisma",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Signaler √âchec Analyse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "G√©n√©rer Schema Prisma": {
      "main": [
        [
          {
            "node": "Traiter R√©sultat Prisma",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter R√©sultat Prisma": {
      "main": [
        [
          {
            "node": "Migrer Donn√©es",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Migrer Donn√©es": {
      "main": [
        [
          {
            "node": "Traiter R√©sultat Migration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter R√©sultat Migration": {
      "main": [
        [
          {
            "node": "Migration R√©ussie?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Migration R√©ussie?": {
      "main": [
        [
          {
            "node": "V√©rifier Donn√©es",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Signaler √âchec Migration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "V√©rifier Donn√©es": {
      "main": [
        [
          {
            "node": "Traiter R√©sultat V√©rification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter R√©sultat V√©rification": {
      "main": [
        [
          {
            "node": "Pousser vers Supabase?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pousser vers Supabase?": {
      "main": [
        [
          {
            "node": "Simuler G√©n√©ration SQL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "G√©n√©rer SQL Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simuler G√©n√©ration SQL": {
      "main": [
        [
          {
            "node": "G√©n√©rer Mod√®les NestJS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "G√©n√©rer SQL Supabase": {
      "main": [
        [
          {
            "node": "Traiter G√©n√©ration SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter G√©n√©ration SQL": {
      "main": [
        [
          {
            "node": "Push vers Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Push vers Supabase": {
      "main": [
        [
          {
            "node": "Traiter Push Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter Push Supabase": {
      "main": [
        [
          {
            "node": "G√©n√©rer Mod√®les NestJS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "G√©n√©rer Mod√®les NestJS": {
      "main": [
        [
          {
            "node": "G√©n√©rer Composants Remix",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "G√©n√©rer Composants Remix": {
      "main": [
        [
          {
            "node": "G√©n√©rer Rapport Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "G√©n√©rer Rapport Final": {
      "main": [
        [
          {
            "node": "Enregistrer Rapport JSON",
            "type": "main",
            "index": 0
          },
          {
            "node": "Enregistrer Rapport MD",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notifier Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enregistrer Rapport JSON": {
      "main": [
        [
          {
            "node": "Pr√©parer R√©ponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enregistrer Rapport MD": {
      "main": [
        [
          {
            "node": "Pr√©parer R√©ponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notifier Slack": {
      "main": [
        [
          {
            "node": "Pr√©parer R√©ponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pr√©parer R√©ponse": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Signaler √âchec Analyse": {
      "main": [
        [
          {
            "node": "G√©n√©rer Rapport Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Signaler √âchec Migration": {
      "main": [
        [
          {
            "node": "G√©n√©rer Rapport Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "tags": [
    {
      "name": "migration"
    },
    {
      "name": "php"
    },
    {
      "name": "nestjs"
    },
    {
      "name": "remix"
    },
    {
      "name": "mysql"
    },
    {
      "name": "postgresql"
    },
    {
      "name": "supabase"
    }
  ],
  "pinData": {},
  "staticData": null,
  "versionId": "",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b9a17f80ea7358abb56c038ea2ff8a4f6c52627299848f5a6a8f173d176b1685"
  }
}