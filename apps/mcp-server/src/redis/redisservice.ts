import { Injectable, Logger, OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import Redis from 'ioredis';

/**
 * Interface pour les options de Redis Stack avec RedisJSON
 */
export interface RedisStackOptions {
  host?: string;
  port?: number;
  username?: string;
  password?: string;
  db?: number;
  enableRedisJson?: boolean;
}

@Injectable()
export class RedisService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(RedisService.name);
  private client: Redis;
  private hasRedisJson = false;

  constructor() {
    const options: RedisStackOptions = {
      host: process.env.REDIS_HOST || 'localhost',
      port: parseInt(process.env.REDIS_PORT || '6379'),
      username: process.env.REDIS_USERNAME,
      password: process.env.REDIS_PASSWORD,
      enableRedisJson: process.env.ENABLE_REDIS_JSON !== 'false',
    };

    this.client = new Redis({
      host: options.host,
      port: options.port,
      username: options.username,
      password: options.password,
      db: options.db || 0,
    });
  }

  async onModuleInit() {
    this.logger.log('üîå Connexion √† Redis √©tablie');

    this.client.on('error', (err) => {
      this.logger.error(`‚ùå Erreur Redis: ${err.message}`);
    });

    // V√©rifier la pr√©sence du module RedisJSON
    try {
      const modules = await this.client.call('MODULE', ['LIST']);
      this.hasRedisJson = Array.isArray(modules) &&
        modules.some((module: any) =>
          module[1] === 'ReJSON' || module[1] === 'rejson'
        );

      if (this.hasRedisJson) {
        this.logger.log('‚úÖ Module RedisJSON d√©tect√© et activ√©');
      } else {
        this.logger.warn('‚ö†Ô∏è Module RedisJSON non d√©tect√©. Les op√©rations JSON natives ne seront pas disponibles.');
      }
    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è Impossible de v√©rifier les modules Redis: ${(error as Error).message}`);
    }
  }

  async onModuleDestroy() {
    this.logger.log('üîå Fermeture de la connexion Redis');
    await this.client.quit();
  }

  /**
   * Publie un message sur un canal Redis
   */
  async publish(channel: string, message: string): Promise<number> {
    try {
      const result = await this.client.publish(channel, message);
      this.logger.debug(`üì¢ Message publi√© sur le canal ${channel}`);
      return result;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la publication sur ${channel}: ${error.message}`);
      throw error;
    }
  }

  /**
   * S'abonne √† un canal Redis et ex√©cute un callback lorsqu'un message est re√ßu
   */
  async subscribe(channel: string, callback: (message: string) => void): Promise<void> {
    const subscriber = this.client.duplicate();

    subscriber.on('message', (chan, message) => {
      if (chan === channel) {
        this.logger.debug(`üì© Message re√ßu sur le canal ${channel}`);
        callback(message);
      }
    });

    await subscriber.subscribe(channel);
    this.logger.log(`üëÇ Abonnement au canal ${channel} r√©ussi`);
  }

  /**
   * Sauvegarde une valeur dans Redis
   */
  async set(key: string, value: string, ttl?: number): Promise<string> {
    try {
      let result: string;

      if (ttl) {
        result = await this.client.set(key, value, 'EX', ttl);
      } else {
        result = await this.client.set(key, value);
      }

      this.logger.debug(`üíæ Valeur d√©finie pour la cl√© ${key}`);
      return result;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la d√©finition de la cl√© ${key}: ${error.message}`);
      throw error;
    }
  }

  /**
   * R√©cup√®re une valeur depuis Redis
   */
  async get(key: string): Promise<string | null> {
    try {
      const value = await this.client.get(key);
      this.logger.debug(`üîç Valeur r√©cup√©r√©e pour la cl√© ${key}`);
      return value;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la r√©cup√©ration de la cl√© ${key}: ${error.message}`);
      throw error;
    }
  }

  /**
   * Supprime une cl√© de Redis
   */
  async delete(key: string): Promise<number> {
    try {
      const result = await this.client.del(key);
      this.logger.debug(`üóëÔ∏è Cl√© ${key} supprim√©e`);
      return result;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la suppression de la cl√© ${key}: ${error.message}`);
      throw error;
    }
  }

  /**
   * Ajoute une valeur √† une liste
   */
  async rpush(key: string, value: string): Promise<number> {
    try {
      const result = await this.client.rpush(key, value);
      this.logger.debug(`‚ûï Valeur ajout√©e √† la liste ${key}`);
      return result;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de l'ajout √† la liste ${key}: ${error.message}`);
      throw error;
    }
  }

  /**
   * R√©cup√®re tous les √©l√©ments d'une liste
   */
  async lrange(key: string, start = 0, stop = -1): Promise<string[]> {
    try {
      const result = await this.client.lrange(key, start, stop);
      this.logger.debug(`üîç Liste ${key} r√©cup√©r√©e (${result.length} √©l√©ments)`);
      return result;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la r√©cup√©ration de la liste ${key}: ${(error as Error).message}`);
      throw error;
    }
  }

  /**
   * V√©rifie si le module RedisJSON est disponible
   */
  isRedisJsonAvailable(): boolean {
    return this.hasRedisJson;
  }

  /**
   * Stocke une valeur JSON dans Redis (n√©cessite RedisJSON)
   * @param key Cl√© Redis
   * @param path Chemin JSON (par d√©faut '.')
   * @param json Object JSON √† stocker
   */
  async jsonSet(key: string, path = '.', json: any): Promise<string | null> {
    try {
      if (!this.hasRedisJson) {
        this.logger.warn('‚ö†Ô∏è RedisJSON non disponible. La valeur sera stock√©e comme JSON s√©rialis√©.');
        return this.set(key, JSON.stringify(json));
      }

      const result = await this.client.call('JSON.SET', [key, path, JSON.stringify(json)]);
      this.logger.debug(`üíæ JSON stock√© √† la cl√© ${key}, chemin ${path}`);
      return result as string;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors du stockage JSON ${key}: ${(error as Error).message}`);
      throw error;
    }
  }

  /**
   * R√©cup√®re une valeur JSON depuis Redis (n√©cessite RedisJSON)
   * @param key Cl√© Redis
   * @param path Chemin JSON (par d√©faut '.')
   */
  async jsonGet(key: string, path = '.'): Promise<any> {
    try {
      if (!this.hasRedisJson) {
        this.logger.warn('‚ö†Ô∏è RedisJSON non disponible. La valeur sera d√©s√©rialis√©e depuis une cha√Æne JSON.');
        const value = await this.get(key);
        return value ? JSON.parse(value) : null;
      }

      const result = await this.client.call('JSON.GET', [key, path]);
      return result ? JSON.parse(result as string) : null;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la r√©cup√©ration JSON ${key}: ${(error as Error).message}`);
      throw error;
    }
  }

  /**
   * Ajoute une valeur √† un tableau JSON (n√©cessite RedisJSON)
   * @param key Cl√© Redis
   * @param path Chemin JSON vers le tableau
   * @param values Valeurs √† ajouter
   */
  async jsonArrAppend(key: string, path: string, ...values: any[]): Promise<number | null> {
    try {
      if (!this.hasRedisJson) {
        throw new Error('RedisJSON non disponible. Cette op√©ration n√©cessite RedisJSON.');
      }

      const args = [key, path];
      values.forEach(value => args.push(JSON.stringify(value)));

      const result = await this.client.call('JSON.ARRAPPEND', args);
      return result as number;
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de l'ajout au tableau JSON ${key}: ${(error as Error).message}`);
      throw error;
    }
  }

  /**
   * Met en ≈ìuvre le pattern Stale-While-Revalidate pour la r√©cup√©ration de donn√©es
   * @param key Cl√© Redis pour la mise en cache
   * @param fetchFn Fonction de r√©cup√©ration des donn√©es fra√Æches
   * @param ttl Dur√©e de vie du cache en secondes
   * @param staleTime Dur√©e pendant laquelle les donn√©es sont consid√©r√©es "fra√Æches" en secondes
   */
  async getWithSWR<T>(
    key: string,
    fetchFn: () => Promise<T>,
    ttl = 3600,
    staleTime = 300
  ): Promise<T> {
    try {
      // R√©cup√©rer la valeur en cache
      const cachedData = await this.get(`${key}:data`);
      const cachedTime = await this.get(`${key}:time`);

      if (cachedData) {
        // Donn√©e trouv√©e en cache
        const timestamp = cachedTime ? parseInt(cachedTime, 10) : 0;
        const now = Date.now();

        // Si les donn√©es sont encore fra√Æches, les retourner imm√©diatement
        if (now - timestamp < staleTime * 1000) {
          return JSON.parse(cachedData);
        }

        // Les donn√©es sont p√©rim√©es, mais utilisables
        // D√©clencher une mise √† jour en arri√®re-plan et retourner les donn√©es p√©rim√©es
        this.refreshCacheAsync(key, fetchFn, ttl).catch(err =>
          this.logger.error(`‚ùå Erreur lors de la mise √† jour asynchrone du cache pour ${key}: ${(err as Error).message}`)
        );

        return JSON.parse(cachedData);
      }

      // Aucune donn√©e en cache, r√©cup√©rer les donn√©es fra√Æches
      return this.refreshCache(key, fetchFn, ttl);
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de l'utilisation de SWR pour ${key}: ${(error as Error).message}`);
      // En cas d'erreur, tenter de r√©cup√©rer les donn√©es fra√Æches
      return fetchFn();
    }
  }

  /**
   * Rafra√Æchit le cache avec de nouvelles donn√©es
   */
  private async refreshCache<T>(key: string, fetchFn: () => Promise<T>, ttl: number): Promise<T> {
    const data = await fetchFn();
    const now = Date.now();

    await this.set(`${key}:data`, JSON.stringify(data), ttl);
    await this.set(`${key}:time`, now.toString(), ttl);

    return data;
  }

  /**
   * Version asynchrone de refreshCache pour les mises √† jour en arri√®re-plan
   */
  private async refreshCacheAsync<T>(key: string, fetchFn: () => Promise<T>, ttl: number): Promise<void> {
    try {
      await this.refreshCache(key, fetchFn, ttl);
      this.logger.debug(`‚ôªÔ∏è Cache mis √† jour en arri√®re-plan pour ${key}`);
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la mise √† jour du cache pour ${key}: ${(error as Error).message}`);
    }
  }
}
