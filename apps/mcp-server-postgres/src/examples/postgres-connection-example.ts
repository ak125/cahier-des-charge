/**
 * Exemple d'utilisation du service de connexion √† PostgreSQL
 */

import { DatabaseConnectionService } from '../services/database-connection-service';

/**
 * Fonction principale pour d√©montrer l'utilisation du service de connexion
 */
async function main() {
  // Cr√©er une instance du service avec une cha√Æne de connexion
  const connectionString = 'postgresql://migration:migration_password@localhost:5432/migration_db?schema=public';
  const dbService = new DatabaseConnectionService(connectionString);
  
  // Configurer des √©couteurs d'√©v√©nements pour surveiller les activit√©s
  dbService.on('connected', () => {
    console.log('üîå Connect√© √† la base de donn√©es PostgreSQL');
  });
  
  dbService.on('disconnected', () => {
    console.log('üîå D√©connect√© de la base de donn√©es PostgreSQL');
  });
  
  dbService.on('error', (error) => {
    console.error('‚ùå Erreur de base de donn√©es:', error.message);
  });
  
  dbService.on('query', (query, params, duration) => {
    console.log(`‚è±Ô∏è Requ√™te ex√©cut√©e en ${duration}ms: ${query.substring(0, 80)}${query.length > 80 ? '...' : ''}`);
  });
  
  try {
    // Se connecter √† la base de donn√©es
    await dbService.connect();
    
    // Lister les sch√©mas disponibles
    const schemas = await dbService.listSchemas();
    console.log('üìä Sch√©mas disponibles:', schemas);
    
    // Ex√©cuter une requ√™te simple
    const result = await dbService.executeQuery('SELECT current_database() as db, current_user as user, version() as version');
    console.log('‚ÑπÔ∏è Informations sur la base de donn√©es:', result.rows[0]);
    
    // Utiliser une transaction
    await dbService.withTransaction(async (client) => {
      // Cr√©er une table temporaire pour le test
      await client.query(`
        CREATE TEMPORARY TABLE IF NOT EXISTS test_table (
          id SERIAL PRIMARY KEY,
          name TEXT NOT NULL,
          created_at TIMESTAMP DEFAULT NOW()
        )
      `);
      
      // Ins√©rer des donn√©es
      await client.query(`
        INSERT INTO test_table (name) VALUES 
        ('Test 1'), 
        ('Test 2'), 
        ('Test 3')
      `);
      
      // Lire les donn√©es
      const data = await client.query('SELECT * FROM test_table');
      console.log('üìù Donn√©es de test:', data.rows);
      
      // Supprimer la table (pas vraiment n√©cessaire pour une table temporaire)
      await client.query('DROP TABLE test_table');
      
      console.log('‚úÖ Transaction compl√©t√©e avec succ√®s');
    });
    
    // Obtenir les statistiques du pool
    const poolStats = dbService.getPoolStats();
    console.log('üìä Statistiques du pool:', poolStats);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution de l\'exemple:', error.message);
  } finally {
    // Fermer la connexion proprement
    await dbService.disconnect();
  }
}

// Ex√©cuter l'exemple si ce fichier est appel√© directement
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
    process.exit(1);
  });
}

// Exporter la fonction main pour une utilisation externe
export { main };