name: Agents IA CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/business/src/**/agent*.ts'
      - 'packages/coordination/**/agent*.ts'
      - 'packages/orchestration/src/**/agent*.ts'
  pull_request:
    paths:
      - 'packages/business/src/**/agent*.ts'
      - 'packages/coordination/**/agent*.ts'
      - 'packages/orchestration/src/**/agent*.ts'
  workflow_dispatch:
    inputs:
      agent_name:
        description: "Nom de l'agent √† d√©ployer (laisser vide pour tous)"
        required: false
        type: string

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  # D√©tection des agents affect√©s
  detect-agents:
    name: D√©tection des agents
    runs-on: ubuntu-latest
    outputs:
      affected_agents: ${{ steps.set-agents.outputs.affected_agents }}
      agent_matrix: ${{ steps.set-matrix.outputs.agent_matrix }}
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Installation de PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Installation des d√©pendances
        run: pnpm install --frozen-lockfile

      - name: D√©tection des agents affect√©s
        id: set-agents
        run: |
          if [ -n "${{ github.event.inputs.agent_name }}" ]; then
            # Si un agent sp√©cifique est demand√©
            AFFECTED_AGENTS="${{ github.event.inputs.agent_name }}"
          else
            # Sinon, d√©tecter les agents affect√©s par les changements
            AFFECTED_AGENTS=$(node ./tools/scripts/ci/detect-affected-agents.js)
          fi
          echo "affected_agents=${AFFECTED_AGENTS}" >> $GITHUB_OUTPUT
          echo "Agents affect√©s: ${AFFECTED_AGENTS}"

      - name: G√©n√©ration de la matrice d'agents
        id: set-matrix
        run: |
          if [ -n "${{ github.event.inputs.agent_name }}" ]; then
            # Si un agent sp√©cifique est demand√©, cr√©er une matrice avec un seul √©l√©ment
            echo "agent_matrix=[\"${{ github.event.inputs.agent_name }}\"]" >> $GITHUB_OUTPUT
          else
            # G√©n√©rer la matrice √† partir des agents affect√©s
            AGENT_MATRIX=$(node ./tools/scripts/ci/generate-agent-matrix.js)
            echo "agent_matrix=${AGENT_MATRIX}" >> $GITHUB_OUTPUT
          fi

  # Lint sp√©cifique pour les agents
  agent-lint:
    name: Lint des agents
    needs: detect-agents
    if: ${{ needs.detect-agents.outputs.affected_agents != '' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Installation de PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Installation des d√©pendances
        run: pnpm install --frozen-lockfile

      - name: Lint des agents
        run: pnpm nx run agents:lint

      # Ajout d'une v√©rification sp√©cifique pour les agents √† base d'IA
      - name: Validation du mod√®le et des prompts
        run: pnpm tsx packages/agents/tools/validate-prompts.ts

  # Test des agents avec une matrice parall√®le
  agent-test:
    name: Test de l'agent ${{ matrix.agent }}
    needs: [detect-agents, agent-lint]
    if: ${{ needs.detect-agents.outputs.agent_matrix != '[]' && needs.detect-agents.outputs.agent_matrix != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        agent: ${{ fromJson(needs.detect-agents.outputs.agent_matrix) }}
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Installation de PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Installation des d√©pendances
        run: pnpm install --frozen-lockfile

      - name: Test de l'agent ${{ matrix.agent }}
        run: pnpm tsx packages/agents/utils/test-runner.ts --agent=${{ matrix.agent }} --ci

      - name: Upload des r√©sultats de test
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.agent }}
          path: test-results/${{ matrix.agent }}
          if-no-files-found: warn

  # Build et packaging des agents
  agent-build:
    name: Build des agents
    needs: [agent-test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Installation de PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Installation des d√©pendances
        run: pnpm install --frozen-lockfile

      - name: Build des agents
        run: pnpm nx build agents

      - name: Upload des agents compil√©s
        uses: actions/upload-artifact@v3
        with:
          name: agent-build
          path: dist/packages/agents
          if-no-files-found: warn

  # D√©ploiement des agents
  agent-deploy:
    name: D√©ploiement des agents
    needs: [agent-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: agent-production
      url: https://agents.example.com/status
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: T√©l√©chargement des artefacts de build
        uses: actions/download-artifact@v3
        with:
          name: agent-build
          path: dist/packages/agents

      - name: Pr√©paration du d√©ploiement
        run: |
          echo "Pr√©paration du d√©ploiement des agents"
          pnpm tsx tools/scripts/ci/prepare-agent-deployment.js

      - name: D√©ploiement des agents
        run: |
          echo "D√©ploiement des agents..."
          pnpm tsx tools/scripts/ci/deploy-agents.js
          echo "Agents d√©ploy√©s avec succ√®s !"

      - name: V√©rification du d√©ploiement
        run: |
          echo "V√©rification du d√©ploiement des agents"
          pnpm tsx packages/agents/monitoring/verify-agent-deployment.ts

      - name: Notification du d√©ploiement
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'agent-deployments'
          slack-message: "ü§ñ Agents IA d√©ploy√©s avec succ√®s ! V√©rifier le tableau de bord : https://agents.example.com/status"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}