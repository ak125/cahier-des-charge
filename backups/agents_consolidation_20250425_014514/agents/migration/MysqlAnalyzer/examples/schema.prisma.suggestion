// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        BigInt     @id @default(autoincrement())
  email     String     @unique
  password  String
  status    UserStatus @default(ACTIVE)
  isAdmin   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  
  profile   Profile?
  orders    Order[]
  sessions  Session[]

  @@map("users")
}

model Profile {
  id        BigInt     @id @default(autoincrement())
  userId    BigInt     @unique
  fullName  String?
  phone     String?
  avatarUrl String?
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("profiles")
}

model Order {
  id          BigInt      @id @default(autoincrement())
  userId      BigInt
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(10, 2) @default(0.00)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         BigInt   @id @default(autoincrement())
  orderId    BigInt
  productId  BigInt
  quantity   Int      @default(1)
  unitPrice  Decimal  @db.Decimal(10, 2) @default(0.00)
  createdAt  DateTime @default(now())
  
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Cette relation est implicite et nécessite une table products 
  // qui n'était pas définie dans le schéma d'origine
  // product  Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Session {
  id           String    @id
  userId       BigInt?
  ipAddress    String?   @db.VarChar(45)
  userAgent    String?
  payload      String
  lastActivity Int
  
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([lastActivity])
  @@map("sessions")
}