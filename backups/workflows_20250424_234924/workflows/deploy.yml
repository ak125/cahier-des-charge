name: MCP Deploy

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      feature_flags:
        description: 'Activer les feature flags (séparés par virgule)'
        required: false
        type: string

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate environment-specific config
        run: |
          ENV=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
          echo "Generating config for environment: $ENV"
          
          # Générer la configuration spécifique à l'environnement
          node scripts/generate-env-config.js $ENV
          
          # Configuration des feature flags
          if [ "${{ github.event.inputs.feature_flags }}" != "" ]; then
            node scripts/configure-feature-flags.js "${{ github.event.inputs.feature_flags }}"
          fi

      - name: Database Migrate
        run: |
          ENV=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
          
          if [ "$ENV" = "production" ]; then
            # En production, prévisualiser les migrations d'abord
            echo "Preview des migrations en production..."
            pnpm prisma migrate deploy --preview-only
            
            # Générer un rapport de migration
            pnpm prisma-diff generate-report
            
            # Attendre la confirmation manuelle pour les migrations de production
            # (Cette étape est simulée ici, dans un vrai workflow, vous utiliseriez
            # GitHub Actions environments avec des approbations requises)
          fi
          
          # Exécuter les migrations avec la stratégie appropriée
          echo "Application des migrations pour $ENV..."
          pnpm prisma migrate deploy

      - name: Build
        run: pnpm build
        env:
          NODE_ENV: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}

      - name: Deploy Backend
        run: |
          ENV=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
          
          if [ "$ENV" = "production" ]; then
            # Déploiement progressif en production
            echo "Déploiement progressif pour la production..."
            node scripts/deploy-with-canary.js
          else
            # Déploiement direct pour staging
            echo "Déploiement direct pour staging..."
            node scripts/deploy.js $ENV
          fi
        
      - name: Deploy Frontend
        run: |
          ENV=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
          
          if [ "$ENV" = "production" ]; then
            # Déploiement avec CDN invalidation
            echo "Déploiement frontend avec invalidation CDN..."
            node scripts/deploy-frontend.js $ENV --invalidate-cdn
          else
            echo "Déploiement frontend standard..."
            node scripts/deploy-frontend.js $ENV
          fi

      - name: Run Post-Deploy Tests
        run: |
          ENV=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
          echo "Exécution des tests post-déploiement pour $ENV..."
          
          # Attendre que les services soient prêts
          sleep 30
          
          # Vérifications de base
          node scripts/healthcheck.js
          
          # Tests de bout en bout
          if [ "$ENV" = "staging" ]; then
            pnpm test:e2e
          fi

      - name: Notify Deployment Status
        if: always()
        run: |
          ENV=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'staging' || 'production') }}
          STATUS=${{ job.status }}
          
          if [ "$STATUS" = "success" ]; then
            echo "Notification de déploiement réussi..."
            node scripts/notify-deploy-success.js $ENV
          else
            echo "Notification d'échec de déploiement..."
            node scripts/notify-deploy-failure.js $ENV
          fi

  rollback:
    name: Rollback (if needed)
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && (github.event.inputs.environment == 'production' || github.ref == 'refs/heads/production')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Perform Rollback
        run: |
          echo "Exécution du rollback de déploiement..."
          node scripts/rollback.js production

      - name: Notify Rollback Status
        if: always()
        run: |
          STATUS=${{ job.status }}
          
          if [ "$STATUS" = "success" ]; then
            echo "Notification de rollback réussi..."
            node scripts/notify-rollback-success.js
          else
            echo "Notification d'échec de rollback..."
            node scripts/notify-rollback-failure.js
          fi