name: MCP Migration CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - 'packages/**'
      - 'prisma/**'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test
      
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm db:generate
        
      - name: Build
        run: pnpm build

      - name: Run tests
        run: pnpm test

  qa-checks:
    name: QA Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Run QA Analyzer
        id: qa-analyze
        run: |
          RESULTS=$(pnpm --filter @mcp/agents run qa-analyzer --mode=ci)
          echo "::set-output name=results::$RESULTS"

      - name: Check QA score
        run: |
          QA_SCORE=$(echo '${{ steps.qa-analyze.outputs.results }}' | jq -r '.score')
          if (( $(echo "$QA_SCORE < 80" | bc -l) )); then
            echo "QA score $QA_SCORE is below threshold of 80%. Check the report for details."
            exit 1
          fi

      - name: Generate QA Report
        run: |
          echo '${{ steps.qa-analyze.outputs.results }}' > qa-report.json
          # Script pour générer un rapport HTML à partir des résultats JSON
          node scripts/generate-qa-report.js qa-report.json qa-report.html

      - name: Upload QA Report
        uses: actions/upload-artifact@v2
        with:
          name: qa-report
          path: qa-report.html

  seo-checks:
    name: SEO Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Run SEO Checker
        id: seo-check
        run: |
          RESULTS=$(pnpm --filter @mcp/agents run seo-checker --mode=ci)
          echo "::set-output name=results::$RESULTS"

      - name: Check SEO score
        run: |
          SEO_SCORE=$(echo '${{ steps.seo-check.outputs.results }}' | jq -r '.score')
          if (( $(echo "$SEO_SCORE < 85" | bc -l) )); then
            echo "SEO score $SEO_SCORE is below threshold of 85%. Check the report for details."
            exit 1
          fi

      - name: Generate SEO Report
        run: |
          echo '${{ steps.seo-check.outputs.results }}' > seo-report.json
          # Script pour générer un rapport HTML à partir des résultats JSON
          node scripts/generate-seo-report.js seo-report.json seo-report.html

      - name: Upload SEO Report
        uses: actions/upload-artifact@v2
        with:
          name: seo-report
          path: seo-report.html

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright
        run: pnpm --filter @mcp/frontend exec playwright install --with-deps

      - name: Build frontend
        run: pnpm --filter @mcp/frontend build

      - name: Start frontend server
        run: pnpm --filter @mcp/frontend start & sleep 5

      - name: Run visual tests
        run: pnpm --filter @mcp/frontend test:visual

      - name: Upload visual comparison results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: visual-comparison
          path: apps/frontend/visual-regression-test/comparison

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [qa-checks, seo-checks, visual-regression]
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Deploy Preview Environment
        id: deploy-preview
        run: |
          # Script pour déployer un environnement de prévisualisation
          # Utilisation de Vercel, Netlify, ou votre propre solution
          PREVIEW_URL=$(node scripts/deploy-preview.js)
          echo "::set-output name=url::$PREVIEW_URL"

      - name: Comment PR with Preview URL
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const previewUrl = '${{ steps.deploy-preview.outputs.url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ PR previews are ready! Check it out at: ${previewUrl}`
            })