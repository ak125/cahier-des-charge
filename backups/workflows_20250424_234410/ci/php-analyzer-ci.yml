name: MCP PHP Analyzer CI/CD Pipeline

on:
  push:
    branches: [main, master]
    paths:
      - 'apps/mcp-server-php/**'
      - '.github/workflows/php-analyzer-ci.yml'
      - 'config/supabase-rls-policies.sql'
      - 'Dockerfile.supabase'
  pull_request:
    branches: [main, master]
    paths:
      - 'apps/mcp-server-php/**'
      - 'config/supabase-rls-policies.sql'
  workflow_dispatch:
    inputs:
      deploy_production:
        description: 'Déployer en production'
        required: false
        type: boolean
        default: false
      update_workflows:
        description: 'Mettre à jour les workflows n8n'
        required: false
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Test
        run: |
          cd apps/mcp-server-php
          docker build -t mcp-php-analyzer:test .
          # Exécution des tests dans le contexte de l'image
          docker run --rm mcp-php-analyzer:test npm test

      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/mcp-server-php
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mcp-php-analyzer:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mcp-php-analyzer:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mcp-php-analyzer:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mcp-php-analyzer:buildcache,mode=max

  supabase-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify Supabase SQL Files
        run: |
          mkdir -p ./.supabase/migration/
          cp ./config/supabase-rls-policies.sql ./.supabase/migration/
          
          # Créer le dossier de schema initial si nécessaire
          mkdir -p ./config/migration/supabase/
          
          # Vérifier si le fichier de schéma initial existe
          if [ ! -f "./config/migration/supabase/01_init_schema.sql" ]; then
            echo "-- Création du schéma initial pour l'analyse PHP
            CREATE SCHEMA IF NOT EXISTS php_analysis;
            
            -- Table des fichiers PHP analysés
            CREATE TABLE IF NOT EXISTS php_analysis.files (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                file_path TEXT NOT NULL,
                last_analyzed TIMESTAMP WITH TIME ZONE DEFAULT now(),
                complexity_score NUMERIC NOT NULL DEFAULT 0,
                maintainability_index NUMERIC DEFAULT 0,
                loc INTEGER NOT NULL DEFAULT 0,
                user_id UUID
            );
            
            -- Table des métriques
            CREATE TABLE IF NOT EXISTS php_analysis.metrics (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                file_id UUID REFERENCES php_analysis.files(id) ON DELETE CASCADE,
                metric_type TEXT NOT NULL,
                metric_value JSONB NOT NULL,
                analyzed_at TIMESTAMP WITH TIME ZONE DEFAULT now()
            );
            
            -- Table des alertes/problèmes
            CREATE TABLE IF NOT EXISTS php_analysis.alerts (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                file_id UUID REFERENCES php_analysis.files(id) ON DELETE CASCADE,
                alert_type TEXT NOT NULL,
                severity TEXT NOT NULL,
                message TEXT NOT NULL,
                line_number INTEGER,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
                resolved BOOLEAN DEFAULT false
            );
            
            -- Table des fonctions/méthodes
            CREATE TABLE IF NOT EXISTS php_analysis.functions (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                file_id UUID REFERENCES php_analysis.files(id) ON DELETE CASCADE,
                name TEXT NOT NULL,
                type TEXT NOT NULL,
                complexity INTEGER NOT NULL DEFAULT 0,
                parameters_count INTEGER DEFAULT 0,
                lines INTEGER DEFAULT 0,
                analyzed_at TIMESTAMP WITH TIME ZONE DEFAULT now()
            );" > ./config/migration/supabase/01_init_schema.sql
          fi
          
          # Copier les fichiers de migration
          cp ./config/migration/supabase/01_init_schema.sql ./.supabase/migration/

      - name: Start Supabase Local Development
        run: |
          supabase init
          supabase start

      - name: Run Supabase Migrations
        run: |
          supabase db push

      - name: Apply RLS Policies
        run: |
          supabase db execute --file=./config/supabase-rls-policies.sql

      - name: Build Supabase Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile.supabase
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mcp-supabase:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mcp-supabase:${{ github.sha }}

  deploy:
    needs: [build, supabase-setup]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.deploy_production)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create combined deployment
        run: |
          cat > docker-compose.php-analyzer.yml << EOF
          version: '3.8'
          services:
            php-analyzer:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/mcp-php-analyzer:${{ github.sha }}
              restart: unless-stopped
              volumes:
                - ./php-code:/code-to-analyze
              environment:
                - NODE_ENV=production
                - SUPABASE_URL=${SUPABASE_URL}
                - SUPABASE_KEY=${SUPABASE_KEY}
                - WEBHOOK_URL=${N8N_WEBHOOK_URL}
            
            supabase-db:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/mcp-supabase:${{ github.sha }}
              restart: unless-stopped
              environment:
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
              volumes:
                - supabase-data:/var/lib/postgresql/data
              ports:
                - "5432:5432"
          
          volumes:
            supabase-data:
          EOF

      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            cd /opt/migration-platform
            
            # Arrêter les services existants
            docker-compose down php-analyzer || true
            docker-compose down supabase-db || true
            
            # Obtenir le nouveau docker-compose
            curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3.raw" \
                 -o docker-compose.php-analyzer.yml \
                 https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/docker-compose.php-analyzer.yml
            
            # Démarrer les services
            export SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            export SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
            export N8N_WEBHOOK_URL=${{ secrets.N8N_WEBHOOK_URL }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            
            docker-compose -f docker-compose.php-analyzer.yml pull
            docker-compose -f docker-compose.php-analyzer.yml up -d
            
            echo "MCP PHP Analyzer avec Supabase déployé avec succès à $(date)"

  update-n8n:
    needs: [deploy]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.update_workflows)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Import n8n workflows
        run: |
          npm install n8n -g
          
          # Importer le workflow d'analyse PHP
          n8n import:workflow --input=./config/n8n-php-analyzer-webhook.json --userId=1
          
          # Importer le workflow d'alertes de complexité
          n8n import:workflow --input=./config/n8n-php-complexity-alerts.json --userId=1
          
          echo "Workflows n8n mis à jour avec succès"
        env:
          N8N_PROTOCOL: https
          N8N_HOST: ${{ secrets.N8N_HOST }}
          N8N_PORT: 443
          N8N_PATH: /
          N8N_SKIP_WEBHOOK_DEREGISTRATION: true
          N8N_API_KEY: ${{ secrets.N8N_API_KEY }}