name: Audit du Pipeline MCP

on:
  # Ex√©cution automatique chaque jour √† minuit
  schedule:
    - cron: '0 0 * * *'
  
  # Ex√©cution automatique lors d'un changement sur les fichiers MCPManifest.json
  push:
    paths:
      - '**/MCPManifest.json'
      - 'agents/status-auditor.ts'
      - 'agents/trace-verifier.ts'
      - 'pipeline.audit.config.json'
  
  # Ex√©cution manuelle depuis l'interface GitHub
  workflow_dispatch:
    inputs:
      notification_level:
        description: 'Niveau de notification'
        required: true
        default: 'normal'
        type: choice
        options:
          - minimal
          - normal
          - detailed

jobs:
  run-pipeline-audit:
    runs-on: ubuntu-latest
    name: Ex√©cuter l'audit du pipeline MCP
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # R√©cup√©rer l'historique complet pour une meilleure analyse

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: V√©rifier la configuration du pipeline
        run: |
          if [ ! -f "pipeline.audit.config.json" ]; then
            echo "‚ùå Fichier de configuration pipeline.audit.config.json non trouv√©"
            exit 1
          fi
          echo "‚úÖ Configuration du pipeline valid√©e"
          
      - name: Ex√©cuter l'audit des statuts
        id: status-audit
        run: |
          echo "üîç Ex√©cution de status-auditor.ts..."
          npx ts-node agents/status-auditor.ts
          
          if [ -f "status-audit-report.json" ]; then
            ISSUES_COUNT=$(jq '.issues | length' status-audit-report.json)
            COMPLETION_RATE=$(jq '.statistics.completionRate' status-audit-report.json)
            
            echo "issues_count=$ISSUES_COUNT" >> $GITHUB_OUTPUT
            echo "completion_rate=$COMPLETION_RATE" >> $GITHUB_OUTPUT
            
            echo "üìä Rapport d'audit g√©n√©r√©: $ISSUES_COUNT probl√®mes identifi√©s"
            echo "üìà Taux de compl√©tion: $COMPLETION_RATE%"
            
            # Copier le rapport dans le dossier de rapports pour archivage
            mkdir -p reports/pipeline_audits/$(date +%Y-%m-%d)
            cp status-audit-report.json reports/pipeline_audits/$(date +%Y-%m-%d)/status-audit-report.json
          else
            echo "‚ùå √âchec de g√©n√©ration du rapport d'audit des statuts"
            exit 1
          fi

      - name: Ex√©cuter la v√©rification des traces
        id: trace-verify
        run: |
          echo "üïµÔ∏è Ex√©cution de trace-verifier.ts..."
          npx ts-node agents/trace-verifier.ts
          
          if [ -f "trace-verification-report.json" ]; then
            TRACES_WITH_MISSING=$(jq '.tracesWithMissing' trace-verification-report.json)
            COMPLETION_PERCENTAGE=$(jq '.completionPercentage' trace-verification-report.json)
            
            echo "traces_with_missing=$TRACES_WITH_MISSING" >> $GITHUB_OUTPUT
            echo "completion_percentage=$COMPLETION_PERCENTAGE" >> $GITHUB_OUTPUT
            
            echo "üìä Rapport de v√©rification des traces g√©n√©r√©: $TRACES_WITH_MISSING traces incompl√®tes"
            echo "üìà Pourcentage de compl√©tion: $COMPLETION_PERCENTAGE%"
            
            # Copier le rapport dans le dossier de rapports pour archivage
            mkdir -p reports/pipeline_audits/$(date +%Y-%m-%d)
            cp trace-verification-report.json reports/pipeline_audits/$(date +%Y-%m-%d)/trace-verification-report.json
          else
            echo "‚ùå √âchec de g√©n√©ration du rapport de v√©rification des traces"
            exit 1
          fi
      
      - name: G√©n√©rer le rapport de tendance
        run: |
          echo "üìà G√©n√©ration du rapport de tendance..."
          
          # Cr√©er un script pour analyser les tendances des rapports pr√©c√©dents
          cat > generate-trend-report.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          // Fonction pour lire les rapports d'une date sp√©cifique
          function readReportsForDate(date) {
            const dateFolder = path.join('reports', 'pipeline_audits', date);
            try {
              if (!fs.existsSync(dateFolder)) return null;
              
              const statusReport = JSON.parse(fs.readFileSync(
                path.join(dateFolder, 'status-audit-report.json'), 'utf8'
              ));
              
              const traceReport = JSON.parse(fs.readFileSync(
                path.join(dateFolder, 'trace-verification-report.json'), 'utf8'
              ));
              
              return { date, statusReport, traceReport };
            } catch (error) {
              console.error(`Erreur lors de la lecture des rapports pour ${date}:`, error.message);
              return null;
            }
          }
          
          // Obtenir les 7 derniers jours
          function getLast7Days() {
            const dates = [];
            for (let i = 0; i < 7; i++) {
              const date = new Date();
              date.setDate(date.getDate() - i);
              dates.push(date.toISOString().split('T')[0]);
            }
            return dates;
          }
          
          // Analyser les tendances
          function analyzeTrends() {
            const dates = getLast7Days();
            const reports = dates.map(readReportsForDate).filter(Boolean);
            
            if (reports.length === 0) {
              console.log('Aucun rapport trouv√© pour les 7 derniers jours');
              return {
                dates: [],
                completionRates: [],
                issuesCounts: [],
                tracesWithMissing: []
              };
            }
            
            // Extraire les donn√©es pour les graphiques
            const trendData = {
              dates: reports.map(r => r.date),
              completionRates: reports.map(r => r.statusReport.statistics.completionRate || 0),
              issuesCounts: reports.map(r => r.statusReport.issues.length || 0),
              tracesWithMissing: reports.map(r => r.traceReport.tracesWithMissing || 0)
            };
            
            // Analyser si la tendance s'am√©liore
            const improvingCompletionRate = trendData.completionRates.length >= 2 && 
              trendData.completionRates[0] > trendData.completionRates[trendData.completionRates.length - 1];
            
            const decreasingIssues = trendData.issuesCounts.length >= 2 && 
              trendData.issuesCounts[0] < trendData.issuesCounts[trendData.issuesCounts.length - 1];
            
            // Sauvegarder le rapport de tendance
            const trendReport = {
              data: trendData,
              analysis: {
                improvingCompletionRate,
                decreasingIssues,
                latestCompletionRate: trendData.completionRates[0] || 0,
                latestIssuesCount: trendData.issuesCounts[0] || 0
              }
            };
            
            fs.writeFileSync('pipeline-trend-report.json', JSON.stringify(trendReport, null, 2));
            console.log('‚úÖ Rapport de tendance g√©n√©r√©');
            
            return trendReport;
          }
          
          analyzeTrends();
          EOF
          
          node generate-trend-report.js
          
          if [ -f "pipeline-trend-report.json" ]; then
            echo "‚úÖ Rapport de tendance g√©n√©r√© avec succ√®s"
            mkdir -p reports/pipeline_audits/$(date +%Y-%m-%d)
            cp pipeline-trend-report.json reports/pipeline_audits/$(date +%Y-%m-%d)/pipeline-trend-report.json
          else
            echo "‚ö†Ô∏è Impossible de g√©n√©rer le rapport de tendance"
          fi

      - name: Analyser les r√©sultats des audits
        id: analyze-results
        run: |
          ISSUES_COUNT="${{ steps.status-audit.outputs.issues_count }}"
          COMPLETION_RATE="${{ steps.status-audit.outputs.completion_rate }}"
          TRACES_WITH_MISSING="${{ steps.trace-verify.outputs.traces_with_missing }}"
          
          # D√©terminer la gravit√© des probl√®mes
          if [ "$COMPLETION_RATE" -lt 50 ] || [ "$ISSUES_COUNT" -gt 20 ]; then
            SEVERITY="critical"
            echo "severity=critical" >> $GITHUB_OUTPUT
            echo "‚ùå CRITIQUE: Taux de compl√©tion trop bas ou trop de probl√®mes d√©tect√©s"
          elif [ "$COMPLETION_RATE" -lt 75 ] || [ "$ISSUES_COUNT" -gt 10 ]; then
            SEVERITY="warning"
            echo "severity=warning" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è AVERTISSEMENT: Des probl√®mes significatifs d√©tect√©s dans le pipeline"
          else
            SEVERITY="info"
            echo "severity=info" >> $GITHUB_OUTPUT
            echo "‚úÖ Bon √©tat g√©n√©ral du pipeline"
          fi
          
          # Cr√©er un r√©sum√© pour les notifications
          SUMMARY="Audit du Pipeline MCP ($(date +%Y-%m-%d))\n"
          SUMMARY+="- Taux de compl√©tion: $COMPLETION_RATE%\n"
          SUMMARY+="- Probl√®mes d√©tect√©s: $ISSUES_COUNT\n"
          SUMMARY+="- Traces incompl√®tes: $TRACES_WITH_MISSING\n"
          
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Mettre √† jour le tableau de bord
        run: |
          echo "üìä Mise √† jour des donn√©es du tableau de bord..."
          
          # Copier les fichiers pour le tableau de bord
          mkdir -p apps/admin-dashboard/public/data/pipeline-audit
          cp status-audit-report.json apps/admin-dashboard/public/data/pipeline-audit/
          cp trace-verification-report.json apps/admin-dashboard/public/data/pipeline-audit/
          
          if [ -f "pipeline-trend-report.json" ]; then
            cp pipeline-trend-report.json apps/admin-dashboard/public/data/pipeline-audit/
          fi
          
          # Cr√©er un fichier de derni√®re mise √† jour
          echo "{\"lastUpdated\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\"}" > apps/admin-dashboard/public/data/pipeline-audit/last-update.json
          
          echo "‚úÖ Donn√©es du tableau de bord mises √† jour"

      - name: Alerter en cas de probl√®mes critiques
        if: steps.analyze-results.outputs.severity == 'critical'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Cr√©er une issue pour les probl√®mes critiques
            const issueBody = `
            # ‚ùå Probl√®mes critiques d√©tect√©s dans le pipeline MCP
            
            L'audit automatique du pipeline a d√©tect√© des probl√®mes critiques qui n√©cessitent une attention imm√©diate.
            
            ## R√©sum√©
            ${process.env.SUMMARY.replace(/\\n/g, '\n')}
            
            ## D√©tails
            - Taux de compl√©tion: ${process.env.COMPLETION_RATE}% (seuil critique: <50%)
            - Nombre de probl√®mes: ${process.env.ISSUES_COUNT} (seuil critique: >20)
            - Traces incompl√®tes: ${process.env.TRACES_WITH_MISSING}
            
            ## Actions requises
            1. V√©rifier les migrations bloqu√©es
            2. Identifier les agents non ex√©cut√©s
            3. Mettre √† jour les migrations obsol√®tes
            
            [Voir le rapport complet](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Alerte Pipeline MCP - Probl√®mes Critiques (${new Date().toISOString().split('T')[0]})`,
              body: issueBody,
              labels: ['pipeline-alert', 'critical']
            });

      - name: Envoyer notification Slack
        if: steps.analyze-results.outputs.severity != 'info' || github.event_name == 'workflow_dispatch'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "${{ steps.analyze-results.outputs.severity == 'critical' ? ':red_circle:' : ':warning:' }} Audit Pipeline MCP",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.analyze-results.outputs.severity == 'critical' ? ':red_circle: ALERTE CRITIQUE' : ':warning: Avertissement' }} - Audit Pipeline MCP",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.analyze-results.outputs.summary }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Taux de compl√©tion:*\n${{ steps.status-audit.outputs.completion_rate }}%"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Probl√®mes d√©tect√©s:*\n${{ steps.status-audit.outputs.issues_count }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Voir les d√©tails",
                        "emoji": true
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Archiver les rapports d'audit
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-audit-reports
          path: |
            status-audit-report.json
            trace-verification-report.json
            pipeline-trend-report.json