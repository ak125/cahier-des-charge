name: V√©rification Qualit√© Dev

on:
  push:
    branches: [main, master, develop]
    paths:
      - 'remix-nestjs-monorepo/**'
      - 'prisma/**'
  pull_request:
    branches: [main, master, develop]
    paths:
      - 'remix-nestjs-monorepo/**'
      - 'prisma/**'
  workflow_dispatch:
    inputs:
      target_directory:
        description: 'Dossier sp√©cifique √† v√©rifier (optionnel)'
        required: false
        default: ''

jobs:
  dev-check:
    name: Dev Checker
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma client
        run: npx prisma generate
      
      - name: Run Dev Checker
        id: dev-checker
        run: |
          if [ -n "${{ github.event.inputs.target_directory }}" ]; then
            npx ts-node ./agents/dev-checker.ts "${{ github.event.inputs.target_directory }}"
          else
            # V√©rifier uniquement les fichiers modifi√©s pour les PR
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(ts|tsx)$' | tr '\n' ' ')
              if [ -n "$CHANGED_FILES" ]; then
                npx ts-node ./agents/dev-checker.ts $CHANGED_FILES
              else
                echo "Aucun fichier TypeScript modifi√©"
                exit 0
              fi
            else
              npx ts-node ./agents/dev-checker.ts
            fi
          fi
      
      - name: Upload Dev Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dev-check-report
          path: |
            reports/dev_check_report.md
            reports/dev_check_failures.json
            logs/dev_check_logs.txt
      
      - name: Comment PR with report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            try {
              const reportPath = 'reports/dev_check_report.md';
              if (fs.existsSync(reportPath)) {
                const reportContent = fs.readFileSync(reportPath, 'utf8');
                
                // Extraire le r√©sum√© pour le commentaire
                const summary = reportContent.split('## D√©tails par fichier')[0];
                
                // Extraire les erreurs critiques pour les mettre en √©vidence
                const failuresPath = 'reports/dev_check_failures.json';
                let criticalIssues = '';
                
                if (fs.existsSync(failuresPath)) {
                  const failures = JSON.parse(fs.readFileSync(failuresPath, 'utf8'));
                  const criticalFiles = failures.filter(f => 
                    f.file.includes('schema.prisma') || 
                    f.file.includes('controller.ts') || 
                    f.file.includes('app.module.ts') ||
                    f.file.includes('routes.ts')
                  );
                  
                  if (criticalFiles.length > 0) {
                    criticalIssues = '\n\n### ‚ö†Ô∏è Probl√®mes critiques d√©tect√©s\n\n';
                    criticalFiles.forEach(file => {
                      criticalIssues += `- **${file.file}**: ${file.errors.join(', ')}\n`;
                    });
                  }
                }
                
                // Cr√©er le commentaire
                const comment = `# üß™ R√©sultats de la v√©rification du code\n\n${summary}${criticalIssues}\n\n[Voir le rapport complet](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Erreur lors de la cr√©ation du commentaire:', error);
            }
      
      - name: Check for critical failures
        if: always()
        run: |
          if [ -f "reports/dev_check_failures.json" ]; then
            CRITICAL_COUNT=$(cat reports/dev_check_failures.json | grep -c -E 'schema.prisma|controller.ts|app.module.ts|routes.ts')
            if [ $CRITICAL_COUNT -gt 0 ]; then
              echo "::error::Des probl√®mes critiques ont √©t√© d√©tect√©s dans des fichiers importants. Veuillez corriger ces probl√®mes avant de fusionner."
              exit 1
            fi
          fi