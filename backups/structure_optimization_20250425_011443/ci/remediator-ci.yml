name: Rem√©diation Automatique des Divergences

on:
  workflow_dispatch:
    inputs:
      file:
        description: 'Fichier PHP sp√©cifique √† corriger'
        required: false
        type: string
      directory:
        description: 'R√©pertoire √† traiter'
        required: false
        type: string
      batch_mode:
        description: 'Mode batch (traiter tous les fichiers divergents)'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Mode simulation (sans modification)'
        required: false
        type: boolean
        default: false
      auto_verify:
        description: 'Ex√©cuter diff-verifier apr√®s la rem√©diation'
        required: false
        type: boolean
        default: true
      generate_report:
        description: 'G√©n√©rer un rapport HTML'
        required: false
        type: boolean
        default: true
      max_concurrent:
        description: 'Nombre maximum de corrections simultan√©es'
        required: false
        type: number
        default: 5

jobs:
  remediate-code:
    name: Rem√©diation automatique des divergences
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Installation de pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Installation des d√©pendances
        run: pnpm install
      
      - name: D√©tection des fichiers modifi√©s (Pull Request)
        if: github.event_name == 'pull_request' && !github.event.inputs.file && !github.event.inputs.directory && !github.event.inputs.batch_mode
        id: changed_files
        run: |
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.php$' | tr '\n' ' ')
          echo "files=${FILES}" >> $GITHUB_OUTPUT
      
      - name: Ex√©cution de la rem√©diation en mode manuel
        if: github.event_name == 'workflow_dispatch'
        run: |
          ARGS=""
          
          if [ -n "${{ github.event.inputs.file }}" ]; then
            ARGS="--file=${{ github.event.inputs.file }}"
          fi
          
          if [ -n "${{ github.event.inputs.directory }}" ]; then
            ARGS="--dir=${{ github.event.inputs.directory }}"
          fi
          
          if [ "${{ github.event.inputs.batch_mode }}" == "true" ]; then
            ARGS="--batch"
          fi
          
          if [ "${{ github.event.inputs.dry_run }}" == "true" ]; then
            ARGS="$ARGS --dry-run"
          fi
          
          if [ "${{ github.event.inputs.generate_report }}" == "true" ]; then
            ARGS="$ARGS --report"
          fi
          
          if [ -n "${{ github.event.inputs.max_concurrent }}" ]; then
            ARGS="$ARGS --max-concurrent=${{ github.event.inputs.max_concurrent }}"
          fi
          
          echo "Ex√©cution avec arguments: $ARGS"
          ./bin/remediator.sh $ARGS
      
      - name: Ex√©cution de la rem√©diation en mode batch (Push)
        if: github.event_name == 'push'
        run: ./bin/remediator.sh --batch --report
      
      - name: Ex√©cution de la rem√©diation pour les fichiers modifi√©s (Pull Request)
        if: github.event_name == 'pull_request' && !github.event.inputs.file && !github.event.inputs.directory && !github.event.inputs.batch_mode
        run: |
          # Pour chaque fichier PHP modifi√©, corriger les divergences
          for FILE in ${{ steps.changed_files.outputs.files }}; do
            if [[ $FILE == *.php ]]; then
              echo "Correction du fichier: $FILE"
              ./bin/remediator.sh --file=$FILE
            fi
          done
      
      - name: V√©rification apr√®s rem√©diation (si activ√©e)
        if: github.event.inputs.auto_verify == 'true' || github.event_name == 'push'
        run: |
          echo "Ex√©cution de la v√©rification apr√®s rem√©diation"
          
          ARGS=""
          
          if [ -n "${{ github.event.inputs.file }}" ]; then
            ARGS="--file ${{ github.event.inputs.file }}"
          fi
          
          if [ -n "${{ github.event.inputs.directory }}" ]; then
            ARGS="--dir ${{ github.event.inputs.directory }}"
          fi
          
          if [ "${{ github.event.inputs.batch_mode }}" == "true" ] || [ "${{ github.event_name }}" == "push" ]; then
            ARGS="--batch"
          fi
          
          if [ "${{ github.event.inputs.generate_report }}" == "true" ]; then
            ARGS="$ARGS --report"
          fi
          
          ./bin/diff-verifier.sh $ARGS
      
      - name: Publier l'artefact de rapport de rem√©diation
        if: github.event.inputs.generate_report == 'true' || github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: remediation-report
          path: reports/remediation_summary.html
          if-no-files-found: ignore
      
      - name: Publier l'artefact d'index de v√©rification
        if: github.event.inputs.auto_verify == 'true' || github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: verification-index
          path: reports/verifier_index.json
          if-no-files-found: ignore
      
      - name: Cr√©ation d'un commentaire dans la PR avec r√©sum√©
        if: github.event_name == 'pull_request' && (github.event.inputs.generate_report == 'true' || github.event_name == 'push')
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              let body = `## üõ†Ô∏è R√©sultats de la rem√©diation automatique\n\n`;
              
              if (fs.existsSync('./reports/remediation_summary.html')) {
                const remediationStats = {
                  total: 0,
                  success: 0,
                  partial: 0,
                  failed: 0
                };
                
                // Extraire les statistiques du rapport (impl√©mentation simplifi√©e)
                const reportContent = fs.readFileSync('./reports/remediation_summary.html', 'utf8');
                const successMatch = reportContent.match(/R√©ussis: (\d+)/);
                const partialMatch = reportContent.match(/Partiels: (\d+)/);
                const failedMatch = reportContent.match(/√âchecs: (\d+)/);
                
                if (successMatch) remediationStats.success = parseInt(successMatch[1]);
                if (partialMatch) remediationStats.partial = parseInt(partialMatch[1]);
                if (failedMatch) remediationStats.failed = parseInt(failedMatch[1]);
                remediationStats.total = remediationStats.success + remediationStats.partial + remediationStats.failed;
                
                body += `### R√©sum√©\n`;
                body += `- ‚úÖ Fichiers trait√©s: ${remediationStats.total}\n`;
                body += `- ‚úì Corrections r√©ussies: ${remediationStats.success}\n`;
                body += `- ‚ö†Ô∏è Corrections partielles: ${remediationStats.partial}\n`;
                body += `- ‚ùå √âchecs: ${remediationStats.failed}\n\n`;
                
                body += `[Voir le rapport complet](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})\n\n`;
              } else {
                body += `Aucun rapport de rem√©diation g√©n√©r√©.\n\n`;
              }
              
              if (fs.existsSync('./reports/verifier_index.json') && 
                  (github.event.inputs.auto_verify == 'true' || github.event_name == 'push')) {
                const index = JSON.parse(fs.readFileSync('./reports/verifier_index.json', 'utf8'));
                
                body += `### Statut apr√®s v√©rification\n`;
                body += `- ‚úÖ Fichiers v√©rifi√©s: ${index.verifiedCount}\n`;
                body += `- ‚ö†Ô∏è Fichiers divergents: ${index.divergentCount}\n`;
                body += `- üî¥ Fichiers critiques: ${index.criticalCount}\n`;
                
                if (index.divergentCount > 0 || index.criticalCount > 0) {
                  body += `\n‚ö†Ô∏è **Des divergences persistent. Une intervention manuelle peut √™tre n√©cessaire.**\n`;
                } else if (index.verifiedCount > 0) {
                  body += `\n‚úÖ **Toutes les divergences ont √©t√© corrig√©es avec succ√®s!**\n`;
                }
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error(`Erreur lors de la cr√©ation du commentaire: ${error}`);
            }