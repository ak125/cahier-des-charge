{
  "id": "multi-agent-audit-pipeline",
  "name": "Pipeline d'Audit Multi-Agents",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 * * *"
            }
          ]
        }
      },
      "name": "Déclencheur Quotidien",
      "type": "n8n-nodes-base.cron",
      "position": [
        100,
        200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "triggerTimes": {}
      },
      "name": "Trigger Manuel",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        100,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "httpMethod": "POST",
        "path": "audit-trigger",
        "options": {
          "responseMode": "responseNode",
          "responseData": "firstEntryJson"
        }
      },
      "name": "Webhook GitHub",
      "type": "n8n-nodes-base.webhook",
      "position": [
        100,
        480
      ],
      "webhookId": "audit-php-files-webhook",
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ !!$json.body && !!$json.body.repository && $json.body.ref === 'refs/heads/legacy-integration' }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Est Branch Legacy?",
      "type": "n8n-nodes-base.if",
      "position": [
        300,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "mergeByPosition"
      },
      "name": "Merge Déclencheurs",
      "type": "n8n-nodes-base.merge",
      "position": [
        500,
        340
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/discovery/discovery-agent.ts",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 300
      },
      "name": "Exécuter Discovery Agent",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        700,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "// Lire la configuration du pipeline\nconst fs = require('fs');\nconst path = require('path');\n\nconst configPath = '/workspaces/cahier-des-charge/config/audit-pipeline-config.json';\nlet config;\n\ntry {\n  const configContent = fs.readFileSync(configPath, 'utf8');\n  config = JSON.parse(configContent).pipelineConfig;\n} catch (error) {\n  throw new Error(`Erreur lors de la lecture de la configuration: ${error.message}`);\n}\n\nreturn {\n  json: {\n    pipelineConfig: config,\n    timestamp: new Date().toISOString(),\n    maxFilesToProcess: config.maxFilesPerRun || 5,\n    highPriorityThreshold: config.highPriorityThreshold || 8\n  }\n};"
      },
      "name": "Charger Configuration",
      "type": "n8n-nodes-base.function",
      "position": [
        900,
        340
      ]
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/discovery/audit-selector.ts --max-files={{ $json.maxFilesToProcess }} --priority-threshold={{ $json.highPriorityThreshold }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 60
      },
      "name": "Exécuter Audit Selector",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        1100,
        340
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extraction des fichiers PHP sélectionnés depuis la sortie JSON\nconst output = $input.item.json.stdout || '';\n\ntry {\n  // Extraction de la liste JSON des fichiers\n  const jsonMatch = output.match(/\\[.*?\\]/s);\n  \n  if (!jsonMatch) {\n    throw new Error('Aucune liste de fichiers trouvée dans la sortie');\n  }\n  \n  const selectedFiles = JSON.parse(jsonMatch[0]);\n  \n  if (!Array.isArray(selectedFiles) || selectedFiles.length === 0) {\n    return [\n      {\n        json: {\n          message: 'Aucun fichier à analyser pour cette exécution',\n          timestamp: new Date().toISOString(),\n          selectedFiles: [],\n          pipelineConfig: $input.item.json.pipelineConfig\n        }\n      }\n    ];\n  }\n  \n  // Retourner un item pour chaque fichier sélectionné\n  return selectedFiles.map(filePath => ({\n    json: {\n      filePath,\n      fileName: filePath.split('/').pop(),\n      timestamp: new Date().toISOString(),\n      batchId: new Date().toISOString().replace(/[:.]/g, '-'),\n      selectionMethod: 'intelligent-selector',\n      pipelineConfig: $input.item.json.pipelineConfig,\n      outputDir: `/workspaces/cahier-des-charge/reports/analysis/${filePath.split('/').pop().replace('.php', '')}`\n    }\n  }));\n} catch (error) {\n  throw new Error(`Erreur lors du traitement de la sortie: ${error.message}`);\n}"
      },
      "name": "Traiter Liste Fichiers",
      "type": "n8n-nodes-base.code",
      "position": [
        1300,
        340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ Object.keys($json).includes('filePath') }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Fichiers Trouvés?",
      "type": "n8n-nodes-base.if",
      "position": [
        1500,
        340
      ]
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "🔍 *Pipeline d'audit multi-agents*\n\nAucun fichier prioritaire n'a été trouvé pour cette exécution.\n\n*Timestamp:* {{ $json.timestamp }}\n\n[Voir le tableau de bord](http://localhost:3000/audit-dashboard)",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": true
        }
      },
      "name": "Notifier Aucun Fichier",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1700,
        460
      ]
    },
    {
      "parameters": {
        "command": "mkdir -p {{ $json.outputDir }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 10
      },
      "name": "Créer Dossier Sorties",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        1700,
        240
      ]
    },
    {
      "parameters": {
        "functionCode": "// Générer la liste des agents à exécuter\nconst agents = $input.item.json.pipelineConfig.agents;\nconst sortedAgents = [...agents].sort((a, b) => a.priority - b.priority);\n\nreturn {\n  json: {\n    ...$input.item.json,\n    agentsToRun: sortedAgents,\n    currentAgentIndex: 0,\n    agentResults: {}\n  }\n};"
      },
      "name": "Préparer Pipeline d'Agents",
      "type": "n8n-nodes-base.function",
      "position": [
        1900,
        240
      ]
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "🧠 *Pipeline d'audit multi-agents*\n\nDémarrage de l'analyse pour le fichier: `{{ $json.fileName }}`\nPriorité: {{ $json.priority || 'standard' }}\nNombre d'agents dans le pipeline: {{ $json.agentsToRun.length }}\n\n*Batch ID:* {{ $json.batchId }}\n*Timestamp:* {{ $json.timestamp }}\n\n[Voir le tableau de bord](http://localhost:3000/audit-dashboard)",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": true
        }
      },
      "name": "Notifier Démarrage Analyse",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1700,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "// Récupérer l'agent actuel à exécuter\nconst currentIndex = $input.item.json.currentAgentIndex;\nconst agents = $input.item.json.agentsToRun;\n\nif (currentIndex >= agents.length) {\n  // Tous les agents ont été exécutés\n  return {\n    json: {\n      ...$input.item.json,\n      pipelineCompleted: true\n    }\n  };\n}\n\nconst currentAgent = agents[currentIndex];\n\nreturn {\n  json: {\n    ...$input.item.json,\n    currentAgent,\n    currentAgentCommand: `cd /workspaces/cahier-des-charge && npx ts-node ${currentAgent.script} --file=${$input.item.json.filePath} --output-dir=${$input.item.json.outputDir}`\n  }\n};"
      },
      "name": "Sélectionner Agent Actuel",
      "type": "n8n-nodes-base.function",
      "position": [
        2100,
        240
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.pipelineCompleted }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Pipeline Terminé?",
      "type": "n8n-nodes-base.if",
      "position": [
        2300,
        240
      ]
    },
    {
      "parameters": {
        "command": "={{ $json.currentAgentCommand }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": "={{ $json.currentAgent.timeout || 120 }}"
      },
      "name": "Exécuter Agent Actuel",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        2500,
        340
      ]
    },
    {
      "parameters": {
        "functionCode": "// Stocker le résultat de l'agent actuel\nconst agentId = $input.item.json.currentAgent.id;\nconst agentResults = $input.item.json.agentResults || {};\n\n// Analyser la sortie pour vérifier si l'exécution a réussi\nconst stdout = $input.item.json.stdout || '';\nconst stderr = $input.item.json.stderr || '';\nconst exitCode = $input.item.json.exitCode;\n\nconst success = exitCode === 0;\n\n// Mettre à jour les résultats des agents\nagentResults[agentId] = {\n  success,\n  timestamp: new Date().toISOString(),\n  stdout: stdout.slice(0, 500) + (stdout.length > 500 ? '...' : ''),\n  stderr: stderr.slice(0, 500) + (stderr.length > 500 ? '...' : ''),\n  outputFiles: success ? $input.item.json.currentAgent.outputFiles.map(file => `${$input.item.json.outputDir}/${file}`) : []\n};\n\n// Passer à l'agent suivant\nreturn {\n  json: {\n    ...$input.item.json,\n    currentAgentIndex: $input.item.json.currentAgentIndex + 1,\n    agentResults\n  }\n};"
      },
      "name": "Traiter Résultat Agent",
      "type": "n8n-nodes-base.function",
      "position": [
        2700,
        340
      ]
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/analysis/agent-assembleur.ts --file={{ $json.filePath }} --output-dir={{ $json.outputDir }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 120
      },
      "name": "Assembler Résultats",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        2500,
        140
      ]
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/integration/mcp-push.ts --file={{ $json.filePath }} --report-dir={{ $json.outputDir }} --branch={{ $json.pipelineConfig.integration.github.branch || 'audit-results' }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 60
      },
      "name": "Pousser vers GitHub",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        2700,
        140
      ]
    },
    {
      "parameters": {
        "command": "cd /workspaces/cahier-des-charge && npx ts-node agents/integration/supabase-sync.ts --file={{ $json.filePath }} --report-dir={{ $json.outputDir }}",
        "workingDirectory": "/workspaces/cahier-des-charge",
        "executeTimeout": 60
      },
      "name": "Synchroniser Supabase",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        2900,
        140
      ]
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "✅ *Analyse terminée pour {{ $json.fileName }}*\n\n*Agents exécutés:*\n{% for agentId, result in $json.agentResults %}\n- {{ agentId }}: {{ result.success ? '✅' : '❌' }}\n{% endfor %}\n\n*Résultats:*\n📄 Audit complet: [audit.md](http://localhost:3000/audit/{{ $json.fileName.replace('.php', '') }})\n🧩 Backlog des tâches: [backlog.json](http://localhost:3000/backlog/{{ $json.fileName.replace('.php', '') }})\n🔁 Graphe d'impact: [impact_graph.json](http://localhost:3000/graph/{{ $json.fileName.replace('.php', '') }})\n\n*GitHub PR:* {{ $json.prUrl || 'En cours de création...' }}\n*Timestamp:* {{ $json.timestamp }}",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": false
        }
      },
      "name": "Notifier Analyse Terminée",
      "type": "n8n-nodes-base.telegram",
      "position": [
        3100,
        140
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ Object.values($json.agentResults).filter(result => !result.success).length }}",
              "operation": "notEqual",
              "value2": "0"
            }
          ]
        }
      },
      "name": "Erreurs Détectées?",
      "type": "n8n-nodes-base.if",
      "position": [
        3300,
        140
      ]
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "⚠️ *Attention: Erreurs détectées dans le pipeline d'audit*\n\nFichier: `{{ $json.fileName }}`\n\n*Agents en échec:*\n{% for agentId, result in $json.agentResults %}\n{% if !result.success %}\n- {{ agentId }}: {{ result.stderr }}\n{% endif %}\n{% endfor %}\n\nL'analyse est incomplète. Veuillez vérifier les logs pour plus de détails.\n\n*Timestamp:* {{ $json.timestamp }}\n\n[Voir le tableau de bord](http://localhost:3000/audit-dashboard)",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": false
        }
      },
      "name": "Notifier Erreurs",
      "type": "n8n-nodes-base.telegram",
      "position": [
        3500,
        140
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "file": "/workspaces/cahier-des-charge/reports/audit_index.json",
        "dataPropertyName": "data",
        "options": {}
      },
      "name": "Mettre à jour Index Audits",
      "type": "n8n-nodes-base.writeFile",
      "position": [
        3500,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Préparer les données pour l'index des audits\nreturn {\n  json: {\n    ...$input.item.json,\n    data: {\n      filePath: $input.item.json.filePath,\n      fileName: $input.item.json.fileName,\n      timestamp: $input.item.json.timestamp,\n      batchId: $input.item.json.batchId,\n      status: Object.values($input.item.json.agentResults).every(result => result.success) ? 'completed' : 'partial',\n      outputDir: $input.item.json.outputDir,\n      agentResults: Object.keys($input.item.json.agentResults).reduce((acc, agentId) => {\n        acc[agentId] = { success: $input.item.json.agentResults[agentId].success };\n        return acc;\n      }, {})\n    }\n  }\n};"
      },
      "name": "Préparer Données Index",
      "type": "n8n-nodes-base.function",
      "position": [
        3300,
        300
      ]
    }
  ],
  "connections": {
    "Déclencheur Quotidien": {
      "main": [
        [
          {
            "node": "Merge Déclencheurs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Manuel": {
      "main": [
        [
          {
            "node": "Merge Déclencheurs",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Webhook GitHub": {
      "main": [
        [
          {
            "node": "Est Branch Legacy?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Est Branch Legacy?": {
      "main": [
        [
          {
            "node": "Merge Déclencheurs",
            "type": "main",
            "index": 2
          }
        ],
        []
      ]
    },
    "Merge Déclencheurs": {
      "main": [
        [
          {
            "node": "Exécuter Discovery Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exécuter Discovery Agent": {
      "main": [
        [
          {
            "node": "Charger Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Charger Configuration": {
      "main": [
        [
          {
            "node": "Exécuter Audit Selector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exécuter Audit Selector": {
      "main": [
        [
          {
            "node": "Traiter Liste Fichiers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter Liste Fichiers": {
      "main": [
        [
          {
            "node": "Fichiers Trouvés?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fichiers Trouvés?": {
      "main": [
        [
          {
            "node": "Créer Dossier Sorties",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notifier Démarrage Analyse",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notifier Aucun Fichier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Créer Dossier Sorties": {
      "main": [
        [
          {
            "node": "Préparer Pipeline d'Agents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer Pipeline d'Agents": {
      "main": [
        [
          {
            "node": "Sélectionner Agent Actuel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sélectionner Agent Actuel": {
      "main": [
        [
          {
            "node": "Pipeline Terminé?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pipeline Terminé?": {
      "main": [
        [
          {
            "node": "Assembler Résultats",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Exécuter Agent Actuel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Exécuter Agent Actuel": {
      "main": [
        [
          {
            "node": "Traiter Résultat Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter Résultat Agent": {
      "main": [
        [
          {
            "node": "Sélectionner Agent Actuel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Assembler Résultats": {
      "main": [
        [
          {
            "node": "Pousser vers GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pousser vers GitHub": {
      "main": [
        [
          {
            "node": "Synchroniser Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Synchroniser Supabase": {
      "main": [
        [
          {
            "node": "Notifier Analyse Terminée",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notifier Analyse Terminée": {
      "main": [
        [
          {
            "node": "Erreurs Détectées?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Erreurs Détectées?": {
      "main": [
        [
          {
            "node": "Notifier Erreurs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Préparer Données Index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer Données Index": {
      "main": [
        [
          {
            "node": "Mettre à jour Index Audits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  }
}