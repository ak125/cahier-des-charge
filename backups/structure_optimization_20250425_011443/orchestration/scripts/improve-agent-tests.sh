#!/bin/bash
# Script pour am√©liorer le test des agents MCP
# Date: 19 avril 2025

WORKSPACE_ROOT="/workspaces/cahier-des-charge"
REPORT_DIR="${WORKSPACE_ROOT}/reports/agent-tests-$(date +%Y%m%d-%H%M%S)"

# Cr√©ation du r√©pertoire de rapport
mkdir -p "$REPORT_DIR"
REPORT_LOG="${REPORT_DIR}/test-report.log"

echo "üîç Am√©lioration des tests d'agents MCP..."

# Fonction pour journaliser
log() {
  local message="$1"
  echo "$message"
  echo "$(date +'%Y-%m-%d %H:%M:%S') - $message" >> "$REPORT_LOG"
}

# Cr√©er un script de test JavaScript am√©lior√©
IMPROVED_TEST="${REPORT_DIR}/test-htaccess-router-analyzer.js"

cat > "$IMPROVED_TEST" << 'EOL'
/**
 * Test am√©lior√© pour l'agent HtaccessRouterAnalyzer
 * Ce script teste si l'agent est correctement impl√©ment√© et fonctionnel
 */

const path = require('path');
const fs = require('fs');

// Chemins absolus pour √©viter les erreurs de chemin relatif
const basePath = '/workspaces/cahier-des-charge';
const possiblePaths = [
  'packages/mcp-agents/business/analyzers/htaccess-router-analyzer/htaccess-router-analyzer.ts',
  'packages/mcp-agents/business/analyzers/htaccess-router-analyzer/index.ts',
  'packages/mcp-agents/business/analyzers/htaccess-router-analyzer.ts',
  'packages/mcp-agents/analyzers/htaccess-router-analyzer/index.ts'
];

console.log('V√©rification des chemins possibles pour l\'agent:');

let agentPath = '';
for (const relativePath of possiblePaths) {
  const fullPath = path.join(basePath, relativePath);
  const exists = fs.existsSync(fullPath);
  console.log(`- ${relativePath}: ${exists ? 'Existe ‚úì' : 'N\'existe pas ‚úó'}`);
  
  if (exists) {
    // Priorit√© √† htaccess-router-analyzer.ts par rapport √† index.ts
    if (!agentPath || (relativePath.includes('htaccess-router-analyzer.ts') && agentPath.includes('index.ts'))) {
      agentPath = fullPath;
    }
  }
}

if (!agentPath) {
  console.error('‚ùå Aucun fichier d\'agent trouv√©');
  process.exit(1);
}

console.log(`‚úÖ Agent trouv√© √†: ${agentPath}`);

// Examiner le contenu du fichier agent pour v√©rifier qu'il respecte l'interface
if (agentPath && fs.existsSync(agentPath)) {
  console.log('\nAnalyse du fichier agent:');
  const content = fs.readFileSync(agentPath, 'utf8');
  
  // V√©rifier si le fichier contient certaines signatures importantes
  const hasExport = content.includes('export ');
  const hasClass = content.includes('class ');
  const hasMetadata = content.includes('metadata');
  const hasEvents = content.includes('events');
  const hasInitialize = content.includes('initialize');
  const hasExecute = content.includes('execute');
  const hasValidate = content.includes('validate');
  const hasStop = content.includes('stop');
  
  console.log(`- Export pr√©sent: ${hasExport ? 'Oui ‚úì' : 'Non ‚úó'}`);
  console.log(`- Classe pr√©sente: ${hasClass ? 'Oui ‚úì' : 'Non ‚úó'}`);
  console.log(`- Metadata pr√©sent: ${hasMetadata ? 'Oui ‚úì' : 'Non ‚úó'}`);
  console.log(`- Events pr√©sent: ${hasEvents ? 'Oui ‚úì' : 'Non ‚úó'}`);
  console.log(`- M√©thode initialize: ${hasInitialize ? 'Oui ‚úì' : 'Non ‚úó'}`);
  console.log(`- M√©thode execute: ${hasExecute ? 'Oui ‚úì' : 'Non ‚úó'}`);
  console.log(`- M√©thode validate: ${hasValidate ? 'Oui ‚úì' : 'Non ‚úó'}`);
  console.log(`- M√©thode stop: ${hasStop ? 'Oui ‚úì' : 'Non ‚úó'}`);
  
  // V√©rifier si le fichier semble impl√©menter l'interface McpAgent
  const seemsValid = hasExport && hasClass && hasMetadata && hasEvents && 
                     hasInitialize && hasExecute;
  
  if (seemsValid) {
    console.log('\n‚úÖ Le fichier semble contenir un agent valide impl√©mentant l\'interface McpAgent');
    process.exit(0);
  } else {
    console.log('\n‚ùå Le fichier ne semble pas impl√©menter correctement l\'interface McpAgent');
    process.exit(1);
  }
} else {
  console.error('‚ùå Impossible de lire le fichier agent');
  process.exit(1);
}
EOL

log "‚úÖ Script de test am√©lior√© cr√©√©: $IMPROVED_TEST"

# Mettre √† jour le script CI pour utiliser notre test am√©lior√©
CI_SCRIPT="${WORKSPACE_ROOT}/ci/mcp-agents-ci.sh"
CI_SCRIPT_BACKUP="${CI_SCRIPT}.bak-$(date +%Y%m%d-%H%M%S)"

if [ -f "$CI_SCRIPT" ]; then
  cp "$CI_SCRIPT" "$CI_SCRIPT_BACKUP"
  log "‚úÖ Backup du script CI cr√©√©: $CI_SCRIPT_BACKUP"
  
  # Modifier le script CI pour int√©grer notre nouveau test
  log "Mise √† jour du script CI..."
  sed -i 's/AGENT_TEST_SCRIPT="${REPORT_DIR}\/test-agent.js"/AGENT_TEST_SCRIPT="${REPORT_DIR}\/test-htaccess-router-analyzer.js"\n\n# Utilisation du test am√©lior√© qui privil√©gie htaccess-router-analyzer.ts sur index.ts/g' "$CI_SCRIPT"
  
  # Copier notre script de test dans le script CI
  sed -i "/cat > \"\$AGENT_TEST_SCRIPT\" << EOL/,/^EOL$/c\\cat > \"\$AGENT_TEST_SCRIPT\" << 'EOL'\n$(cat $IMPROVED_TEST)\nEOL" "$CI_SCRIPT"
  
  log "‚úÖ Script CI mis √† jour"
else
  log "‚ùå Script CI non trouv√©: $CI_SCRIPT"
fi

# Cr√©er un README pour la documentation des agents MCP
README_FILE="${WORKSPACE_ROOT}/packages/mcp-agents/README.md"

if [ ! -f "$README_FILE" ]; then
  log "Cr√©ation du README pour les agents MCP..."
  
  cat > "$README_FILE" << 'EOL'
# Agents MCP (Model Context Protocol)

Ce module contient les agents pour le Model Context Protocol, utilis√©s pour la migration PHP vers Remix.

## Structure du projet

```
packages/mcp-agents/
‚îú‚îÄ‚îÄ business/
‚îÇ   ‚îú‚îÄ‚îÄ analyzers/     # Agents d'analyse (fichiers, sch√©mas, routes)
‚îÇ   ‚îú‚îÄ‚îÄ generators/    # Agents de g√©n√©ration de code
‚îÇ   ‚îú‚îÄ‚îÄ validators/    # Agents de validation
‚îÇ   ‚îú‚îÄ‚îÄ integrators/   # Agents d'int√©gration avec services externes
‚îÇ   ‚îú‚îÄ‚îÄ misc/          # Agents divers
‚îÇ   ‚îî‚îÄ‚îÄ core/          # Composants essentiels des agents
‚îú‚îÄ‚îÄ README.md          # Documentation principale
‚îî‚îÄ‚îÄ tsconfig.json      # Configuration TypeScript
```

## Agents disponibles

### Analyseurs

- **HtaccessRouterAnalyzer**: Analyse les fichiers `.htaccess` pour identifier les r√®gles de routage
- **DynamicSqlExtractor**: Extrait les requ√™tes SQL dynamiques du code PHP
- **PhpDiscoveryEngine**: D√©couvre les points d'entr√©e et la structure des applications PHP

### G√©n√©rateurs

- G√©n√©rateurs de code Remix
- G√©n√©rateurs de sch√©mas Prisma
- G√©n√©rateurs de mod√®les de donn√©es

### Validateurs

- Validateurs de sch√©mas
- Validateurs de routes
- Validateurs de migrations

## Interface McpAgent

Tous les agents impl√©mentent l'interface standard `McpAgent` :

```typescript
interface McpAgent {
  readonly metadata: AgentMetadata;
  status: AgentStatus;
  readonly events: EventEmitter;
  
  initialize(): Promise<void>;
  execute(context: AgentContext): Promise<AgentResult>;
  validate(context: AgentContext): Promise<boolean>;
  stop(): Promise<void>;
  getStatus(): Promise<{ status: AgentStatus, details?: any }>;
}
```

## Scripts de maintenance

- **./ci/mcp-agents-ci.sh**: Tests et validation CI/CD des agents
- **./clean-agents-duplicates.sh**: Nettoie les doublons d'agents
- **./sync-mcp-agents.sh**: Synchronise les agents entre les diff√©rents environnements
- **./integrate-orphan-agents.sh**: Int√®gre les agents orphelins dans la structure principale

## Utilisation

```typescript
import { HtaccessRouterAnalyzer } from './packages/mcp-agents/business/analyzers/htaccess-router-analyzer';

const analyzer = new HtaccessRouterAnalyzer();
await analyzer.initialize();

const result = await analyzer.execute({
  jobId: 'job-001',
  filePath: '/path/to/.htaccess'
});

console.log(result.data);
```
EOL

  log "‚úÖ README cr√©√©: $README_FILE"
fi

echo "‚úÖ Am√©liorations des tests termin√©es"
log "Script termin√© avec succ√®s"
chmod +x "$0"