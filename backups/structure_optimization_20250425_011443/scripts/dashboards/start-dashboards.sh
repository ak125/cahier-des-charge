#!/bin/bash

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# D√©finir les ports pour chaque dashboard
MIGRATION_PORT=3000
AUDIT_PORT=3002
AGENTS_PORT=3003
UNIFIED_PORT=3001

echo -e "${YELLOW}üöÄ D√©marrage des tableaux de bord...${NC}"

# Fonction pour v√©rifier si un port est libre
check_port() {
  local port=$1
  if netstat -tuln | grep -q ":$port " &> /dev/null; then
    return 1 # Port est occup√©
  else
    return 0 # Port est libre
  fi
}

# Fonction pour lib√©rer un port
free_port() {
  local port=$1
  echo -e "${YELLOW}üîÑ Tentative de lib√©ration du port $port...${NC}"
  
  # Essayer d'abord sans sudo
  fuser -k "${port}/tcp" 2>/dev/null
  
  # V√©rifier si le port est maintenant libre
  if check_port "$port"; then
    echo -e "${GREEN}‚úÖ Port $port lib√©r√© avec succ√®s!${NC}"
    return 0
  fi
  
  # Essayer avec sudo
  echo -e "${YELLOW}‚ö†Ô∏è Le port $port est toujours occup√©. Tentative avec sudo...${NC}"
  sudo fuser -k "${port}/tcp" 2>/dev/null
  
  # V√©rifier √† nouveau
  if check_port "$port"; then
    echo -e "${GREEN}‚úÖ Port $port lib√©r√© avec succ√®s!${NC}"
    return 0
  else
    echo -e "${RED}‚ùå Impossible de lib√©rer le port $port.${NC}"
    return 1
  fi
}

# Lib√©rer les ports utilis√©s
echo -e "${BLUE}üßπ Nettoyage initial des ports...${NC}"

# Tableau pour stocker les ports lib√©r√©s avec succ√®s
FREED_PORTS=()

# Nettoyer chaque port
for port in $MIGRATION_PORT $AUDIT_PORT $AGENTS_PORT $UNIFIED_PORT; do
  if ! check_port "$port"; then
    if free_port "$port"; then
      FREED_PORTS+=("$port")
    fi
  else
    echo -e "${GREEN}‚úÖ Port $port est d√©j√† libre${NC}"
    FREED_PORTS+=("$port")
  fi
done

# Attendre un peu pour √™tre s√ªr que les ports sont lib√©r√©s
sleep 2

# Tableau pour stocker les dashboards lanc√©s avec succ√®s
LAUNCHED_DASHBOARDS=()

# Fonction pour lancer un dashboard et renvoyer 0 si succ√®s, 1 si √©chec
launch_dashboard() {
  local name=$1
  local port=$2
  local command=$3
  
  echo -e "${YELLOW}üîÑ Lancement du tableau de bord $name sur le port $port...${NC}"
  
  # V√©rifier si le port est disponible
  if ! check_port "$port"; then
    echo -e "${RED}‚ùå Le port $port est toujours occup√©. Impossible de lancer le tableau de bord $name.${NC}"
    return 1
  fi
  
  # Lancer le processus en arri√®re-plan et le d√©tacher
  nohup $command > "/tmp/dashboard-$name.log" 2>&1 &
  local pid=$!
  
  echo -e "${BLUE}‚ö°Ô∏è Tableau de bord $name lanc√© avec PID $pid${NC}"
  
  # Attendre un moment pour s'assurer que le processus d√©marre
  sleep 5
  
  # V√©rifier si le processus est toujours en vie
  if kill -0 $pid 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Tableau de bord $name d√©marr√© avec succ√®s sur http://localhost:$port${NC}"
    echo "$pid" > "/tmp/dashboard-$name.pid"
    LAUNCHED_DASHBOARDS+=("$name:$port:$pid")
    return 0
  else
    echo -e "${RED}‚ùå √âchec du d√©marrage du tableau de bord $name${NC}"
    return 1
  fi
}

# Lancer les tableaux de bord

# 1. Tableau de bord de migration
if [[ " ${FREED_PORTS[@]} " =~ " $MIGRATION_PORT " ]]; then
  launch_dashboard "migration" "$MIGRATION_PORT" "node --loader ts-node/esm scripts/dashboard.js"
fi

# 2. Tableau de bord d'audit
if [[ " ${FREED_PORTS[@]} " =~ " $AUDIT_PORT " ]]; then
  launch_dashboard "audit" "$AUDIT_PORT" "node -r ts-node/register agents/agent-audit.ts --dashboard"
fi

# 3. Tableau de bord des agents
if [[ " ${FREED_PORTS[@]} " =~ " $AGENTS_PORT " ]]; then
  launch_dashboard "agents" "$AGENTS_PORT" "node scripts/dashboard.js --view=agents"
fi

# 4. Tableau de bord unifi√©
if [[ " ${FREED_PORTS[@]} " =~ " $UNIFIED_PORT " ]]; then
  launch_dashboard "unifi√©" "$UNIFIED_PORT" "node scripts/unified-dashboard.js"
fi

# R√©sum√©
echo ""
if [ ${#LAUNCHED_DASHBOARDS[@]} -gt 0 ]; then
  echo -e "${GREEN}‚úÖ Tableaux de bord lanc√©s :${NC}"
  for dashboard in "${LAUNCHED_DASHBOARDS[@]}"; do
    IFS=':' read -r name port pid <<< "$dashboard"
    echo -e "${BLUE}üìä $name: http://localhost:$port (PID: $pid)${NC}"
  done
else
  echo -e "${RED}‚ùå Aucun tableau de bord n'a pu √™tre lanc√©.${NC}"
  exit 1
fi

# Instructions pour arr√™ter les tableaux de bord
echo ""
echo -e "${YELLOW}Pour arr√™ter les tableaux de bord, ex√©cutez :${NC}"
echo -e "${BLUE}scripts/stop-dashboards.sh${NC}"

# Cr√©er le script pour arr√™ter les tableaux de bord
cat > "scripts/stop-dashboards.sh" <<EOF
#!/bin/bash

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

echo -e "\${YELLOW}üõë Arr√™t des tableaux de bord...${NC}"

# Arr√™ter chaque dashboard
EOF

for dashboard in "${LAUNCHED_DASHBOARDS[@]}"; do
  IFS=':' read -r name port pid <<< "$dashboard"
  echo "if [ -f \"/tmp/dashboard-$name.pid\" ]; then" >> "scripts/stop-dashboards.sh"
  echo "  pid=\$(cat \"/tmp/dashboard-$name.pid\")" >> "scripts/stop-dashboards.sh"
  echo "  if kill -0 \$pid 2>/dev/null; then" >> "scripts/stop-dashboards.sh"
  echo "    echo -e \"\${YELLOW}üîÑ Arr√™t du tableau de bord $name (PID: \$pid)...${NC}\"" >> "scripts/stop-dashboards.sh"
  echo "    kill \$pid" >> "scripts/stop-dashboards.sh"
  echo "    echo -e \"\${GREEN}‚úÖ Tableau de bord $name arr√™t√©.${NC}\"" >> "scripts/stop-dashboards.sh"
  echo "  else" >> "scripts/stop-dashboards.sh"
  echo "    echo -e \"\${RED}‚ö†Ô∏è Le processus du tableau de bord $name n'est plus en cours d'ex√©cution.${NC}\"" >> "scripts/stop-dashboards.sh"
  echo "  fi" >> "scripts/stop-dashboards.sh"
  echo "  rm -f \"/tmp/dashboard-$name.pid\"" >> "scripts/stop-dashboards.sh"
  echo "else" >> "scripts/stop-dashboards.sh"
  echo "  echo -e \"\${RED}‚ö†Ô∏è Fichier PID pour le tableau de bord $name non trouv√©.${NC}\"" >> "scripts/stop-dashboards.sh"
  echo "fi" >> "scripts/stop-dashboards.sh"
  echo "" >> "scripts/stop-dashboards.sh"
done

# Ajouter les commandes pour tuer tous les processus restants sur les ports
echo "# S'assurer que tous les ports sont lib√©r√©s" >> "scripts/stop-dashboards.sh"
echo "echo -e \"\${YELLOW}üßπ Nettoyage des ports...${NC}\"" >> "scripts/stop-dashboards.sh"
echo "fuser -k 3000/tcp 3001/tcp 3002/tcp 3003/tcp 2>/dev/null" >> "scripts/stop-dashboards.sh"
echo "echo -e \"\${GREEN}‚úÖ Tous les tableaux de bord ont √©t√© arr√™t√©s.${NC}\"" >> "scripts/stop-dashboards.sh"

# Rendre le script d'arr√™t ex√©cutable
chmod +x scripts/stop-dashboards.sh

echo -e "${GREEN}‚úÖ Script d'arr√™t cr√©√© : scripts/stop-dashboards.sh${NC}"