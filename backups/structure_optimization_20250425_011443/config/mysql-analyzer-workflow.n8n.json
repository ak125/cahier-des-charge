{
  "name": "MySQL Analyzer Workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 6,
              "unit": "hours"
            }
          ]
        }
      },
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [100, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "path": "/workspaces/cahier-des-charge/app/legacy",
        "fileExtensions": ["sql", "mysql"],
        "options": {
          "recursive": true
        }
      },
      "name": "List SQL Files",
      "type": "n8n-nodes-base.filesearch",
      "position": [300, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filePath": "={{ $json.path }}",
        "agentUrl": "http://localhost:3333/api/mcp/execute/mysql-analyzer",
        "outputPath": "/workspaces/cahier-des-charge/reports/analysis/sql/{{$json.path.split('/').pop()}}.json"
      },
      "name": "MySQL Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "position": [500, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "path": "=/workspaces/cahier-des-charge/reports/analysis/sql/{{$json.path.split('/').pop()}}.json",
        "content": "={{ $json.analysis }}",
        "options": {
          "encoding": "utf8",
          "createPath": true
        }
      },
      "name": "Save Analysis",
      "type": "n8n-nodes-base.writeBinaryFile",
      "position": [700, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "// Analyser les requ√™tes SQL pour la migration vers PostgreSQL\nconst fs = require('fs');\nconst path = require('path');\n\ntry {\n  const filePath = $input.item.json.path;\n  const fileName = path.basename(filePath);\n  const analysisPath = `/workspaces/cahier-des-charge/reports/analysis/sql/${fileName}.json`;\n  \n  // V√©rifier si l'analyse existe\n  if (!fs.existsSync(analysisPath)) {\n    throw new Error(`Fichier d'analyse introuvable: ${analysisPath}`);\n  }\n  \n  // Lire l'analyse\n  const analysis = JSON.parse(fs.readFileSync(analysisPath, 'utf8'));\n  \n  // G√©n√©rer des recommandations pour la migration MySQL vers PostgreSQL\n  const postgresRecommendations = {\n    originalFile: filePath,\n    analysisFile: analysisPath,\n    timestamp: new Date().toISOString(),\n    recommendations: [],\n    conversionPatterns: []\n  };\n  \n  // Analyser les requ√™tes SQL et g√©n√©rer des recommandations\n  if (analysis.queries && Array.isArray(analysis.queries)) {\n    analysis.queries.forEach(query => {\n      // Recherche de patterns MySQL sp√©cifiques\n      if (query.sql.includes('AUTO_INCREMENT')) {\n        postgresRecommendations.recommendations.push({\n          type: 'AUTO_INCREMENT',\n          description: 'Remplacer AUTO_INCREMENT par SERIAL ou IDENTITY',\n          original: query.sql,\n          suggested: query.sql.replace(/AUTO_INCREMENT/g, 'SERIAL')\n        });\n        \n        postgresRecommendations.conversionPatterns.push({\n          pattern: 'AUTO_INCREMENT',\n          replacement: 'SERIAL',\n          context: 'column_definition'\n        });\n      }\n      \n      // Autres patterns sp√©cifiques √† MySQL\n      if (query.sql.includes('IFNULL')) {\n        postgresRecommendations.recommendations.push({\n          type: 'IFNULL',\n          description: 'Remplacer IFNULL par COALESCE',\n          original: query.sql,\n          suggested: query.sql.replace(/IFNULL\\s*\\(/g, 'COALESCE(')\n        });\n        \n        postgresRecommendations.conversionPatterns.push({\n          pattern: 'IFNULL',\n          replacement: 'COALESCE',\n          context: 'function'\n        });\n      }\n    });\n  }\n  \n  // Sauvegarder les recommandations\n  const recommendationsPath = `/workspaces/cahier-des-charge/reports/recommendations/sql/${fileName}.postgres.json`;\n  \n  // Cr√©er le r√©pertoire s'il n'existe pas\n  const recommendationsDir = path.dirname(recommendationsPath);\n  if (!fs.existsSync(recommendationsDir)) {\n    fs.mkdirSync(recommendationsDir, { recursive: true });\n  }\n  \n  // √âcrire les recommandations\n  fs.writeFileSync(recommendationsPath, JSON.stringify(postgresRecommendations, null, 2));\n  \n  return {\n    json: {\n      ...postgresRecommendations,\n      recommendationsPath\n    }\n  };\n} catch (error) {\n  return {\n    json: {\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  };\n}"
      },
      "name": "Generate PostgreSQL Recommendations",
      "type": "n8n-nodes-base.function",
      "position": [900, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "chatId": "{{ $env.NOTIFICATION_CHAT_ID }}",
        "text": "üìä *Analyse MySQL compl√©t√©e*\n\nFichier: `{{ $json.originalFile }}`\n\n‚úÖ Recommandations PostgreSQL g√©n√©r√©es: {{ $json.recommendations.length }}\n‚úÖ Patterns de conversion identifi√©s: {{ $json.conversionPatterns.length }}\n\n*Timestamp:* {{ $json.timestamp }}\n\n[Voir les recommandations](file://{{ $json.recommendationsPath }})",
        "additionalFields": {
          "parseMode": "Markdown",
          "disableNotification": true
        }
      },
      "name": "Send Notification",
      "type": "n8n-nodes-base.telegram",
      "position": [1100, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "path": "/data/mysql-dumps",
        "options": {
          "includeHiddenFiles": false,
          "fileExtensions": [".sql", ".sql.gz"]
        }
      },
      "name": "Watch MySQL Dumps",
      "type": "n8n-nodes-base.filesWatcher",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "functionCode": "// R√©cup√©rer le chemin complet du fichier\nconst filePath = $input.item.path;\n\n// D√©terminer si le fichier est compress√©\nconst isCompressed = filePath.endsWith('.gz');\n\n// D√©finir le dossier de sortie bas√© sur le nom du fichier\nconst fileName = filePath.split('/').pop().replace(/\\.(sql|sql\\.gz)$/, '');\nconst outputDir = `/data/analyses/${fileName}-${new Date().toISOString().replace(/:/g, '-').split('.')[0]}`;\n\n// Construire la commande\nlet command = `cd /workspaces/cahier-des-charge && ts-node agents/migration/mysql-analyzer.ts \"${filePath}\" --output-dir \"${outputDir}\"`;\n\n// Ajouter les options\nif (isCompressed) {\n  command += ' --compressed';\n}\n\n// Ajouter l'option pour analyser les JOINs\ncommand += ' --analyze-joins';\n\nreturn {\n  command,\n  outputDir,\n  filePath,\n  fileName,\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Pr√©parer la commande",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "command": "={{ $node[\"Pr√©parer la commande\"].json[\"command\"] }}",
        "executeTimeout": 300
      },
      "name": "Ex√©cuter l'analyse",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "fileFormat": "text",
        "binaryData": true,
        "fileName": "analyse-results.log",
        "path": "={{ $node[\"Pr√©parer la commande\"].json[\"outputDir\"] }}"
      },
      "name": "Sauvegarder les r√©sultats",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "to": ["equipe-migration@exemple.com"],
        "subject": "Analyse MySQL termin√©e: {{ $node[\"Pr√©parer la commande\"].json[\"fileName\"] }}",
        "text": "# Analyse MySQL termin√©e\n\nL'analyse du fichier **{{ $node[\"Pr√©parer la commande\"].json[\"fileName\"] }}** est termin√©e.\n\n## D√©tails\n- **Fichier analys√©**: {{ $node[\"Pr√©parer la commande\"].json[\"filePath\"] }}\n- **Dossier de r√©sultats**: {{ $node[\"Pr√©parer la commande\"].json[\"outputDir\"] }}\n- **Date d'analyse**: {{ $node[\"Pr√©parer la commande\"].json[\"timestamp\"] }}\n\n## R√©sultat de l'ex√©cution\n```\n{{ $node[\"Ex√©cuter l'analyse\"].json[\"stdout\"] }}\n```\n\n## Erreurs (si pr√©sentes)\n```\n{{ $node[\"Ex√©cuter l'analyse\"].json[\"stderr\"] }}\n```\n\nVous pouvez consulter les fichiers d'analyse g√©n√©r√©s dans le dossier mentionn√© ci-dessus.",
        "options": {
          "attachments": "={{ $node[\"Sauvegarder les r√©sultats\"].binary }}"
        }
      },
      "name": "Envoyer notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"Ex√©cuter l'analyse\"].json[\"exitCode\"] }}",
              "operation": "notEqual",
              "value2": "0"
            }
          ]
        }
      },
      "name": "V√©rifier erreurs",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [850, 500]
    },
    {
      "parameters": {
        "url": "https://hooks.slack.com/services/TXXXXXX/BXXXXXX/XXXXXXXX",
        "jsonParameters": true,
        "options": {},
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "‚ö†Ô∏è Erreur lors de l'analyse MySQL du fichier {{ $node[\"Pr√©parer la commande\"].json[\"fileName\"] }} :\n```\n{{ $node[\"Ex√©cuter l'analyse\"].json[\"stderr\"] }}\n```"
            }
          ]
        }
      },
      "name": "Alerter sur Slack",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [1050, 500]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "List SQL Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List SQL Files": {
      "main": [
        [
          {
            "node": "MySQL Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL Analysis": {
      "main": [
        [
          {
            "node": "Save Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Analysis": {
      "main": [
        [
          {
            "node": "Generate PostgreSQL Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PostgreSQL Recommendations": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Watch MySQL Dumps": {
      "main": [
        [
          {
            "node": "Pr√©parer la commande",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pr√©parer la commande": {
      "main": [
        [
          {
            "node": "Ex√©cuter l'analyse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ex√©cuter l'analyse": {
      "main": [
        [
          {
            "node": "Sauvegarder les r√©sultats",
            "type": "main",
            "index": 0
          },
          {
            "node": "V√©rifier erreurs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sauvegarder les r√©sultats": {
      "main": [
        [
          {
            "node": "Envoyer notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "V√©rifier erreurs": {
      "main": [
        [
          {
            "node": "Alerter sur Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "mysql-analyzer-error-handler"
  },
  "tags": ["mysql", "analyze", "migration", "database"],
  "versionId": "d8aa47a6-bfac-4f7f-952a-90ae1bd9dff9"
}