version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  ollama:
    image: ollama/ollama:latest
    container_name: mcp-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:11434/api/version || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  mcp-server:
    image: node:20-alpine
    container_name: mcp-server
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=development
      - PORT=3333
      - MCP_SERVER_PORT=3333
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=deepseek-coder
      - USE_CACHE=true
      - CACHE_EXPIRY=3600
      - SUPABASE_URL=http://supabase:5432
      - SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.example-key
      - N8N_WEBHOOK_URL=http://migration-n8n:5678/webhook/mcp
    command: >
      sh -c "apk add --no-cache curl git python3 make g++ findutils &&
             mkdir -p /app/minimal-mcp &&
             cd /app/minimal-mcp &&
             npm init -y &&
             npm install express &&
             echo 'const express = require(\"express\"); const app = express(); const port = process.env.PORT || 3333; app.get(\"/health\", (req, res) => { res.status(200).json({ status: \"ok\", version: \"1.0.0\", mode: \"minimal\" }); }); app.listen(port, () => console.log(`Minimal MCP server running on port ${port}`));' > index.js &&
             node index.js"
    depends_on:
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
      supabase:
        condition: service_started
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:3333/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 60s

  supabase:
    image: supabase/postgres:15.1.0.112
    container_name: mcp-supabase
    restart: unless-stopped
    ports:
      - "5433:5432"  # Changement du port externe de 5432 à 5433
    volumes:
      - supabase-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mcp_database
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # --- Temporal.io OSS (Orchestrateur de workflows) ---
  temporal-server:
    image: temporalio/auto-setup:1.21.0
    container_name: temporal-server
    environment:
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgres
      - POSTGRES_DB=temporal
      # Configuration pour la base de données de visibilité
      - VISIBILITY_DB=temporal_visibility
      - DBNAME=temporal
      - VISIBILITY_DBNAME=temporal_visibility
      # Désactiver la création automatique de base de données
      - SKIP_DB_CREATE=true
    ports:
      - "7233:7233"     # gRPC
      - "8233:8233"     # Web UI
    volumes:
      - ./config/temporal:/etc/temporal/config/dynamicconfig
    depends_on:
      - postgres
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8233"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Temporal Worker pour exécuter les workflows MCP ---
  temporal-worker:
    build:
      context: .
      dockerfile: Dockerfile.temporal-worker
    container_name: temporal-worker
    environment:
      - TEMPORAL_ADDRESS=temporal-server:7233
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
    volumes:
      - ./:/app
      - /app/node_modules
    command: npm run start:worker
    depends_on:
      - temporal-server
      - redis
    networks:
      - mcp-network

  # --- Trigger.dev OSS (Webhooks et CI/CD) ---
  trigger-dev:
    image: ghcr.io/triggerdotdev/trigger.dev:latest
    container_name: trigger-dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/triggerdev
      - ENCRYPTION_KEY=random-encryption-key-min-16-chars
      - PORT=3000
      - NEXTJS_URL=http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - trigger-data:/app/.trigger
    depends_on:
      - postgres
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # --- Remix Dashboard (Frontend pour suivre les migrations) ---
  remix-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.remix
    container_name: remix-dashboard
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mcp
      - REDIS_URL=redis://redis:6379
      - TRIGGER_API_URL=http://trigger-dev:3000
      - TRIGGER_API_KEY=tr_dev_your-dev-key
      - NODE_ENV=development
    ports:
      - "3001:3000"
    volumes:
      - ./app:/app/app
      - ./public:/app/public
    depends_on:
      - postgres
      - redis
      - trigger-dev
    networks:
      - mcp-network

  # --- NestJS Backend (MCP Server) ---
  nestjs-backend:
    build:
      context: .
      dockerfile: Dockerfile.nestjs
    container_name: nestjs-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/mcp
      - REDIS_URL=redis://redis:6379
      - TEMPORAL_ADDRESS=temporal-server:7233
      - NODE_ENV=development
    ports:
      - "3333:3333"
    volumes:
      - ./apps/api:/app/apps/api
    depends_on:
      - postgres
      - redis
      - temporal-server
    networks:
      - mcp-network

  # --- n8n (Webhooks et automatisation) ---
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=postgres
      - N8N_PORT=5678
      - WEBHOOK_URL=http://localhost:5678
      - TZ=Europe/Paris
    ports:
      - "5678:5678"
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      - postgres
    networks:
      - mcp-network

  # --- PostgreSQL (Base de données principale) ---
  postgres:
    image: postgres:14-alpine
    container_name: postgres-mcp
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_MULTIPLE_DATABASES=mcp,temporal,triggerdev,n8n
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-multiple-postgres-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- pgAdmin (Interface admin pour PostgreSQL) ---
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - mcp-network

volumes:
  redis-data:
  ollama-data:
  supabase-data:
  postgres-data:
  n8n-data:
  trigger-data:
  pgadmin-data:

networks:
  mcp-network:
    driver: bridge