{
  "name": "Migration Orchestrator Pipeline",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 */4 * * *"
            }
          ]
        }
      },
      "id": "842e90bd-2c52-450f-9ec6-1d1a14958b27",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "oauth2",
        "resource": "repository",
        "operation": "listCommits",
        "owner": "={{$node[\"Config\"].json[\"github_owner\"]}}",
        "repository": "={{$node[\"Config\"].json[\"github_repo\"]}}",
        "filePath": "/legacy",
        "since": "={{$node[\"Get_Last_Run\"].json[\"last_run\"] || \"\"}}"
      },
      "id": "94d2d436-604e-46bd-b9b2-16a9d8d890e4",
      "name": "GitHub - Check Commits",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        650,
        300
      ],
      "credentials": {
        "githubOAuth2Api": {
          "id": "1",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"total_count\"]}}",
              "operation": "notEqual",
              "value2": "0"
            }
          ]
        }
      },
      "id": "1f2f59f0-0cf6-4b0d-8f8f-8e4677c2825d",
      "name": "Has New Commits?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "path": "={{$node[\"Config\"].json[\"status_path\"]}}",
        "options": {}
      },
      "id": "3f269e88-70c8-4799-9753-a4026a0c46ba",
      "name": "Read Status File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        1150,
        200
      ]
    },
    {
      "parameters": {
        "path": "={{$node[\"Config\"].json[\"discovery_map_path\"]}}",
        "options": {}
      },
      "id": "4cdcf4f9-30f2-480c-ae06-d70ffbbb7f37",
      "name": "Read Discovery Map",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        1150,
        400
      ]
    },
    {
      "parameters": {
        "mode": "jsonParse",
        "property": "data",
        "destinationProperty": "json"
      },
      "id": "d5a2b57b-e84b-411d-a6ec-5cc86b112edd",
      "name": "Parse Status",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1400,
        200
      ]
    },
    {
      "parameters": {
        "mode": "jsonParse",
        "property": "data",
        "destinationProperty": "json"
      },
      "id": "02e3d450-9258-4e90-8c0c-798006d195f0",
      "name": "Parse Discovery",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1400,
        400
      ]
    },
    {
      "parameters": {
        "functionCode": "// Analyse les fichiers changés pour les ajouter au discovery_map si nécessaire\nconst commits = $node[\"GitHub - Check Commits\"].json;\nconst discoveryMap = $node[\"Parse Discovery\"].json;\nconst status = $node[\"Parse Status\"].json;\n\n// Liste des fichiers PHP modifiés\nconst modifiedPhpFiles = [];\n\nfor (const commit of commits) {\n  if (commit.files) {\n    for (const file of commit.files) {\n      if (file.filename.endsWith(\".php\") && file.filename.startsWith(\"legacy/\")) {\n        const fileName = file.filename.split(\"/\").pop();\n        \n        // Vérifier si le fichier est déjà dans le discovery_map\n        const exists = discoveryMap.some(item => item.name === fileName);\n        \n        if (!exists) {\n          modifiedPhpFiles.push({\n            name: fileName,\n            path: file.filename,\n            type: \"php\",\n            priority: 10, // Priorité par défaut\n            dependencies: [], // À analyser plus tard par php-analyzer\n            metadata: {\n              lastModified: new Date().toISOString(),\n              commitSha: commit.sha,\n              author: commit.commit.author.name\n            }\n          });\n        }\n      }\n    }\n  }\n}\n\n// Mise à jour du discovery_map avec les nouveaux fichiers\nconst updatedDiscoveryMap = [...discoveryMap, ...modifiedPhpFiles];\n\n// Informations de résumé\nreturn {\n  json: {\n    updatedDiscoveryMap,\n    newFilesCount: modifiedPhpFiles.length,\n    totalFiles: updatedDiscoveryMap.length,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "d81c11e5-4b05-407e-9ad1-6cbd4bae831c",
      "name": "Update Discovery Map",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1650,
        300
      ]
    },
    {
      "parameters": {
        "operation": "stringify",
        "property": "updatedDiscoveryMap",
        "destinationProperty": "discoveryMapString",
        "options": {
          "indentation": true
        }
      },
      "id": "ab1eda87-f43b-498f-9a05-3ebaa33fc498",
      "name": "Prepare Files",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1900,
        300
      ]
    },
    {
      "parameters": {
        "options": {
          "binaryData": true
        },
        "path": "={{$node[\"Config\"].json[\"discovery_map_path\"]}}",
        "content": "={{$json[\"discoveryMapString\"]}}",
        "encoding": "utf8"
      },
      "id": "1d85a18c-0e99-4afb-b74a-7f1feee88ac8",
      "name": "Write Updated Map",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        2150,
        300
      ]
    },
    {
      "parameters": {
        "command": "cd {{$node[\"Config\"].json[\"working_dir\"]}} && node agents/migration-orchestrator.js"
      },
      "id": "e0d7fa59-ed0a-4eb1-b5dd-dccccaf7cd31",
      "name": "Run Orchestrator",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2400,
        300
      ]
    },
    {
      "parameters": {
        "content": "## Rapport d'exécution de l'Orchestrateur de Migration\n\n### Résumé\n- **Date d'exécution**: {{new Date().toLocaleString()}}\n- **Nouveaux fichiers détectés**: {{$node[\"Update Discovery Map\"].json[\"newFilesCount\"]}}\n- **Total des fichiers à migrer**: {{$node[\"Update Discovery Map\"].json[\"totalFiles\"]}}\n\n### Résultat de l'exécution\n```\n{{$node[\"Run Orchestrator\"].json[\"stdout\"]}}\n```\n\n### Erreurs éventuelles\n```\n{{$node[\"Run Orchestrator\"].json[\"stderr\"]}}\n```\n\n### Simulation\nVous pouvez vérifier les résultats de simulation dans le dossier `/simulations/`\n",
        "attachments": []
      },
      "id": "1310c925-0aa7-44e3-aa08-d7f284b1ef41",
      "name": "Generate Report",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        2650,
        300
      ],
      "credentials": {
        "smtp": {
          "id": "1",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "github_owner",
              "value": "votre-organisation"
            },
            {
              "name": "github_repo",
              "value": "votre-monorepo"
            },
            {
              "name": "working_dir",
              "value": "/workspaces/cahier-des-charge"
            },
            {
              "name": "status_path",
              "value": "/workspaces/cahier-des-charge/status.json"
            },
            {
              "name": "discovery_map_path",
              "value": "/workspaces/cahier-des-charge/discovery_map.json"
            }
          ]
        },
        "options": {}
      },
      "id": "8939d455-1226-433a-b9e4-2ee686c6a002",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Récupère la date de dernière exécution\nconst fs = require('fs');\nconst path = require('path');\n\nconst lastRunFilePath = path.join(process.cwd(), 'last_run.json');\nlet lastRun = null;\n\ntry {\n  if (fs.existsSync(lastRunFilePath)) {\n    const data = fs.readFileSync(lastRunFilePath, 'utf8');\n    const parsed = JSON.parse(data);\n    lastRun = parsed.timestamp;\n  }\n} catch (error) {\n  // Ignore les erreurs, utilisera null comme date de début\n}\n\n// Met à jour le fichier avec la date actuelle\nfs.writeFileSync(lastRunFilePath, JSON.stringify({ timestamp: new Date().toISOString() }));\n\nreturn {\n  json: {\n    last_run: lastRun\n  }\n};"
      },
      "id": "0de9ad1d-c2fc-4239-8c65-566ea19f13ee",
      "name": "Get_Last_Run",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        450,
        500
      ]
    },
    {
      "parameters": {
        "authentication": "webhookBasic",
        "httpMethod": "POST",
        "path": "trigger-migration",
        "options": {
          "responseMode": "responseNode"
        }
      },
      "id": "a077a609-249d-4f44-bb21-7acdd60ab0e0",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        250,
        500
      ],
      "webhookId": "a9753043-af4e-4776-a355-62edc8b3aa88"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "GitHub - Check Commits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub - Check Commits": {
      "main": [
        [
          {
            "node": "Has New Commits?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has New Commits?": {
      "main": [
        [
          {
            "node": "Read Status File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Read Discovery Map",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Read Status File": {
      "main": [
        [
          {
            "node": "Parse Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Discovery Map": {
      "main": [
        [
          {
            "node": "Parse Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Status": {
      "main": [
        [
          {
            "node": "Update Discovery Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Discovery": {
      "main": [
        [
          {
            "node": "Update Discovery Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Discovery Map": {
      "main": [
        [
          {
            "node": "Prepare Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Files": {
      "main": [
        [
          {
            "node": "Write Updated Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write Updated Map": {
      "main": [
        [
          {
            "node": "Run Orchestrator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run Orchestrator": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_Last_Run": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Get_Last_Run",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {},
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-04-15T10:00:00.000Z",
      "updatedAt": "2025-04-15T10:00:00.000Z",
      "id": "1",
      "name": "migrations"
    },
    {
      "createdAt": "2025-04-15T10:00:00.000Z",
      "updatedAt": "2025-04-15T10:00:00.000Z",
      "id": "2",
      "name": "orchestration"
    },
    {
      "createdAt": "2025-04-15T10:00:00.000Z",
      "updatedAt": "2025-04-15T10:00:00.000Z",
      "id": "3",
      "name": "php-to-remix"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-04-15T10:15:00.000Z",
  "versionId": "abcde-12345"
}