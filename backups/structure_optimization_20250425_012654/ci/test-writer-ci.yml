name: Test Generation & Execution

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend/src/**/*'
      - 'apps/frontend/app/routes/**/*'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/backend/src/**/*'
      - 'apps/frontend/app/routes/**/*'
  workflow_dispatch:
    inputs:
      module:
        description: 'Module spécifique à tester (optionnel)'
        required: false
      type:
        description: 'Type de tests (nestjs, remix, both)'
        required: false
        default: 'both'
      auto_detect:
        description: 'Activer la détection automatique'
        required: false
        default: 'true'
        type: boolean
      run_tests:
        description: 'Exécuter les tests après génération'
        required: false
        default: 'true'
        type: boolean

jobs:
  generate-and-run-tests:
    name: Générer et exécuter les tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3
      
      - name: 🔧 Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: 📦 Installation des dépendances
        run: |
          npm install -g pnpm
          pnpm install
      
      # Étape conditionnelle pour les modules spécifiques
      - name: 🧪 Générer les tests pour un module spécifique
        if: ${{ github.event.inputs.module != '' }}
        run: |
          ./bin/test-writer.sh --module=${{ github.event.inputs.module }} --type=${{ github.event.inputs.type }} --coverage --run-tests=${{ github.event.inputs.run_tests }}
      
      # Étape pour la détection automatique
      - name: 🧪 Générer les tests avec détection automatique
        if: ${{ github.event.inputs.module == '' && github.event.inputs.auto_detect == 'true' }}
        run: |
          ./bin/test-writer.sh --auto-detect --type=${{ github.event.inputs.type || 'both' }} --coverage --run-tests=${{ github.event.inputs.run_tests }}
      
      # Étape pour les fichiers modifiés dans une PR
      - name: 🔍 Détecter les fichiers modifiés dans la PR
        if: ${{ github.event_name == 'pull_request' && github.event.inputs.module == '' && github.event.inputs.auto_detect != 'true' }}
        id: changed_files
        uses: dorny/paths-filter@v2
        with:
          filters: |
            nestjs:
              - 'apps/backend/src/**/*.ts'
              - '!apps/backend/src/**/*.spec.ts'
            remix:
              - 'apps/frontend/app/routes/**/*.tsx'
      
      # Générer des tests pour les fichiers NestJS modifiés
      - name: 🧪 Générer les tests pour les fichiers NestJS modifiés
        if: ${{ steps.changed_files.outputs.nestjs == 'true' }}
        run: |
          # Extraire les modules modifiés
          MODIFIED_MODULES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'apps/backend/src/.*/.*\.ts' | grep -v '\.spec\.ts' | sed -E 's/.*\/([^\/]+)\.service\.ts/\1/g' | sort -u)
          
          for MODULE in $MODIFIED_MODULES; do
            echo "Génération de tests pour le module NestJS: $MODULE"
            ./bin/test-writer.sh --module=$MODULE --type=nestjs --coverage --run-tests=${{ github.event.inputs.run_tests }}
          done
      
      # Générer des tests pour les fichiers Remix modifiés
      - name: 🧪 Générer les tests pour les fichiers Remix modifiés
        if: ${{ steps.changed_files.outputs.remix == 'true' }}
        run: |
          # Extraire les routes modifiées
          MODIFIED_ROUTES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'apps/frontend/app/routes/.*\.tsx' | sed -E 's/.*\/routes\/([^\/]+)\.tsx/\1/g' | sort -u)
          
          for ROUTE in $MODIFIED_ROUTES; do
            echo "Génération de tests pour la route Remix: $ROUTE"
            ./bin/test-writer.sh --module=$ROUTE --type=remix --coverage --run-tests=${{ github.event.inputs.run_tests }}
          done
      
      # Exécuter les tests NestJS
      - name: 🧪 Exécuter les tests unitaires NestJS
        if: ${{ github.event.inputs.run_tests == 'true' }}
        run: pnpm test:unit
      
      # Exécuter les tests Remix
      - name: 🧪 Exécuter les tests E2E Remix
        if: ${{ github.event.inputs.run_tests == 'true' }}
        run: pnpm test:e2e
      
      # Télécharger le rapport de couverture comme artefact
      - name: 📊 Publier le rapport de couverture
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage-report
          path: |
            reports/test_coverage_map.json
            coverage/
          retention-days: 14