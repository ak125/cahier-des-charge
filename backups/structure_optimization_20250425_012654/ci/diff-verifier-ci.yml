name: V√©rification fonctionnelle PHP -> NestJS/Remix

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend/src/**'
      - 'apps/frontend/app/routes/**'
  pull_request:
    paths:
      - 'apps/backend/src/**'
      - 'apps/frontend/app/routes/**'
  workflow_dispatch:
    inputs:
      file:
        description: 'Fichier PHP sp√©cifique √† v√©rifier'
        required: false
        type: string
      directory:
        description: 'R√©pertoire PHP √† v√©rifier'
        required: false
        type: string
      batch_mode:
        description: 'V√©rifier tous les fichiers avec audit non v√©rifi√©s'
        required: false
        type: boolean
        default: false
      auto_remediate:
        description: 'Tenter de corriger automatiquement les divergences'
        required: false
        type: boolean
        default: false
      update_discovery:
        description: 'Mettre √† jour discovery_map.json'
        required: false
        type: boolean
        default: false
      generate_report:
        description: 'G√©n√©rer un rapport HTML global'
        required: false
        type: boolean
        default: true

jobs:
  verify-code:
    name: V√©rification de parit√© comportementale
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: Installation de pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Installation des d√©pendances
        run: pnpm install
      
      - name: D√©tection des fichiers modifi√©s (Pull Request)
        if: github.event_name == 'pull_request' && !github.event.inputs.file && !github.event.inputs.directory && !github.event.inputs.batch_mode
        id: changed_files
        run: |
          FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.tsx?$' | xargs -I{} echo "{}")
          echo "::set-output name=files::$FILES"
      
      - name: Pr√©paration du rapport de v√©rification
        run: |
          mkdir -p reports
          mkdir -p audit
      
      - name: Ex√©cution de la v√©rification via workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          ARGS=""
          if [ -n "${{ github.event.inputs.file }}" ]; then
            ARGS="--file=${{ github.event.inputs.file }}"
          elif [ -n "${{ github.event.inputs.directory }}" ]; then
            ARGS="--dir=${{ github.event.inputs.directory }}"
          elif [ "${{ github.event.inputs.batch_mode }}" == "true" ]; then
            ARGS="--batch"
          fi
          
          if [ "${{ github.event.inputs.auto_remediate }}" == "true" ]; then
            ARGS="$ARGS --auto-remediate"
          fi
          
          if [ "${{ github.event.inputs.update_discovery }}" == "true" ]; then
            ARGS="$ARGS --update-discovery"
          fi
          
          if [ "${{ github.event.inputs.generate_report }}" == "true" ]; then
            ARGS="$ARGS --report"
          fi
          
          ./bin/diff-verifier.sh $ARGS
      
      - name: Ex√©cution de la v√©rification en mode batch (Push)
        if: github.event_name == 'push'
        run: ./bin/diff-verifier.sh --batch --auto-remediate --update-discovery --report
      
      - name: Ex√©cution de la v√©rification pour les fichiers modifi√©s (Pull Request)
        if: github.event_name == 'pull_request' && !github.event.inputs.file && !github.event.inputs.directory && !github.event.inputs.batch_mode
        run: |
          # Pour chaque fichier TS/TSX modifi√©, trouver le fichier PHP correspondant et v√©rifier
          for FILE in ${{ steps.changed_files.outputs.files }}; do
            BASE_NAME=$(basename $FILE .tsx)
            BASE_NAME=${BASE_NAME%.ts}
            BASE_NAME=${BASE_NAME%.service}
            BASE_NAME=${BASE_NAME%.controller}
            BASE_NAME=${BASE_NAME%.dto}
            BASE_NAME=${BASE_NAME%.entity}
            
            # V√©rifier si un fichier PHP correspondant existe
            PHP_FILE=$(find src app -name "${BASE_NAME}.php" -type f 2>/dev/null | head -n 1)
            
            if [ -n "$PHP_FILE" ]; then
              echo "V√©rification de $PHP_FILE (correspondant √† $FILE)"
              ./bin/diff-verifier.sh --file=$PHP_FILE --auto-remediate --report
            fi
          done
      
      - name: Publication du rapport HTML
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: verification-report
          path: reports/verification_summary.html
          if-no-files-found: ignore
      
      - name: Publication de l'index des v√©rifications
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: verification-index
          path: reports/verifier_index.json
          if-no-files-found: ignore
      
      - name: Cr√©ation d'un commentaire dans la PR avec r√©sum√©
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              if (fs.existsSync('./reports/verifier_index.json')) {
                const index = JSON.parse(fs.readFileSync('./reports/verifier_index.json', 'utf8'));
                
                let body = `## üîç R√©sultats de la v√©rification de parit√© PHP ‚Üí NestJS/Remix\n\n`;
                body += `### R√©sum√©\n`;
                body += `- ‚úÖ Fichiers v√©rifi√©s: ${index.verifiedCount}\n`;
                body += `- ‚ö†Ô∏è Fichiers divergents: ${index.divergentCount}\n`;
                body += `- üî¥ Fichiers critiques: ${index.criticalCount}\n\n`;
                
                if (index.divergentCount > 0 || index.criticalCount > 0) {
                  body += `### ‚ö†Ô∏è Attention\n`;
                  body += `Des divergences ont √©t√© d√©tect√©es entre le code PHP d'origine et le code migr√©.\n`;
                  body += `Veuillez consulter le rapport d√©taill√© dans les artefacts de CI pour plus d'informations.`;
                } else {
                  body += `### ‚úÖ Tout est en ordre\n`;
                  body += `Aucune divergence d√©tect√©e entre le code PHP d'origine et le code migr√©.`;
                }
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.error(`Erreur lors de la cr√©ation du commentaire: ${error}`);
            }