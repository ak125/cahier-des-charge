name: SEO Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'app/routes/**/*.tsx'
      - 'app/routes/**/*.jsx'
      - 'app/routes/**/*.ts'
      - 'app/routes/**/*.js'
      - '.github/workflows/block-merge-on-seo-fail.yml'

jobs:
  seo-check:
    name: V√©rification SEO
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Identifier les fichiers modifi√©s
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          files: |
            app/routes/**/*.tsx
            app/routes/**/*.jsx
            app/routes/**/*.ts
            app/routes/**/*.js
          
      - name: Analyser les fichiers modifi√©s pour les scores SEO
        if: steps.changed-files.outputs.any_changed == 'true'
        id: seo-analysis
        run: |
          SEO_ISSUE=false
          LOW_SCORE_FILES=()
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # Extraction du chemin relatif du fichier route
            ROUTE_PATH=$(echo "$file" | sed 's#app/routes/##' | sed 's#\.tsx$##' | sed 's#\.jsx$##' | sed 's#\.ts$##' | sed 's#\.js$##')
            
            # V√©rification si un fichier .seo.json existe pour cette route
            SEO_JSON_FILE="app/data/seo/${ROUTE_PATH}.seo.json"
            
            if [ -f "$SEO_JSON_FILE" ]; then
              # Extraire le score SEO du fichier JSON
              SEO_SCORE=$(cat "$SEO_JSON_FILE" | jq -r '.score')
              
              echo "Route: $ROUTE_PATH, Score SEO: $SEO_SCORE"
              
              # Si le score est inf√©rieur √† 85, c'est un √©chec
              if (( $(echo "$SEO_SCORE < 85" | bc -l) )); then
                SEO_ISSUE=true
                LOW_SCORE_FILES+=("$file: $SEO_SCORE")
              fi
            else
              echo "Aucun fichier .seo.json trouv√© pour $ROUTE_PATH, v√©rification du score SEO d√©faut"
              
              # Analyse du fichier pour extraire les m√©tadonn√©es SEO
              TITLE_COUNT=$(grep -c "title:" "$file" || echo "0")
              DESC_COUNT=$(grep -c "description" "$file" || echo "0")
              CANONICAL_COUNT=$(grep -c "canonical" "$file" || echo "0")
              
              # Score basique bas√© sur la pr√©sence des √©l√©ments SEO essentiels
              BASIC_SCORE=$((TITLE_COUNT * 30 + DESC_COUNT * 30 + CANONICAL_COUNT * 25))
              
              echo "Score SEO basique pour $file: $BASIC_SCORE"
              
              if [ "$BASIC_SCORE" -lt 85 ]; then
                SEO_ISSUE=true
                LOW_SCORE_FILES+=("$file: $BASIC_SCORE (estim√©)")
              fi
            fi
          done
          
          # D√©finir la sortie pour les √©tapes suivantes
          if [ "$SEO_ISSUE" = true ]; then
            echo "has_seo_issues=true" >> $GITHUB_OUTPUT
            echo "low_score_files=$(IFS=$'\n'; echo "${LOW_SCORE_FILES[*]}")" >> $GITHUB_OUTPUT
          else
            echo "has_seo_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Commenter le PR avec les probl√®mes SEO
        if: steps.seo-analysis.outputs.has_seo_issues == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const files = `${{ steps.seo-analysis.outputs.low_score_files }}`.split('\n');
            
            const body = `## ‚ö†Ô∏è Score SEO insuffisant
            
            Certains fichiers modifi√©s ont un score SEO inf√©rieur √† 85 :
            
            ${files.map(file => `- ${file}`).join('\n')}
            
            ### ‚ÑπÔ∏è Actions requises :
            
            1. Utilisez le dashboard SEO admin pour am√©liorer les m√©tadonn√©es
            2. Assurez-vous que chaque page a au minimum :
               - Un titre optimis√© (<60 caract√®res)
               - Une m√©ta-description (<160 caract√®res)
               - Une URL canonique
               - Des balises Open Graph
            3. Relancez les tests apr√®s correction
            
            *Cette v√©rification est effectu√©e automatiquement par le GitHub Action SEO Quality Gate.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
            
            core.setFailed("üõë Score SEO insuffisant pour certains fichiers modifi√©s. Voir les commentaires du PR pour plus de d√©tails.");