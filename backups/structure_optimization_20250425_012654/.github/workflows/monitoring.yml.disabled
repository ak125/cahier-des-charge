name: Surveillance post-migration

on:
  # D√©clenchement automatique apr√®s les d√©ploiements de preview
  workflow_run:
    workflows: ["Pr√©visualisation automatique des PRs"]
    types:
      - completed
  
  # D√©clenchement manuel
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement √† surveiller (preview, production, ou URL personnalis√©e)'
        required: true
        default: 'preview'
      routes:
        description: 'Routes sp√©cifiques √† surveiller (s√©par√©es par des virgules)'
        required: false

jobs:
  monitoring:
    name: V√©rification post-migration
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Installation des d√©pendances
        run: npm ci
      
      - name: Installation de Playwright
        run: npx playwright install --with-deps chromium
      
      - name: D√©terminer l'environnement
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENV_TARGET=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "TARGET_ROUTES=${{ github.event.inputs.routes }}" >> $GITHUB_ENV
          else
            echo "ENV_TARGET=preview" >> $GITHUB_ENV
            echo "TARGET_ROUTES=" >> $GITHUB_ENV
          fi

      - name: R√©cup√©rer la PR number (pour preview)
        if: ${{ env.ENV_TARGET == 'preview' }}
        id: pr_info
        run: |
          PR_NUMBER=$(ls -t .preview/fiche-* 2>/dev/null | head -1 | grep -oP 'fiche-\K\d+' || echo "")
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "Dernier environnement de pr√©visualisation d√©tect√©: PR #$PR_NUMBER"
          
      - name: Ex√©cuter la surveillance post-migration
        run: |
          TARGET_OPTION=""
          if [ ! -z "$TARGET_ROUTES" ]; then
            TARGET_OPTION="--target $TARGET_ROUTES"
          fi
          
          npx ts-node agents/monitoring-check.ts --env $ENV_TARGET $TARGET_OPTION
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          N8N_WEBHOOK: ${{ secrets.N8N_WEBHOOK }}
          
      - name: T√©l√©charger les rapports de surveillance
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-reports${{ env.PR_NUMBER != '' && format('-pr-{0}', env.PR_NUMBER) || '' }}
          path: |
            reports/monitoring/**
          retention-days: 7
          
      - name: Commenter la PR avec les r√©sultats
        if: ${{ env.PR_NUMBER != '' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Lire le rapport de synth√®se
              const summaryPath = path.join(process.cwd(), 'reports', 'monitoring', 'monitoring_summary.md');
              const statusPath = path.join(process.cwd(), 'reports', 'monitoring', 'post_migration_monitor.json');
              
              if (!fs.existsSync(summaryPath) || !fs.existsSync(statusPath)) {
                console.log('Rapports de monitoring non trouv√©s');
                return;
              }
              
              const status = JSON.parse(fs.readFileSync(statusPath, 'utf8'));
              const summary = status.summary;
              
              // D√©finir l'ic√¥ne de statut
              const totalIssues = summary.invalidStatusCodes + summary.performanceRegressions + summary.criticalDomIssues;
              const statusIcon = totalIssues === 0 ? '‚úÖ' : totalIssues > 3 ? '‚ùå' : '‚ö†Ô∏è';
              
              // Cr√©er le commentaire
              let comment = `## ${statusIcon} Rapport de surveillance post-migration\n\n`;
              
              if (totalIssues === 0) {
                comment += `Tous les tests sont pass√©s avec succ√®s ! üéâ\n\n`;
              } else {
                comment += `${totalIssues} probl√®mes d√©tect√©s qui n√©cessitent votre attention.\n\n`;
              }
              
              comment += `**R√©sum√© des v√©rifications:**\n\n`;
              comment += `- Routes test√©es: ${summary.totalRoutes}\n`;
              comment += `- Codes HTTP valides: ${summary.validStatusCodes}/${summary.totalRoutes}\n`;
              comment += `- Am√©liorations de performance: ${summary.performanceImprovements}\n`;
              comment += `- R√©gressions de performance: ${summary.performanceRegressions}\n`;
              comment += `- Probl√®mes DOM critiques: ${summary.criticalDomIssues}\n`;
              comment += `- Avertissements: ${summary.warnings}\n\n`;
              
              comment += `Consultez les rapports d√©taill√©s dans les artefacts de la build pour plus d'informations.`;
              
              // Poster le commentaire sur la PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(${{ env.PR_NUMBER }}),
                body: comment
              });
              
              console.log('Commentaire ajout√© √† la PR #' + ${{ env.PR_NUMBER }});
            } catch (error) {
              console.error('Erreur lors de la cr√©ation du commentaire:', error);
            }