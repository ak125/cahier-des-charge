/**
 * Script de g√©n√©ration automatique de documentation
 * 
 * Ce script g√©n√®re la documentation des agents et composants du projet
 * Il est ex√©cut√© automatiquement lors des commits via un hook git
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Chemins des r√©pertoires
const projectRoot = path.resolve(__dirname, '../../');
const agentsDir = path.join(projectRoot, 'agents');
const docsDir = path.join(__dirname, '../docs');
const agentDocsDir = path.join(docsDir, 'agents');

// Cr√©ation des r√©pertoires de documentation s'ils n'existent pas
if (!fs.existsSync(docsDir)) {
    fs.mkdirSync(docsDir, { recursive: true });
}

if (!fs.existsSync(agentDocsDir)) {
    fs.mkdirSync(agentDocsDir, { recursive: true });
}

// Lecture du registre des agents pour g√©n√©rer la documentation dynamiquement
function generateAgentRegistry() {
    console.log('üìù G√©n√©ration de la documentation du registre des agents...');

    try {
        const agentRegistryPath = path.join(agentsDir, 'agent-registry.ts');

        if (!fs.existsSync(agentRegistryPath)) {
            console.error(`‚ùå Fichier agent-registry.ts non trouv√© √† ${agentRegistryPath}`);
            return;
        }

        const registryContent = fs.readFileSync(agentRegistryPath, 'utf-8');
        const agentsList = [];

        // Expression r√©guli√®re pour extraire les informations des agents
        const agentRegex = /^\s*'([^']+)':\s*{\s*name:\s*'([^']+)',\s*description:\s*'([^']+)'/gm;

        let match;
        while ((match = agentRegex.exec(registryContent)) !== null) {
            const [_, id, name, description] = match;
            agentsList.push({ id, name, description });
        }

        // G√©n√©ration du fichier markdown pour la page d'index des agents
        const agentIndexContent = `---
id: agents
title: Agents IA
sidebar_label: Liste des Agents
slug: /agents
---

# Agents IA du Projet

Ce projet utilise plusieurs agents d'IA sp√©cialis√©s pour diff√©rentes t√¢ches d'automatisation,
de v√©rification et d'optimisation. Chaque agent a un r√¥le sp√©cifique dans le flux de travail.

## Liste des Agents Disponibles

| ID | Nom | Description |
|----|-----|-------------|
${agentsList.map(agent => `| \`${agent.id}\` | ${agent.name} | ${agent.description} |`).join('\n')}

## Utilisation des Agents

Les agents peuvent √™tre utilis√©s individuellement ou orchestr√©s ensemble selon les besoins.
Pour plus de d√©tails sur l'API de chaque agent, consultez la [documentation API](/api).

### Exemple d'utilisation

\`\`\`typescript
import { loadAgent } from './agents';

// Charger un agent √† partir de son ID
const seoChecker = await loadAgent('seo-checker');

// Ex√©cuter l'agent
const result = await seoChecker.run({
  url: 'https://example.com'
});

console.log('R√©sultat:', result);
\`\`\`

## Int√©gration MCP

Les agents sont compatibles avec le Model Context Protocol (MCP) et peuvent √™tre utilis√©s
comme des n≈ìuds dans un pipeline MCP.
`;

        fs.writeFileSync(path.join(agentDocsDir, 'index.md'), agentIndexContent);
        console.log('‚úÖ Documentation du registre des agents g√©n√©r√©e avec succ√®s');

    } catch (error) {
        console.error(`‚ùå Erreur lors de la g√©n√©ration de la documentation du registre des agents: ${error.message}`);
    }
}

// G√©n√©ration de la documentation d√©taill√©e pour chaque agent
function generateAgentDocs() {
    console.log('üìù G√©n√©ration de la documentation d√©taill√©e des agents...');

    try {
        const agentFiles = fs.readdirSync(agentsDir)
            .filter(file => file.endsWith('-agent.ts') || file.endsWith('-verifier.ts'));

        for (const agentFile of agentFiles) {
            const agentPath = path.join(agentsDir, agentFile);
            const agentName = path.basename(agentFile, path.extname(agentFile));
            const outputPath = path.join(agentDocsDir, `${agentName}.md`);

            console.log(`Traitement de ${agentName}...`);

            // Extraction des commentaires JSDoc via un petit script temporaire
            const tempScriptPath = path.join(__dirname, '_temp-extract.js');

            fs.writeFileSync(tempScriptPath, `
        const fs = require('fs');
        const path = require('path');
        const ts = require('typescript');
        
        // Lire le fichier source
        const filePath = '${agentPath.replace(/\\/g, '\\\\')}';
        const fileContent = fs.readFileSync(filePath, 'utf-8');
        
        // Parser le fichier pour extraire les commentaires JSDoc
        const sourceFile = ts.createSourceFile(
          filePath,
          fileContent,
          ts.ScriptTarget.Latest,
          true
        );
        
        // R√©cup√©rer les commentaires et la structure
        const comments = [];
        const classes = [];
        const interfaces = [];
        
        function visit(node) {
          // Extraire les commentaires JSDoc
          const jsDocs = ts.getJSDocCommentsAndTags(node);
          if (jsDocs && jsDocs.length > 0) {
            const docComment = jsDocs[0].comment || '';
            
            // D√©terminer le type de n≈ìud (classe, interface, m√©thode...)
            let nodeType = '';
            let nodeName = '';
            
            if (ts.isClassDeclaration(node) && node.name) {
              nodeType = 'class';
              nodeName = node.name.text;
              classes.push({ name: nodeName, doc: docComment });
            } else if (ts.isInterfaceDeclaration(node) && node.name) {
              nodeType = 'interface';
              nodeName = node.name.text;
              interfaces.push({ name: nodeName, doc: docComment });
            } else if (ts.isMethodDeclaration(node) && node.name) {
              nodeType = 'method';
              nodeName = node.name.getText(sourceFile);
            } else if (ts.isFunctionDeclaration(node) && node.name) {
              nodeType = 'function';
              nodeName = node.name.text;
            }
            
            if (nodeType && nodeName) {
              comments.push({ nodeType, nodeName, comment: docComment });
            }
          }
          
          ts.forEachChild(node, visit);
        }
        
        visit(sourceFile);
        
        // G√©n√©rer le contenu Markdown
        let markdownContent = \`---
id: \${path.basename(filePath, '.ts')}
title: \${path.basename(filePath, '.ts').split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
sidebar_label: \${path.basename(filePath, '.ts').split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}
---

# \${path.basename(filePath, '.ts').split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}

\`;

        // Ajouter la documentation g√©n√©rale (premier commentaire JSDoc)
        if (comments.length > 0 && comments[0].comment) {
          markdownContent += comments[0].comment + "\\n\\n";
        }
        
        // Ajouter les informations sur les classes
        if (classes.length > 0) {
          markdownContent += "## Classes\\n\\n";
          for (const cls of classes) {
            markdownContent += \`### \${cls.name}\\n\\n\${cls.doc}\\n\\n\`;
          }
        }
        
        // Ajouter les informations sur les interfaces
        if (interfaces.length > 0) {
          markdownContent += "## Interfaces\\n\\n";
          for (const intf of interfaces) {
            markdownContent += \`### \${intf.name}\\n\\n\${intf.doc}\\n\\n\`;
          }
        }
        
        // Ajouter un lien vers la documentation API
        markdownContent += \`## Documentation API compl√®te\\n\\n
Pour consulter la documentation technique compl√®te g√©n√©r√©e √† partir du code source, 
[visitez la documentation API](/api/classes/\${path.basename(filePath, '.ts')}.html).\\n\\n\`;
        
        console.log(JSON.stringify({ markdown: markdownContent }));
      `);

            try {
                const result = execSync(`node ${tempScriptPath}`);
                const { markdown } = JSON.parse(result.toString());
                fs.writeFileSync(outputPath, markdown);
                console.log(`‚úÖ Documentation g√©n√©r√©e pour ${agentName}`);
            } catch (err) {
                console.error(`‚ùå Erreur lors du traitement de ${agentName}: ${err.message}`);
            } finally {
                // Nettoyage
                if (fs.existsSync(tempScriptPath)) {
                    fs.unlinkSync(tempScriptPath);
                }
            }
        }

    } catch (error) {
        console.error(`‚ùå Erreur lors de la g√©n√©ration de la documentation des agents: ${error.message}`);
    }
}

// G√©n√©ration de la page d'introduction
function generateIntroPage() {
    console.log('üìù G√©n√©ration de la page d'introduction...');
  
  const introContent = `---
id: intro
title: Introduction
sidebar_position: 1
slug: /
---

# Documentation G√©n√©rative Unifi√©e

Bienvenue dans la documentation centralis√©e et g√©n√©r√©e automatiquement du projet. Cette documentation est
maintenue √† jour automatiquement gr√¢ce √† des processus de g√©n√©ration int√©gr√©s au cycle de d√©veloppement.

## Structure de la Documentation

- **[Agents IA](/docs/agents)** - Documentation sur les agents d'IA utilis√©s dans le projet
- **[API](/api)** - Documentation technique g√©n√©r√©e automatiquement √† partir du code source
- **[Journal](/blog)** - Journal des mises √† jour et √©volutions du projet

## Fonctionnalit√©s Principales

- Documentation g√©n√©r√©e automatiquement √† chaque commit
- Int√©gration fluide entre documentation technique et guides utilisateur
- Support multilingue
- Diagrammes et visualisations interactifs

## D√©marrage Rapide

Pour commencer √† utiliser le projet, consultez les guides suivants:

- [Installation et configuration](/docs/installation)
- [Premiers pas avec les agents](/docs/agents)
- [Architecture du projet](/docs/architecture)

## G√©n√©ration de la Documentation

La documentation est g√©n√©r√©e automatiquement √† l'aide des outils suivants:

- **TypeDoc** - Pour la documentation API √† partir des commentaires JSDoc/TSDoc
- **Docusaurus** - Pour le site de documentation lui-m√™me
- **Scripts personnalis√©s** - Pour extraire les informations des agents et autres composants

Pour mettre √† jour la documentation localement, ex√©cutez:

\`\`\`bash
pnpm run docs:generate
\`\`\`

Cette commande analyse le code source, extrait les commentaires JSDoc et g√©n√®re la documentation actualis√©e.
`;

    fs.writeFileSync(path.join(docsDir, 'intro.md'), introContent);
    console.log('‚úÖ Page d'introduction g√©n√©r√©e avec succ√®s');
}

// Ex√©cution des fonctions de g√©n√©ration
try {
    console.log('üöÄ D√©marrage de la g√©n√©ration de documentation...');
    generateIntroPage();
    generateAgentRegistry();
    generateAgentDocs();
    console.log('‚úÖ Documentation g√©n√©r√©e avec succ√®s !');
} catch (error) {
    console.error(`‚ùå Erreur lors de la g√©n√©ration de la documentation: ${error.message}`);
    process.exit(1);
}