import { Logger } from '@nestjs/common';
import { Job, Worker } from 'bullmq';
import { DoDotmcpVerifier } from '../../packagesDoDotmcp-agentsDoDotmcp-verifier';

/**
 * Worker BullMQ pour la v√©rification de fichiers g√©n√©r√©s par MCP
 * Ce worker traite les jobs de v√©rification mis en file d'attente
 */
async function startMcpVerifierWorker() {
  const logger = new Logger('MCP-Verifier-Worker');
  logger.log('üöÄ D√©marrage du worker MCP Verifier...');

  const worker = new Worker(
    'verification',
    async (job: Job) => {
      logger.log(`üìã Traitement du job ${job.id}: ${job.name}`);
      const { filePrefix, options } = job.data;

      try {
        logger.log(`üîç V√©rification des fichiers avec pr√©fixe: ${filePrefix}`);

        // Appel de l'agent de v√©rification
        const result = awaitDoDotmcpVerifier.run({
          filePrefix,
          generateReport: true,
          addTags: true,
          typeCheck: true,
          ...options,
        });

        logger.log(`‚úÖ V√©rification termin√©e pour ${filePrefix}`);

        // R√©sultats pour BullMQ
        return {
          success: result.status === 'success',
          summary: result.summary,
          timestamp: new Date().toISOString(),
          jobId: job.id,
          endTime: new Date().toISOString(),
          executionTimeMs: new Date().getTime() - new Date(job.data.timestamp).getTime(),
        };
      } catch (error) {
        logger.error(`‚ùå Erreur lors de la v√©rification de ${filePrefix}: ${error.message}`);
        throw error; // BullMQ g√®rera automatiquement les retry en fonction des param√®tres
      }
    },
    {
      connection: {
        host: process.env.REDIS_HOST || 'localhost',
        port: parseInt(process.env.REDIS_PORT || '6379'),
      },
      concurrency: parseInt(process.env.VERIFIER_WORKER_CONCURRENCY || '2'),
      limiter: {
        max: 5, // Maximum de 5 jobs par intervalle
        duration: 1000, // Intervalle de 1 seconde
      },
    }
  );

  // Configurer les √©couteurs d'√©v√©nements
  worker.on('completed', (job: Job, result: any) => {
    logger.log(`‚ú® Job ${job.id} termin√© avec succ√®s`);
  });

  worker.on('failed', (job: Job, error: Error) => {
    logger.error(`üí• Job ${job.id} a √©chou√©: ${error.message}`);
  });

  worker.on('error', (err: Error) => {
    logger.error(`üî• Erreur worker MCP Verifier: ${err.message}`);
  });

  logger.log('‚úÖ Worker MCP Verifier d√©marr√© avec succ√®s');
  return worker;
}

// D√©marrage automatique si ex√©cut√© directement
if (require.main === module) {
  startMcpVerifierWorker().catch((err) => {
    console.error('‚ùå Erreur fatale du worker MCP Verifier:', err);
    process.exit(1);
  });
}

export { startMcpVerifierWorker };
