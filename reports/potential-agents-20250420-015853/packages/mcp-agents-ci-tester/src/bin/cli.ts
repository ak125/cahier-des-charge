#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import { runCITester } from '../index';

// Cr√©er une interface en ligne de commande
const program = new Command();

// Configurer les m√©tadonn√©es
program
  .name(DoDotmcp-ci-tester')
  .description('Agent de validation et g√©n√©ration de pipelines CI pour monorepos')
  .version('1.0.0');

// Options principales
program
  .option('-c, --config <path>', 'Chemin vers le fichier de configuration')
  .option('-o, --output <path>', 'R√©pertoire de sortie pour les fichiers g√©n√©r√©s')
  .option('--no-workflow', 'Ne pas g√©n√©rer le fichier workflow GitHub Actions')
  .option('--no-validate', 'Ne pas valider la configuration actuelle')
  .option('--local-test', 'Ex√©cuter un test local de la CI')
  .option('-DoDoDoDoDoDotgithub-apps', 'Sugg√©rer l\'installation d\'applications GitHub')
  .option('--dry-run', 'Afficher les actions sans les ex√©cuter')
  .option('-v, --verbose', 'Afficher plus d\'informations')
  .option('--templates <path>', 'R√©pertoire contenant des templates personnalis√©s');

// Action principale
program.action(async (options) => {
  try {
    console.log(chalk.blue('üöÄ Agent ci-tester - G√©n√©rateur et validateur de pipelines CI'));
    
    // Ex√©cuter l'agent
    const result = await runCITester({
      configPath: options.config,
      generateWorkflow: options.workflow !== false,
      validateCurrentSetup: options.validate !== false,
      localTest: options.localTest || false,
      installGitHubApps: optionsDoDoDoDoDoDotgithubApps || false,
      outputPath: options.output,
      templatesPath: options.templates,
      verbose: options.verbose || false,
      dryRun: options.dryRun || false
    });
    
    // Afficher un r√©sum√© du r√©sultat
    if (result.status === 'success') {
      console.log(chalk.green('\n‚úÖ Traitement termin√© avec succ√®s'));
    } else if (result.status === 'warning') {
      console.log(chalk.yellow('\n‚ö†Ô∏è Traitement termin√© avec des avertissements'));
    } else {
      console.log(chalk.red('\n‚ùå Traitement termin√© avec des erreurs'));
    }
    
    // Afficher les fichiers g√©n√©r√©s
    if (result.generatedFiles.length > 0) {
      console.log(chalk.blue('\nüìÑ Fichiers g√©n√©r√©s:'));
      result.generatedFiles.forEach(file => {
        console.log(`  - ${file}`);
      });
    }
    
    // Sortir avec le code appropri√©
    process.exit(result.status === 'error' ? 1 : 0);
  } catch (error: any) {
    console.error(chalk.red(`‚ùå Erreur: ${error.message}`));
    process.exit(1);
  }
});

// Commande pour lancer la validation locale
program
  .command('local')
  .description('Ex√©cuter une validation CI locale interactive')
  .action(async () => {
    // Importer de mani√®re dynamique pour √©viter des d√©pendances circulaires
    const { default: runLocalValidator } = await import('./local-validator');
    await runLocalValidator();
  });

// Commande pour g√©n√©rer un rapport uniquement
program
  .command('report')
  .description('G√©n√©rer un rapport CI sans workflow')
  .option('-o, --output <path>', 'Chemin de sortie pour le rapport')
  .action(async (options) => {
    console.log(chalk.blue('üìä G√©n√©ration du rapport CI...'));
    
    const result = await runCITester({
      generateWorkflow: false,
      validateCurrentSetup: true,
      outputPath: options.output
    });
    
    console.log(chalk.green(`‚úÖ Rapport g√©n√©r√©: ${result.generatedFiles.find(f => f.includes('report'))}`));
  });

// Parser les arguments
program.parse(process.argv);