/**
 * Auto PR Agent - Agent de cr√©ation automatique de Pull Requests pour les migrations PHP vers Remix
 * 
 * Cet agent cr√©e automatiquement des Pull Requests GitHub apr√®s une migration r√©ussie,
 * en incluant un r√©sum√© d√©taill√© des changements et des r√©sultats de l'analyse QA.
 */

import { Octokit } from '@octokit/rest';
import { Logger } from '@nestjs/common';
import fs from 'fs-extra';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
import { MCPManifestManager } from './mcp-manifest-manager';
import { createNotifier } from './notifier';
import { BaseAgent, BusinessAgent } from '../core/interfaces/base-agent';


const execAsync = promisify(exec);

// Types
export interface AutoPRConfig {
  github: {
    token: string;
    owner: string;
    repo: string;
    baseBranch: string;
    labels: string[];
    assignees?: string[];
    reviewers?: string[];
    draft?: boolean;
    prTemplate?: string;
  };
  manifest: {
    path: string;
  };
  notifier?: {
    configPath: string;
    enabled: boolean;
  };
  dryRun?: boolean;
}

export interface PRResult {
  success: boolean;
  prNumber?: number;
  prUrl?: string;
  error?: string;
}

/**
 * Agent de cr√©ation automatique de Pull Requests
 */
export class AutoPRAgent implements BaseAgent, BusinessAgent {
  private logger = new Logger('AutoPRAgent');
  private octokit: Octokit;
  private config: AutoPRConfig;
  private manifestManager: MCPManifestManager;
  private notifier: any;
  
  constructor(config: AutoPRConfig) {
    this.config = config;
    
    // Initialiser l'API GitHub
    this.octokit = new Octokit({
      auth: this.config.github.token
    });
    
    // Initialiser le gestionnaire de manifeste
    this.manifestManager = new MCPManifestManager(config.manifest.path);
    
    // Initialiser le notifier si activ√©
    if (config.notifier && config.notifier.enabled) {
      try {
        const notifierConfig = fs.readJsonSync(config.notifier.configPath);
        this.notifier = createNotifier(notifierConfig);
        this.logger.log('üîå Notifier initialis√©');
      } catch (error: any) {
        this.logger.warn(`‚ö†Ô∏è Impossible d'initialiser le notifier: ${error.message}`);
      }
    }
  }
  
  /**
   * Cr√©e une Pull Request pour une migration sp√©cifique
   */
  public async createPRForMigration(migrationId: string): Promise<PRResult> {
    try {
      // Charger le manifeste
      await this.manifestManager.load();
      
      // R√©cup√©rer les informations de la migration
      const migration = this.manifestManager.getMigration(migrationId);
      
      if (!migration) {
        throw new Error(`Migration ${migrationId} non trouv√©e dans le manifeste`);
      }
      
      // V√©rifier si la migration est compl√©t√©e
      if (migration.status !== 'completed' && migration.status !== 'in_progress') {
        throw new Error(`La migration ${migrationId} n'est pas compl√©t√©e ou en cours`);
      }
      
      // Extraire les informations n√©cessaires pour la PR
      const sourceFile = migration.sourceFile;
      const targetFiles = migration.targetFiles;
      
      // Cr√©er une branche pour la PR
      const branchName = await this.createBranch(migrationId, sourceFile);
      
      // Ajouter et commiter les fichiers
      await this.commitFiles(branchName, targetFiles, sourceFile);
      
      // Si c'est un dry run, arr√™ter ici
      if (this.config.dryRun) {
        this.logger.log(`‚úÖ Mode dry run: branche ${branchName} cr√©√©e avec les fichiers ajout√©s`);
        return { success: true };
      }
      
      // Pousser la branche sur GitHub
      await this.pushBranch(branchName);
      
      // Cr√©er la Pull Request
      const { prNumber, prUrl } = await this.createPR(branchName, migration);
      
      // Mettre √† jour le manifeste avec l'URL de la PR
      migration.prUrl = prUrl;
      await this.manifestManager.save();
      
      // Envoyer une notification si le notifier est activ√©
      if (this.notifier) {
        await this.notifier.notify({
          type: 'pr:created',
          migrationId,
          sourceFile,
          targetFiles,
          status: migration.status,
          qaStatus: migration.qaStatus,
          seoStatus: migration.seoStatus,
          prUrl,
          timestamp: new Date().toISOString(),
          tags: migration.tags
        });
      }
      
      this.logger.log(`‚úÖ Pull Request #${prNumber} cr√©√©e avec succ√®s: ${prUrl}`);
      
      return {
        success: true,
        prNumber,
        prUrl
      };
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur lors de la cr√©ation de la PR pour la migration ${migrationId}: ${error.message}`);
      
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Cr√©e une branche Git pour la migration
   */
  private async createBranch(migrationId: string, sourceFile: string): Promise<string> {
    try {
      // Construire un nom de branche bas√© sur le fichier source et l'ID de migration
      const fileName = path.basename(sourceFile, path.extname(sourceFile));
      const branchName = `migration/${migrationId}/${fileName}`;
      
      // V√©rifier si on est d√©j√† sur la branche principale
      const { stdout: currentBranch } = await execAsync('git branch --show-current');
      
      if (currentBranch.trim() !== this.config.github.baseBranch) {
        // Basculer vers la branche principale
        await execAsync(`git checkout ${this.config.github.baseBranch}`);
        this.logger.log(`üîÑ Bascul√© vers la branche ${this.config.github.baseBranch}`);
      }
      
      // Mettre √† jour la branche principale
      await execAsync(`git pull origin ${this.config.github.baseBranch}`);
      
      // V√©rifier si la branche existe d√©j√†
      const { stdout: branches } = await execAsync('git branch');
      
      if (branches.includes(branchName)) {
        // Supprimer la branche existante
        await execAsync(`git branch -D ${branchName}`);
        this.logger.log(`üóëÔ∏è Branche existante ${branchName} supprim√©e`);
      }
      
      // Cr√©er une nouvelle branche
      await execAsync(`git checkout -b ${branchName}`);
      this.logger.log(`‚úÖ Branche ${branchName} cr√©√©e`);
      
      return branchName;
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur lors de la cr√©ation de la branche: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Ajoute et commite les fichiers de la migration
   */
  private async commitFiles(branchName: string, targetFiles: Record<string, string>, sourceFile: string): Promise<void> {
    try {
      // Ajouter tous les fichiers g√©n√©r√©s
      const filePaths = Object.values(targetFiles);
      
      for (const filePath of filePaths) {
        // V√©rifier si le fichier existe
        if (await fs.pathExists(filePath)) {
          await execAsync(`git add "${filePath}"`);
        } else {
          this.logger.warn(`‚ö†Ô∏è Fichier ${filePath} non trouv√©, ignor√©`);
        }
      }
      
      // Ajouter √©galement le fichier .audit.md s'il existe
      const auditFilePath = sourceFile.replace(/\.php$/, '.audit.md');
      if (await fs.pathExists(auditFilePath)) {
        await execAsync(`git add "${auditFilePath}"`);
      }
      
      // Ajouter √©galement le fichier .qa.md s'il existe
      const qaFilePath = sourceFile.replace(/\.php$/, '.qa.md');
      if (await fs.pathExists(qaFilePath)) {
        await execAsync(`git add "${qaFilePath}"`);
      }
      
      // Cr√©er un message de commit descriptif
      const sourceFileName = path.basename(sourceFile);
      const targetFileNames = Object.values(targetFiles).map(f => path.basename(f));
      
      const commitMessage = `Migration: ${sourceFileName} vers ${targetFileNames.join(', ')}
      
Ce commit contient la migration de ${sourceFileName} vers Remix.

Fichiers g√©n√©r√©s:
${targetFileNames.map(f => `- ${f}`).join('\n')}

Migration ID: ${branchName.split('/')[1]}
`;
      
      // Commiter les fichiers
      await execAsync(`git commit -m "${commitMessage}"`);
      this.logger.log(`‚úÖ Fichiers commit√©s sur la branche ${branchName}`);
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur lors du commit des fichiers: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Pousse la branche sur GitHub
   */
  private async pushBranch(branchName: string): Promise<void> {
    try {
      await execAsync(`git push -u origin ${branchName}`);
      this.logger.log(`‚úÖ Branche ${branchName} pouss√©e sur GitHub`);
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur lors du push de la branche: ${error.message}`);
      throw error;
    }
  }
  
  /**
   * Cr√©e une Pull Request sur GitHub
   */
  private async createPR(branchName: string, migration: any): Promise<{ prNumber: number; prUrl: string }> {
    try {
      // Pr√©parer le corps de la PR
      let prBody;
      
      // Utiliser un template si disponible
      if (this.config.github.prTemplate) {
        if (await fs.pathExists(this.config.github.prTemplate)) {
          const template = await fs.readFile(this.config.github.prTemplate, 'utf-8');
          prBody = this.formatPRTemplate(template, migration);
        } else {
          this.logger.warn(`‚ö†Ô∏è Template PR non trouv√©: ${this.config.github.prTemplate}`);
          prBody = this.generateDefaultPRBody(migration);
        }
      } else {
        prBody = this.generateDefaultPRBody(migration);
      }
      
      // Cr√©er la Pull Request
      const sourceFileName = path.basename(migration.sourceFile);
      const { data } = await this.octokit.pulls.create({
        owner: this.config.github.owner,
        repo: this.config.github.repo,
        title: `Migration: ${sourceFileName} vers Remix`,
        body: prBody,
        head: branchName,
        base: this.config.github.baseBranch,
        draft: this.config.github.draft || false
      });
      
      const prNumber = data.number;
      const prUrl = data.html_url;
      
      // Ajouter les labels si configur√©s
      if (this.config.github.labels && this.config.github.labels.length > 0) {
        await this.octokit.issues.addLabels({
          owner: this.config.github.owner,
          repo: this.config.github.repo,
          issue_number: prNumber,
          labels: this.config.github.labels
        });
      }
      
      // Ajouter les assign√©s si configur√©s
      if (this.config.github.assignees && this.config.github.assignees.length > 0) {
        await this.octokit.issues.addAssignees({
          owner: this.config.github.owner,
          repo: this.config.github.repo,
          issue_number: prNumber,
          assignees: this.config.github.assignees
        });
      }
      
      // Ajouter les reviewers si configur√©s
      if (this.config.github.reviewers && this.config.github.reviewers.length > 0) {
        await this.octokit.pulls.requestReviewers({
          owner: this.config.github.owner,
          repo: this.config.github.repo,
          pull_number: prNumber,
          reviewers: this.config.github.reviewers
        });
      }
      
      return {
        prNumber,
        prUrl
      };
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur lors de la cr√©ation de la PR: ${error.message}`);
      throw error;

  id: string = '';
  type: string = '';
  version: string = '1.0.0';

  /**
   * Initialise l'agent avec des options sp√©cifiques
   */
  async initialize(options?: Record<string, any>): Promise<void> {
    // √Ä impl√©menter selon les besoins sp√©cifiques de l'agent
    console.log(`[${this.name}] Initialisation...`);
  }

  /**
   * Indique si l'agent est pr√™t √† √™tre utilis√©
   */
  isReady(): boolean {
    return true;
  }

  /**
   * Arr√™te et nettoie l'agent
   */
  async shutdown(): Promise<void> {
    console.log(`[${this.name}] Arr√™t...`);
  }

  /**
   * R√©cup√®re les m√©tadonn√©es de l'agent
   */
  getMetadata(): Record<string, any> {
    return {
      id: this.id,
      name: this.name,
      type: this.type,
      version: this.version
    };
  }

  /**
   * R√©cup√®re l'√©tat actuel de l'agent business
   */
  async getState(): Promise<Record<string, any>> {
    return {
      status: 'active',
      timestamp: new Date().toISOString()
    };
  }
    }
  }
  
  /**
   * Formate le template de PR avec les informations de la migration
   */
  private formatPRTemplate(template: string, migration: any): string {
    // Remplacer les variables dans le template
    return template
      .replace(/\$\{MIGRATION_ID\}/g, migration.id)
      .replace(/\$\{SOURCE_FILE\}/g, migration.sourceFile)
      .replace(/\$\{SOURCE_FILENAME\}/g, path.basename(migration.sourceFile))
      .replace(/\$\{TARGET_FILES\}/g, Object.values(migration.targetFiles).map((f: string) => `- ${f}`).join('\n'))
      .replace(/\$\{TARGET_FILENAMES\}/g, Object.values(migration.targetFiles).map((f: string) => path.basename(f as string)).join(', '))
      .replace(/\$\{ROUTE\}/g, migration.route || 'N/A')
      .replace(/\$\{QA_STATUS\}/g, migration.qaStatus || 'N/A')
      .replace(/\$\{SEO_STATUS\}/g, migration.seoStatus || 'N/A')
      .replace(/\$\{TAGS\}/g, migration.tags ? migration.tags.join(', ') : 'N/A')
      .replace(/\$\{CREATED_AT\}/g, migration.createdAt || new Date().toISOString())
      .replace(/\$\{COMPLETED_AT\}/g, migration.completedAt || new Date().toISOString());
  }
  
  /**
   * G√©n√®re un corps de PR par d√©faut
   */
  private generateDefaultPRBody(migration: any): string {
    const sourceFileName = path.basename(migration.sourceFile);
    const targetFileNames = Object.values(migration.targetFiles).map((f: string) => path.basename(f as string));
    
    // D√©terminer les ic√¥nes pour QA et SEO
    let qaIcon = '‚ùî';
    if (migration.qaStatus === 'OK') qaIcon = '‚úÖ';
    else if (migration.qaStatus === 'Partial') qaIcon = '‚ö†Ô∏è';
    else if (migration.qaStatus === 'Failed') qaIcon = '‚ùå';
    
    let seoIcon = '‚ùî';
    if (migration.seoStatus === 'OK') seoIcon = '‚úÖ';
    else if (migration.seoStatus === 'Partial') seoIcon = '‚ö†Ô∏è';
    else if (migration.seoStatus === 'Failed') seoIcon = '‚ùå';
    
    return `# Migration PHP vers Remix: ${sourceFileName}

Cette Pull Request contient la migration du fichier PHP \`${sourceFileName}\` vers des composants Remix.

## Fichiers g√©n√©r√©s

${Object.entries(migration.targetFiles).map(([type, file]) => `- **${type}**: \`${path.basename(file as string)}\``).join('\n')}

## D√©tails de la migration

- **ID de migration**: ${migration.id}
- **Fichier source**: \`${sourceFileName}\`
- **Route**: ${migration.route || 'N/A'}
- **QA**: ${qaIcon} ${migration.qaStatus || 'Non analys√©'}
- **SEO**: ${seoIcon} ${migration.seoStatus || 'Non analys√©'}
${migration.tags ? `- **Tags**: ${migration.tags.join(', ')}` : ''}

## √âtapes de v√©rification

${migration.verificationSteps ? 
  migration.verificationSteps.map((step: any) => {
    let icon = '‚ùî';
    if (step.status === 'passed') icon = '‚úÖ';
    else if (step.status === 'partial') icon = '‚ö†Ô∏è';
    else if (step.status === 'failed') icon = '‚ùå';
    
    let details = '';
    if (step.score !== undefined) details = ` (Score: ${step.score}/100)`;
    if (step.error) details = ` (Erreur: ${step.error})`;
    
    return `- ${icon} **${step.name}**: ${step.status}${details}`;
  }).join('\n') 
  : '- ‚ùî Aucune √©tape de v√©rification effectu√©e'
}

## Notes

Cette PR a √©t√© g√©n√©r√©e automatiquement par l'agent de cr√©ation de PR du syst√®me MCP (Model Context Protocol).

Veuillez v√©rifier et valider les fichiers g√©n√©r√©s avant de fusionner.`;
  }
  
  /**
   * V√©rifie si une PR existe d√©j√† pour une migration
   */
  public async checkExistingPR(migrationId: string): Promise<string | null> {
    try {
      // Charger le manifeste
      await this.manifestManager.load();
      
      // R√©cup√©rer les informations de la migration
      const migration = this.manifestManager.getMigration(migrationId);
      
      if (!migration) {
        throw new Error(`Migration ${migrationId} non trouv√©e dans le manifeste`);
      }
      
      // Si l'URL de PR est d√©j√† dans le manifeste, la retourner
      if (migration.prUrl) {
        return migration.prUrl;
      }
      
      // Rechercher les PRs qui pourraient correspondre √† cette migration
      const { data: pulls } = await this.octokit.pulls.list({
        owner: this.config.github.owner,
        repo: this.config.github.repo,
        state: 'open',
        head: `${this.config.github.owner}:migration/${migrationId}`
      });
      
      if (pulls.length > 0) {
        // Mettre √† jour le manifeste avec l'URL trouv√©e
        migration.prUrl = pulls[0].html_url;
        await this.manifestManager.save();
        
        return pulls[0].html_url;
      }
      
      return null;
    } catch (error: any) {
      this.logger.error(`‚ùå Erreur lors de la v√©rification des PR existantes: ${error.message}`);
      throw error;
    }
  }
}

/**
 * Cr√©e un agent PR avec la configuration sp√©cifi√©e
 */
export function createAutoPRAgent(config: AutoPRConfig): AutoPRAgent {
  return new AutoPRAgent(config);
}

// Ex√©cution autonome si appel√© directement
if (require.main === module) {
  const configPath = process.argv[2] || path.join(process.cwd(), 'config', 'auto-pr.json');
  const migrationId = process.argv[3];
  
  if (!migrationId) {
    console.error('‚ùå Usage: ts-node auto-pr-agent.ts [config-path] <migration-id>');
    process.exit(1);
  }
  
  console.log(`üìã Chargement de la configuration depuis ${configPath}`);
  
  try {
    const config = fs.readJsonSync(configPath);
    const agent = createAutoPRAgent(config);
    
    console.log(`üöÄ Cr√©ation de PR pour la migration ${migrationId}`);
    
    agent.createPRForMigration(migrationId)
      .then(result => {
        if (result.success) {
          console.log(`‚úÖ PR #${result.prNumber} cr√©√©e avec succ√®s: ${result.prUrl}`);
          process.exit(0);
        } else {
          console.error(`‚ùå √âchec de la cr√©ation de PR: ${result.error}`);
          process.exit(1);
        }
      })
      .catch(error => {
        console.error(`‚ùå Erreur: ${error.message}`);
        process.exit(1);
      });
  } catch (error: any) {
    console.error(`‚ùå Erreur lors du chargement de la configuration: ${error.message}`);
    process.exit(1);
  }
}