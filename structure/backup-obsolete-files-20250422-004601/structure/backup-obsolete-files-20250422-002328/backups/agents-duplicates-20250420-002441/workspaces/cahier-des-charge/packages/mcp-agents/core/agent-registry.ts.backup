/**
 * Registre centralisé pour tous les agents MCP
 * Ce fichier permet d'enregistrer et de retrouver facilement tous les agents disponibles
 */

import { EventEmitter } from 'events';
import { McpAgent, AgentMetadata, AgentType } from './interfaces';

class AgentRegistry implements BaseAgent, BusinessAgent {
  private static instance: AgentRegistry;
  private agents: Map<string, McpAgent> = new Map();
  private events = new EventEmitter();

  private constructor() {
    // Singleton pattern
  }

  public static getInstance(): AgentRegistry {
    if (!AgentRegistry.instance) {
      AgentRegistry.instance = new AgentRegistry();
    }
    return AgentRegistry.instance;
  }

  /**
   * Enregistre un agent dans le registre
   */
  public register(agent: McpAgent): void {
    if (!agent || !agent.metadata || !agent.metadata.id) {
      throw new Error('Agent invalide ou sans identifiant');
    }

    if (this.agents.has(agent.metadata.id)) {
      console.warn(`Agent avec ID ${agent.metadata.id} déjà enregistré, sera remplacé`);
    }

    this.agents.set(agent.metadata.id, agent);
    this.events.emit('agent:registered', agent.metadata);
  }

  /**
   * Récupère un agent par son ID
   */
  public getAgent(id: string): McpAgent | undefined {
    return this.agents.get(id);
  }

  /**
   * Récupère tous les agents d'un type spécifique
   */
  public getAgentsByType(type: AgentType): McpAgent[] {
    return Array.from(this.agents.values())
      .filter(agent => agent.metadata.type === type);
  }

  /**
   * Récupère tous les agents enregistrés
   */
  public getAllAgents(): McpAgent[] {
    return Array.from(this.agents.values());
  }

  /**
   * Récupère toutes les métadonnées des agents
   */
  public getAllMetadata(): AgentMetadata[] {
    return Array.from(this.agents.values())
      .map(agent => agent.metadata);
  }

  /**
   * Désenregistre un agent
   */
  public unregister(id: string): boolean {
    const exists = this.agents.has(id);
    if (exists) {
      this.agents.delete(id);
      this.events.emit('agent:unregistered', id);
    }
    return exists;
  }

  /**
   * S'abonne aux événements du registre
   */
  public on(event: string, listener: (...args: any[]) => void): void {
    this.events.on(event, listener);
  }
}

// Export une instance unique du registre
export const agentRegistry = AgentRegistry.getInstance();

// Fonction utilitaire pour enregistrer un agent
export function registerAgent(agent: McpAgent): void {
  agentRegistry.register(agent);
}

// Export des fonctions utilitaires pour travailler avec le registre
export function getAgentById(id: string): McpAgent | undefined {
  return agentRegistry.getAgent(id);
}

export function getAgentsByType(type: AgentType): McpAgent[] {
  return agentRegistry.getAgentsByType(type);
}

export function getAllAgents(): McpAgent[] {
  return agentRegistry.getAllAgents();
}



























































































































































































































































import { BaseAgent } from '@workspaces/cahier-des-charge/src/core/interfaces/base-agent';
import { BusinessAgent } from '@workspaces/cahier-des-charge/src/core/interfaces/business';





























































































































































































































































































































































