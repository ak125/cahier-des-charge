# Configuration Nginx complexe pour test de migration
# Ce fichier sert d'exemple pour tester la migration vers Caddy

# Configuration globale
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Load balancing configuration
    upstream backend_api {
        server 127.0.0.1:3333;
        server 127.0.0.1:3334 backup;
    }
    
    upstream frontend_app {
        server 127.0.0.1:3000;
        server 127.0.0.1:3001;
    }
    
    # Configuration SSL globale
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Configuration HSTS
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # Serveur principal
    server {
        listen 80;
        listen [::]:80;
        server_name example.com www.example.com;
        
        # Redirection vers HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # Serveur HTTPS principal
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name example.com www.example.com;
        
        ssl_certificate /etc/nginx/ssl/example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/example.com.key;
        
        root /var/www/html;
        index index.html index.htm;
        
        # Location principale pour l'application frontend
        location / {
            proxy_pass http://frontend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # API backend
        location /api/ {
            proxy_pass http://backend_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Chemins legacy avec redirections
        location /legacy/ {
            rewrite ^/legacy/(.*)$ /v1/$1 permanent;
        }
        
        # Pages d'erreur personnalisées
        location /errors/ {
            alias /var/www/html/error_pages/;
            internal;
        }
        
        # Contenu statique avec cache
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 1d;
            add_header Cache-Control "public";
        }
        
        # Règles spécifiques SEO
        location ~* ^/blog/article/([0-9]+)/.*$ {
            rewrite ^/blog/article/([0-9]+)/.*$ /api/articles/$1 break;
            proxy_pass http://backend_api;
        }
        
        location = /core/seo.php {
            return 410; # Gone, contenu supprimé
        }
        
        location ~ ^/core/_seo/.*\.php$ {
            proxy_pass http://127.0.0.1:4069;
        }
        
        # Traitement des erreurs
        error_page 404 /errors/404.html;
        error_page 500 502 503 504 /errors/50x.html;
    }
    
    # Sous-domaine pour les administrateurs
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name admin.example.com;
        
        ssl_certificate /etc/nginx/ssl/example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/example.com.key;
        
        # Authentification basique
        auth_basic "Zone Administrative";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        location / {
            proxy_pass http://127.0.0.1:4000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Serveur de développement
    server {
        listen 80;
        server_name dev.example.com;
        
        return 301 https://$host$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name dev.example.com;
        
        ssl_certificate /etc/nginx/ssl/example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/example.com.key;
        
        # Configuration spécifique au développement
        location / {
            proxy_pass http://127.0.0.1:5000;
            add_header X-Environment "development";
        }
        
        # WebSocket pour le hot reload
        location /ws {
            proxy_pass http://127.0.0.1:5001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
    
    # Serveur wildcard pour les sous-domaines clients
    server {
        listen 443 ssl http2;
        server_name ~^(?<client>.+)\.client\.example\.com$;
        
        ssl_certificate /etc/nginx/ssl/wildcard.client.example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/wildcard.client.example.com.key;
        
        root /var/www/clients/$client;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /api/ {
            proxy_pass http://127.0.0.1:3333/customers/$client/;
        }
    }
}