// This is an example schema.prisma file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  password       String
  role           UserRole  @default(USER)
  isActive       Boolean   @default(true)
  emailVerified  Boolean   @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profile        Profile?
  orders         Order[]
  reviews        Review[]
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  avatar      String?
  phoneNumber String?
  address     String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  orderItems  OrderItem[]
  reviews     Review[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Float
  items       OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model McpJob {
  id        Int       @id @default(autoincrement())
  jobId     String    @unique @map("job_id")
  status    String
  filePath  String?   @map("file_path")
  result    Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("mcp_jobs")
}

// Modèles pour le SEO

model SeoPage {
  id           Int            @id @default(autoincrement())
  url          String         @unique
  title        String?
  description  String?
  canonical    String?
  score        Int            @default(0)
  status       String         @default("pending") // success, warning, error, pending
  lastChecked  DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  issues       SeoIssue[]
  history      SeoHistory[]

  @@index([url])
  @@index([status])
  @@index([score])
}

model SeoIssue {
  id           Int            @id @default(autoincrement())
  type         String
  severity     String
  message      String
  details      Json?
  pageId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  fixedAt      DateTime?
  fixed        Boolean        @default(false)

  page         SeoPage        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([severity])
  @@index([pageId])
  @@index([fixed])
}

model SeoHistory {
  id           Int            @id @default(autoincrement())
  pageId       Int
  score        Int
  event        String
  details      Json?
  date         DateTime       @default(now())

  page         SeoPage        @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
  @@index([date])
}

model SeoRedirect {
  id           Int            @id @default(autoincrement())
  source       String         @unique
  destination  String
  statusCode   Int            @default(301)
  active       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  hitCount     Int            @default(0)
  lastHit      DateTime?

  @@index([source])
  @@index([active])
}

model SeoAuditReport {
  id           Int            @id @default(autoincrement())
  name         String
  date         DateTime       @default(now())
  summary      Json
  details      Json?
  averageScore Float
  totalUrls    Int
  criticalIssues Int
  warnings     Int
  successful   Int

  @@index([date])
}

enum UserRole {
  USER
  ADMIN
  EDITOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Modèles pour le tableau de bord SEO

model SeoMetrics {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Dates de l'analyse
  analysisDate DateTime
  
  // Statistiques globales
  totalPages      Int
  criticalIssues  Int
  warningIssues   Int
  infoIssues      Int
  optimizedPages  Int
  averageScore    Float
  
  // Relation avec les pages analysées
  pages           SeoPageReport[]
}

model SeoPageReport {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Informations sur la page
  url               String
  pageTitle         String?
  metaDescription   String?
  h1                String?
  
  // Résultats de l'analyse
  score             Float
  issueCount        Int
  warningCount      Int
  criticalCount     Int
  
  // Relations
  metricsId         String
  metrics           SeoMetrics    @relation(fields: [metricsId], references: [id], onDelete: Cascade)
  issues            SeoIssue[]
}

model SeoIssue {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  title             String
  description       String
  severity          String     // 'critical', 'warning', 'info'
  impact            String?
  recommendation    String?
  code              String?    // Pour stocker un extrait de code problématique
  
  // Relations
  pageReportId      String
  pageReport        SeoPageReport @relation(fields: [pageReportId], references: [id], onDelete: Cascade)
}

// Modèle pour les URLs canoniques et redirections 
model CanonicalUrl {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  sourceUrl          String    @unique
  canonicalUrl       String
  isRedirect         Boolean   @default(false)
  redirectType       String?   // 301, 302, etc.
  statusCode         Int?      // Code HTTP pour les URLs
  lastChecked        DateTime
}

// Modèle pour les performances des pages
model PagePerformance {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  url               String
  loadTime          Float     // Temps de chargement en secondes
  firstContentPaint Float?    // Métriques Web Vitals
  largestContentPaint Float?
  cumulativeLayoutShift Float?
  firstInputDelay   Float?
  mobileScore       Float?
  desktopScore      Float?
  
  // Statistiques de ressources
  totalResources    Int?
  htmlSize          Int?      // Taille en octets
  cssSize           Int?
  jsSize            Int?
  imageSize         Int?
  otherSize         Int?
  
  dateChecked       DateTime
}