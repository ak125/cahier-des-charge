// This is an example schema.prisma file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  password       String
  role           UserRole  @default(USER)
  isActive       Boolean   @default(true)
  emailVerified  Boolean   @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  profile        Profile?
  orders         Order[]
  reviews        Review[]
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?
  avatar      String?
  phoneNumber String?
  address     String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  orderItems  OrderItem[]
  reviews     Review[]
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Float
  items       OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model McpJob {
  id        Int       @id @default(autoincrement())
  jobId     String    @unique @map("job_id")
  status    String
  filePath  String?   @map("file_path")
  result    Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("mcp_jobs")
}

enum UserRole {
  USER
  ADMIN
  EDITOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}