/**
 * example-migration-runner.ts
 * 
 * Exemple d'utilisation de l'orchestrateur standardis√© pour planifier
 * et suivre un workflow de migration PHP vers NestJS
 */

import { scheduleTask, temporal, bullmq, n8n, StandardizedOrchestratorService } from '../../orchestrators';
// Mise √† jour pour utiliser le chemin standardis√©
import type { MigrationInput } from '../../temporal/workflows/php-migration.workflow';

/**
 * Fonction principale qui d√©montre l'utilisation de l'orchestrateur standardis√©
 * pour la migration PHP vers NestJS
 */
async function runPhpMigrationExample() {
    console.log('üöÄ D√©marrage de l'exemple de migration PHP vers NestJS');

  // 1. Cr√©ation de la description de la t√¢che de migration
  const migrationTask = {
        id: `php-migration-${Date.now()}`,
        type: 'PhpToNestJsMigration', // Correspond au nom du workflow d√©fini dans le chemin standardis√©
        isComplex: true, // Forcer l'utilisation de Temporal pour cette t√¢che complexe
        tags: ['php', 'migration', 'nestjs', 'critical', 'stateful'],
        retry: {
            maxAttempts: 3,
            backoff: {
                type: 'exponential',
                delay: 1000
            }
        },
        data: <MigrationInput>{
            projectId: 'example-php-project',
            sourceDir: '/path/to/legacy/php/code',
            targetORM: 'prisma',
            analysisOptions: {
                analysisDepth: 'deep',
                detectFrameworks: true,
                analyzeDependencies: true
            },
            nestOptions: {
                architecture: 'modular',
                includeTests: true,
                includeSwagger: true
            },
            autoRetry: true
        }
    };

    console.log('üìã T√¢che de migration configur√©e:', JSON.stringify(migrationTask, null, 2));

    try {
        // 2. Utilisation de l'orchestrateur standardis√© pour planifier la t√¢che
        // L'orchestrateur va automatiquement router vers Temporal car isComplex = true
        console.log('‚è≥ Planification du workflow de migration via l\'orchestrateur standardis√©...');
        const taskId = await scheduleTask(migrationTask);
        console.log(`‚úÖ Workflow planifi√© avec succ√®s! ID: ${taskId}`);

        // 3. Simulation de la v√©rification du statut apr√®s un d√©lai
        console.log('‚è≥ Attente de 5 secondes avant de v√©rifier le statut...');
        await new Promise(resolve => setTimeout(resolve, 5000));

        // 4. Cr√©ation d'un orchestrateur standardis√© pour acc√©der aux m√©thodes avanc√©es
        const orchestrator = new StandardizedOrchestratorService();

        // 5. V√©rification du statut du workflow
        console.log('üîç V√©rification du statut du workflow...');
        const status = await orchestrator.getTaskStatus(taskId, 'TEMPORAL');
        console.log('üìä Statut actuel:', status);

        // 6. D√©monstration d'envoi de notification via BullMQ (t√¢che simple)
        console.log('üì® Envoi d\'une notification sur l\'avancement via BullMQ...');
        const notificationTaskId = await orchestrator.scheduleSimpleTask('sendNotification', {
            channel: 'slack',
            message: `Migration PHP en cours. ID: ${taskId}, Statut: ${status.status}`,
            recipients: ['#dev-team']
        });
        console.log(`‚úÖ Notification envoy√©e. ID: ${notificationTaskId}`);

        // 7. Exemple d'int√©gration externe via n8n
        console.log('üîÑ Mise √† jour du tableau Kanban via n8n...');
        const n8nTaskId = await orchestrator.scheduleExternalIntegration('update-kanban-board', {
            boardId: 'DEV-123',
            cardId: 'MIGRATION-456',
            newStatus: 'IN_PROGRESS',
            taskId: taskId
        });
        console.log(`‚úÖ Mise √† jour du tableau Kanban planifi√©e. ID: ${n8nTaskId}`);

        console.log('\nüéâ D√©monstration termin√©e! Le workflow de migration PHP‚ÜíNestJS est en cours d\'ex√©cution.');
        console.log('üìù R√©sum√©:');
        console.log(`- Workflow Temporal (complexe): ${taskId}`);
        console.log(`- T√¢che BullMQ (simple): ${notificationTaskId}`);
        console.log(`- Int√©gration n8n (externe): ${n8nTaskId}`);
    } catch (error) {
        console.error('‚ùå Erreur lors de la planification du workflow de migration:', error);
    }
}

/**
 * Fonction d'exemple montrant comment annuler un workflow en cours
 */
async function cancelWorkflowExample(workflowId: string) {
    console.log(`üõë Tentative d'annulation du workflow: ${workflowId}`);

    const orchestrator = new StandardizedOrchestratorService();
    const success = await orchestrator.cancelTask(workflowId, 'TEMPORAL');

    if (success) {
        console.log(`‚úÖ Workflow ${workflowId} annul√© avec succ√®s`);

        // Envoyer une notification d'annulation via BullMQ
        await orchestrator.scheduleSimpleTask('sendNotification', {
            channel: 'email',
            subject: 'Migration PHP annul√©e',
            message: `La migration avec l'ID ${workflowId} a √©t√© annul√©e manuellement`,
            recipients: ['admin@example.com']
        });
    } else {
        console.error(`‚ùå √âchec de l'annulation du workflow ${workflowId}`);
    }
}

// Ex√©cuter l'exemple si ce script est appel√© directement
if (require.main === module) {
    runPhpMigrationExample().catch(console.error);
}

// Exporter les fonctions d'exemple pour une utilisation externe
export { runPhpMigrationExample, cancelWorkflowExample };